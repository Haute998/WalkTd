



using System;
using System.Collections.Generic;

namespace WeModels
{

    public partial class PDAUser 
    {
        #region Fields
        //public string str = "PUserName:20|Password:20|PRealName:50|Remark:100|LastLoginDCode:50";
        private int _id;
        private int _supplierid;
        private string _pusername = string.Empty;
        private string _password = string.Empty;
        private string _prealname = string.Empty;
        private string _remark = string.Empty;
        private string _lastlogindcode = string.Empty;
        private DateTime _lastlogintime = new DateTime(1900,1,1);
        private DateTime _creatdate = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int SupplierID
        {
            get { return _supplierid; }
            set { _supplierid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PUserName
        {
            get { return _pusername; }
            set { _pusername = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Password
        {
            get { return _password; }
            set { _password = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PRealName
        {
            get { return _prealname; }
            set { _prealname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Remark
        {
            get { return _remark; }
            set { _remark = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 100); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string LastLoginDCode
        {
            get { return _lastlogindcode; }
            set { _lastlogindcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime LastLoginTime
        {
            get { return _lastlogintime; }
            set { _lastlogintime = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime CreatDate
        {
            get { return _creatdate; }
            set { _creatdate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [PDAUser] (SupplierID,PUserName,Password,PRealName,Remark,LastLoginDCode,LastLoginTime,CreatDate) values (@SupplierID,@PUserName,@Password,@PRealName,@Remark,@LastLoginDCode,@LastLoginTime,@CreatDate);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAUser]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@SupplierID",_supplierid),
                new System.Data.SqlClient.SqlParameter("@PUserName",_pusername),
                new System.Data.SqlClient.SqlParameter("@Password",_password),
                new System.Data.SqlClient.SqlParameter("@PRealName",_prealname),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@LastLoginDCode",_lastlogindcode),
                new System.Data.SqlClient.SqlParameter("@LastLoginTime",_lastlogintime),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [PDAUser] (SupplierID,PUserName,Password,PRealName,Remark,LastLoginDCode,LastLoginTime,CreatDate) values (@SupplierID,@PUserName,@Password,@PRealName,@Remark,@LastLoginDCode,@LastLoginTime,@CreatDate);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAUser]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@SupplierID",_supplierid),
                new System.Data.SqlClient.SqlParameter("@PUserName",_pusername),
                new System.Data.SqlClient.SqlParameter("@Password",_password),
                new System.Data.SqlClient.SqlParameter("@PRealName",_prealname),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@LastLoginDCode",_lastlogindcode),
                new System.Data.SqlClient.SqlParameter("@LastLoginTime",_lastlogintime),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [PDAUser] SET SupplierID=@SupplierID,PUserName=@PUserName,Password=@Password,PRealName=@PRealName,Remark=@Remark,LastLoginDCode=@LastLoginDCode,LastLoginTime=@LastLoginTime,CreatDate=@CreatDate WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@SupplierID",_supplierid),
                new System.Data.SqlClient.SqlParameter("@PUserName",_pusername),
                new System.Data.SqlClient.SqlParameter("@Password",_password),
                new System.Data.SqlClient.SqlParameter("@PRealName",_prealname),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@LastLoginDCode",_lastlogindcode),
                new System.Data.SqlClient.SqlParameter("@LastLoginTime",_lastlogintime),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [PDAUser] SET SupplierID=@SupplierID,PUserName=@PUserName,Password=@Password,PRealName=@PRealName,Remark=@Remark,LastLoginDCode=@LastLoginDCode,LastLoginTime=@LastLoginTime,CreatDate=@CreatDate WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@SupplierID",_supplierid),
                new System.Data.SqlClient.SqlParameter("@PUserName",_pusername),
                new System.Data.SqlClient.SqlParameter("@Password",_password),
                new System.Data.SqlClient.SqlParameter("@PRealName",_prealname),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@LastLoginDCode",_lastlogindcode),
                new System.Data.SqlClient.SqlParameter("@LastLoginTime",_lastlogintime),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static PDAUser GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,SupplierID,PUserName,Password,PRealName,Remark,LastLoginDCode,LastLoginTime,CreatDate FROM [PDAUser] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<PDAUser>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,SupplierID,PUserName,Password,PRealName,Remark,LastLoginDCode,LastLoginTime,CreatDate FROM [PDAUser] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [PDAUser] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [PDAUser] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAUser> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,SupplierID,PUserName,Password,PRealName,Remark,LastLoginDCode,LastLoginTime,CreatDate,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [PDAUser] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAUser>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAUser> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,SupplierID,PUserName,Password,PRealName,Remark,LastLoginDCode,LastLoginTime,CreatDate FROM [PDAUser] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAUser>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<PDAUser> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,SupplierID,PUserName,Password,PRealName,Remark,LastLoginDCode,LastLoginTime,CreatDate FROM [PDAUser]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAUser>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<PDAUser> GetEntitysBySupplierID(int supplierid)
    	{
    		string strSql = "SELECT ID,SupplierID,PUserName,Password,PRealName,Remark,LastLoginDCode,LastLoginTime,CreatDate FROM [PDAUser] WHERE SupplierID=@SupplierID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@SupplierID",supplierid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAUser>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class B_MenuRights 
    {
        #region Fields
        //public string str = "CodeOn:500|MethodCode:500|MethodName:500|MethodCodeMain:500";
        private int _id;
        private int _menuid;
        private string _codeon = string.Empty;
        private string _methodcode = string.Empty;
        private string _methodname = string.Empty;
        private string _methodcodemain = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 菜单编号
        /// </summary>
        public int MenuID
        {
            get { return _menuid; }
            set { _menuid = value; }
        }

        /// <summary>
        /// 菜单属性
        /// </summary>
        public string CodeOn
        {
            get { return _codeon; }
            set { _codeon = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 方法名称
        /// </summary>
        public string MethodCode
        {
            get { return _methodcode; }
            set { _methodcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 权限名称
        /// </summary>
        public string MethodName
        {
            get { return _methodname; }
            set { _methodname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 主菜单方法名
        /// </summary>
        public string MethodCodeMain
        {
            get { return _methodcodemain; }
            set { _methodcodemain = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [B_MenuRights] (MenuID,CodeOn,MethodCode,MethodName,MethodCodeMain) values (@MenuID,@CodeOn,@MethodCode,@MethodName,@MethodCodeMain);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_MenuRights]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuID",_menuid),
                new System.Data.SqlClient.SqlParameter("@CodeOn",_codeon),
                new System.Data.SqlClient.SqlParameter("@MethodCode",_methodcode),
                new System.Data.SqlClient.SqlParameter("@MethodName",_methodname),
                new System.Data.SqlClient.SqlParameter("@MethodCodeMain",_methodcodemain),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [B_MenuRights] (MenuID,CodeOn,MethodCode,MethodName,MethodCodeMain) values (@MenuID,@CodeOn,@MethodCode,@MethodName,@MethodCodeMain);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_MenuRights]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuID",_menuid),
                new System.Data.SqlClient.SqlParameter("@CodeOn",_codeon),
                new System.Data.SqlClient.SqlParameter("@MethodCode",_methodcode),
                new System.Data.SqlClient.SqlParameter("@MethodName",_methodname),
                new System.Data.SqlClient.SqlParameter("@MethodCodeMain",_methodcodemain),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [B_MenuRights] SET MenuID=@MenuID,CodeOn=@CodeOn,MethodCode=@MethodCode,MethodName=@MethodName,MethodCodeMain=@MethodCodeMain WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuID",_menuid),
                new System.Data.SqlClient.SqlParameter("@CodeOn",_codeon),
                new System.Data.SqlClient.SqlParameter("@MethodCode",_methodcode),
                new System.Data.SqlClient.SqlParameter("@MethodName",_methodname),
                new System.Data.SqlClient.SqlParameter("@MethodCodeMain",_methodcodemain),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [B_MenuRights] SET MenuID=@MenuID,CodeOn=@CodeOn,MethodCode=@MethodCode,MethodName=@MethodName,MethodCodeMain=@MethodCodeMain WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuID",_menuid),
                new System.Data.SqlClient.SqlParameter("@CodeOn",_codeon),
                new System.Data.SqlClient.SqlParameter("@MethodCode",_methodcode),
                new System.Data.SqlClient.SqlParameter("@MethodName",_methodname),
                new System.Data.SqlClient.SqlParameter("@MethodCodeMain",_methodcodemain),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static B_MenuRights GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,MenuID,CodeOn,MethodCode,MethodName,MethodCodeMain FROM [B_MenuRights] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<B_MenuRights>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,MenuID,CodeOn,MethodCode,MethodName,MethodCodeMain FROM [B_MenuRights] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [B_MenuRights] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [B_MenuRights] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_MenuRights> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MenuID,CodeOn,MethodCode,MethodName,MethodCodeMain,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [B_MenuRights] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_MenuRights>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_MenuRights> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MenuID,CodeOn,MethodCode,MethodName,MethodCodeMain FROM [B_MenuRights] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_MenuRights>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<B_MenuRights> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,MenuID,CodeOn,MethodCode,MethodName,MethodCodeMain FROM [B_MenuRights]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<B_MenuRights>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<B_MenuRights> GetEntitysByMenuID(int menuid)
    	{
    		string strSql = "SELECT ID,MenuID,CodeOn,MethodCode,MethodName,MethodCodeMain FROM [B_MenuRights] WHERE MenuID=@MenuID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@MenuID",menuid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<B_MenuRights>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class B_Menu 
    {
        #region Fields
        //public string str = "Icon:2147483647|MenuName:500|MenuUrl:2147483647";
        private int _id;
        private int _parentid;
        private string _icon = string.Empty;
        private string _menuname = string.Empty;
        private string _menuurl = string.Empty;
        private int _sort;
        private bool _isvalid;
        private bool _isshow;
        private bool _isrobot;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 父级菜单编号
        /// </summary>
        public int ParentID
        {
            get { return _parentid; }
            set { _parentid = value; }
        }

        /// <summary>
        /// 图标
        /// </summary>
        public string Icon
        {
            get { return _icon; }
            set { _icon = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 菜单名称
        /// </summary>
        public string MenuName
        {
            get { return _menuname; }
            set { _menuname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 菜单链接
        /// </summary>
        public string MenuUrl
        {
            get { return _menuurl; }
            set { _menuurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 排序
        /// </summary>
        public int Sort
        {
            get { return _sort; }
            set { _sort = value; }
        }

        /// <summary>
        /// 是否有效
        /// </summary>
        public bool IsValid
        {
            get { return _isvalid; }
            set { _isvalid = value; }
        }

        /// <summary>
        /// 是否显示
        /// </summary>
        public bool IsShow
        {
            get { return _isshow; }
            set { _isshow = value; }
        }

        /// <summary>
        /// 是否超级管理员使用
        /// </summary>
        public bool IsRobot
        {
            get { return _isrobot; }
            set { _isrobot = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [B_Menu] (ParentID,Icon,MenuName,MenuUrl,Sort,IsValid,IsShow,IsRobot) values (@ParentID,@Icon,@MenuName,@MenuUrl,@Sort,@IsValid,@IsShow,@IsRobot);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_Menu]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ParentID",_parentid),
                new System.Data.SqlClient.SqlParameter("@Icon",_icon),
                new System.Data.SqlClient.SqlParameter("@MenuName",_menuname),
                new System.Data.SqlClient.SqlParameter("@MenuUrl",_menuurl),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@IsRobot",_isrobot),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [B_Menu] (ParentID,Icon,MenuName,MenuUrl,Sort,IsValid,IsShow,IsRobot) values (@ParentID,@Icon,@MenuName,@MenuUrl,@Sort,@IsValid,@IsShow,@IsRobot);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_Menu]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ParentID",_parentid),
                new System.Data.SqlClient.SqlParameter("@Icon",_icon),
                new System.Data.SqlClient.SqlParameter("@MenuName",_menuname),
                new System.Data.SqlClient.SqlParameter("@MenuUrl",_menuurl),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@IsRobot",_isrobot),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [B_Menu] SET ParentID=@ParentID,Icon=@Icon,MenuName=@MenuName,MenuUrl=@MenuUrl,Sort=@Sort,IsValid=@IsValid,IsShow=@IsShow,IsRobot=@IsRobot WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ParentID",_parentid),
                new System.Data.SqlClient.SqlParameter("@Icon",_icon),
                new System.Data.SqlClient.SqlParameter("@MenuName",_menuname),
                new System.Data.SqlClient.SqlParameter("@MenuUrl",_menuurl),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@IsRobot",_isrobot),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [B_Menu] SET ParentID=@ParentID,Icon=@Icon,MenuName=@MenuName,MenuUrl=@MenuUrl,Sort=@Sort,IsValid=@IsValid,IsShow=@IsShow,IsRobot=@IsRobot WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ParentID",_parentid),
                new System.Data.SqlClient.SqlParameter("@Icon",_icon),
                new System.Data.SqlClient.SqlParameter("@MenuName",_menuname),
                new System.Data.SqlClient.SqlParameter("@MenuUrl",_menuurl),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@IsRobot",_isrobot),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static B_Menu GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ParentID,Icon,MenuName,MenuUrl,Sort,IsValid,IsShow,IsRobot FROM [B_Menu] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<B_Menu>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ParentID,Icon,MenuName,MenuUrl,Sort,IsValid,IsShow,IsRobot FROM [B_Menu] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [B_Menu] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [B_Menu] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_Menu> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ParentID,Icon,MenuName,MenuUrl,Sort,IsValid,IsShow,IsRobot,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [B_Menu] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_Menu>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_Menu> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ParentID,Icon,MenuName,MenuUrl,Sort,IsValid,IsShow,IsRobot FROM [B_Menu] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_Menu>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<B_Menu> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ParentID,Icon,MenuName,MenuUrl,Sort,IsValid,IsShow,IsRobot FROM [B_Menu]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<B_Menu>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<B_Menu> GetEntitysByParentID(int parentid)
    	{
    		string strSql = "SELECT ID,ParentID,Icon,MenuName,MenuUrl,Sort,IsValid,IsShow,IsRobot FROM [B_Menu] WHERE ParentID=@ParentID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ParentID",parentid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<B_Menu>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserStock 
    {
        #region Fields
        //public string str = "UserName:50|ProductNo:50";
        private string _username = string.Empty;
        private string _productno = string.Empty;
        private int _stock;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductNo
        {
            get { return _productno; }
            set { _productno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Stock
        {
            get { return _stock; }
            set { _stock = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserStock] (UserName,ProductNo,Stock) values (@UserName,@ProductNo,@Stock);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserStock]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ProductNo",_productno),
                new System.Data.SqlClient.SqlParameter("@Stock",_stock),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserStock] (UserName,ProductNo,Stock) values (@UserName,@ProductNo,@Stock);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserStock]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ProductNo",_productno),
                new System.Data.SqlClient.SqlParameter("@Stock",_stock),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserStock> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 UserName,ProductNo,Stock FROM [C_UserStock]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserStock>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class TableViewConfig 
    {
        #region Fields
        //public string str = "TableUrl:2147483647|UserName:2147483647|ShowName:2147483647";
        private int _id;
        private string _tableurl = string.Empty;
        private string _username = string.Empty;
        private string _showname = string.Empty;
        private int _sort;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 表单地址    /Controllers/action
        /// </summary>
        public string TableUrl
        {
            get { return _tableurl; }
            set { _tableurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 用户ID
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 显示的列名
        /// </summary>
        public string ShowName
        {
            get { return _showname; }
            set { _showname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 排序
        /// </summary>
        public int Sort
        {
            get { return _sort; }
            set { _sort = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [TableViewConfig] (TableUrl,UserName,ShowName,Sort) values (@TableUrl,@UserName,@ShowName,@Sort);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [TableViewConfig]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@TableUrl",_tableurl),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [TableViewConfig] (TableUrl,UserName,ShowName,Sort) values (@TableUrl,@UserName,@ShowName,@Sort);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [TableViewConfig]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@TableUrl",_tableurl),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [TableViewConfig] SET TableUrl=@TableUrl,UserName=@UserName,ShowName=@ShowName,Sort=@Sort WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@TableUrl",_tableurl),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [TableViewConfig] SET TableUrl=@TableUrl,UserName=@UserName,ShowName=@ShowName,Sort=@Sort WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@TableUrl",_tableurl),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static TableViewConfig GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,TableUrl,UserName,ShowName,Sort FROM [TableViewConfig] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<TableViewConfig>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,TableUrl,UserName,ShowName,Sort FROM [TableViewConfig] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [TableViewConfig] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [TableViewConfig] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<TableViewConfig> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,TableUrl,UserName,ShowName,Sort,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [TableViewConfig] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<TableViewConfig>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<TableViewConfig> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,TableUrl,UserName,ShowName,Sort FROM [TableViewConfig] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<TableViewConfig>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<TableViewConfig> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,TableUrl,UserName,ShowName,Sort FROM [TableViewConfig]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<TableViewConfig>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class View_BigCodeLink 
    {
        #region Fields
        //public string str = "BigCode:50|MiddleCode:50|LinkBigPDAUser:50|Name:50|SupplierName:2147483647";
        private int _stateid;
        private string _bigcode = string.Empty;
        private string _middlecode = string.Empty;
        private int _linkbigtime;
        private string _linkbigpdauser = string.Empty;
        private string _name = string.Empty;
        private string _suppliername = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int StateID
        {
            get { return _stateid; }
            set { _stateid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BigCode
        {
            get { return _bigcode; }
            set { _bigcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string MiddleCode
        {
            get { return _middlecode; }
            set { _middlecode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int LinkBigTime
        {
            get { return _linkbigtime; }
            set { _linkbigtime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string LinkBigPDAUser
        {
            get { return _linkbigpdauser; }
            set { _linkbigpdauser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string SupplierName
        {
            get { return _suppliername; }
            set { _suppliername = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [View_BigCodeLink] (StateID,BigCode,MiddleCode,LinkBigTime,LinkBigPDAUser,Name,SupplierName) values (@StateID,@BigCode,@MiddleCode,@LinkBigTime,@LinkBigPDAUser,@Name,@SupplierName);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_BigCodeLink]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@StateID",_stateid),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@LinkBigTime",_linkbigtime),
                new System.Data.SqlClient.SqlParameter("@LinkBigPDAUser",_linkbigpdauser),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@SupplierName",_suppliername),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [View_BigCodeLink] (StateID,BigCode,MiddleCode,LinkBigTime,LinkBigPDAUser,Name,SupplierName) values (@StateID,@BigCode,@MiddleCode,@LinkBigTime,@LinkBigPDAUser,@Name,@SupplierName);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_BigCodeLink]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@StateID",_stateid),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@LinkBigTime",_linkbigtime),
                new System.Data.SqlClient.SqlParameter("@LinkBigPDAUser",_linkbigpdauser),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@SupplierName",_suppliername),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<View_BigCodeLink> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 StateID,BigCode,MiddleCode,LinkBigTime,LinkBigPDAUser,Name,SupplierName FROM [View_BigCodeLink]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<View_BigCodeLink>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class jf_lpOrderLog 
    {
        #region Fields
        //public string str = "OrderNo:50|LogType:50|Logs:2147483647|Oper:500";
        private int _id;
        private string _orderno = string.Empty;
        private string _logtype = string.Empty;
        private string _logs = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        private string _oper = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 订单号
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 日志内容
        /// </summary>
        public string LogType
        {
            get { return _logtype; }
            set { _logtype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 日志内容
        /// </summary>
        public string Logs
        {
            get { return _logs; }
            set { _logs = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 操作时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 操作人
        /// </summary>
        public string Oper
        {
            get { return _oper; }
            set { _oper = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [jf_lpOrderLog] (OrderNo,LogType,Logs,Dat,Oper) values (@OrderNo,@LogType,@Logs,@Dat,@Oper);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_lpOrderLog]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@LogType",_logtype),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [jf_lpOrderLog] (OrderNo,LogType,Logs,Dat,Oper) values (@OrderNo,@LogType,@Logs,@Dat,@Oper);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_lpOrderLog]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@LogType",_logtype),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [jf_lpOrderLog] SET OrderNo=@OrderNo,LogType=@LogType,Logs=@Logs,Dat=@Dat,Oper=@Oper WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@LogType",_logtype),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [jf_lpOrderLog] SET OrderNo=@OrderNo,LogType=@LogType,Logs=@Logs,Dat=@Dat,Oper=@Oper WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@LogType",_logtype),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static jf_lpOrderLog GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,OrderNo,LogType,Logs,Dat,Oper FROM [jf_lpOrderLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<jf_lpOrderLog>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,OrderNo,LogType,Logs,Dat,Oper FROM [jf_lpOrderLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [jf_lpOrderLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [jf_lpOrderLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_lpOrderLog> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,LogType,Logs,Dat,Oper,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [jf_lpOrderLog] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_lpOrderLog>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_lpOrderLog> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,LogType,Logs,Dat,Oper FROM [jf_lpOrderLog] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_lpOrderLog>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<jf_lpOrderLog> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,OrderNo,LogType,Logs,Dat,Oper FROM [jf_lpOrderLog]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_lpOrderLog>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class View_RtnRecord 
    {
        #region Fields
        //public string str = "OrderNo:50|BarCode:50|ProducctNo:50|OperaUser:50|ProductImg:2147483647|ProductNumber:50|ProductName:50|PUserName:20|PRealName:50|Name:2147483647";
        private string _orderno = string.Empty;
        private int _rtnway;
        private string _barcode = string.Empty;
        private string _producctno = string.Empty;
        private int _returntime;
        private string _operauser = string.Empty;
        private int _barcount;
        private string _productimg = string.Empty;
        private string _productnumber = string.Empty;
        private string _productname = string.Empty;
        private string _pusername = string.Empty;
        private string _prealname = string.Empty;
        private string _name = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int RtnWay
        {
            get { return _rtnway; }
            set { _rtnway = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BarCode
        {
            get { return _barcode; }
            set { _barcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProducctNo
        {
            get { return _producctno; }
            set { _producctno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ReturnTime
        {
            get { return _returntime; }
            set { _returntime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OperaUser
        {
            get { return _operauser; }
            set { _operauser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int BarCount
        {
            get { return _barcount; }
            set { _barcount = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductImg
        {
            get { return _productimg; }
            set { _productimg = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductNumber
        {
            get { return _productnumber; }
            set { _productnumber = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductName
        {
            get { return _productname; }
            set { _productname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PUserName
        {
            get { return _pusername; }
            set { _pusername = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PRealName
        {
            get { return _prealname; }
            set { _prealname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [View_RtnRecord] (OrderNo,RtnWay,BarCode,ProducctNo,ReturnTime,OperaUser,BarCount,ProductImg,ProductNumber,ProductName,PUserName,PRealName,Name) values (@OrderNo,@RtnWay,@BarCode,@ProducctNo,@ReturnTime,@OperaUser,@BarCount,@ProductImg,@ProductNumber,@ProductName,@PUserName,@PRealName,@Name);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_RtnRecord]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@RtnWay",_rtnway),
                new System.Data.SqlClient.SqlParameter("@BarCode",_barcode),
                new System.Data.SqlClient.SqlParameter("@ProducctNo",_producctno),
                new System.Data.SqlClient.SqlParameter("@ReturnTime",_returntime),
                new System.Data.SqlClient.SqlParameter("@OperaUser",_operauser),
                new System.Data.SqlClient.SqlParameter("@BarCount",_barcount),
                new System.Data.SqlClient.SqlParameter("@ProductImg",_productimg),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@PUserName",_pusername),
                new System.Data.SqlClient.SqlParameter("@PRealName",_prealname),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [View_RtnRecord] (OrderNo,RtnWay,BarCode,ProducctNo,ReturnTime,OperaUser,BarCount,ProductImg,ProductNumber,ProductName,PUserName,PRealName,Name) values (@OrderNo,@RtnWay,@BarCode,@ProducctNo,@ReturnTime,@OperaUser,@BarCount,@ProductImg,@ProductNumber,@ProductName,@PUserName,@PRealName,@Name);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_RtnRecord]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@RtnWay",_rtnway),
                new System.Data.SqlClient.SqlParameter("@BarCode",_barcode),
                new System.Data.SqlClient.SqlParameter("@ProducctNo",_producctno),
                new System.Data.SqlClient.SqlParameter("@ReturnTime",_returntime),
                new System.Data.SqlClient.SqlParameter("@OperaUser",_operauser),
                new System.Data.SqlClient.SqlParameter("@BarCount",_barcount),
                new System.Data.SqlClient.SqlParameter("@ProductImg",_productimg),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@PUserName",_pusername),
                new System.Data.SqlClient.SqlParameter("@PRealName",_prealname),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<View_RtnRecord> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 OrderNo,RtnWay,BarCode,ProducctNo,ReturnTime,OperaUser,BarCount,ProductImg,ProductNumber,ProductName,PUserName,PRealName,Name FROM [View_RtnRecord]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<View_RtnRecord>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSPolicy 
    {
        #region Fields
        //public string str = "Contents:2147483647|Title:50";
        private int _id;
        private string _contents = string.Empty;
        private bool _isshow;
        private int _sort;
        private string _title = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Contents
        {
            get { return _contents; }
            set { _contents = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsShow
        {
            get { return _isshow; }
            set { _isshow = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Sort
        {
            get { return _sort; }
            set { _sort = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSPolicy] (Contents,IsShow,Sort,Title) values (@Contents,@IsShow,@Sort,@Title);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSPolicy]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSPolicy] (Contents,IsShow,Sort,Title) values (@Contents,@IsShow,@Sort,@Title);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSPolicy]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSPolicy] SET Contents=@Contents,IsShow=@IsShow,Sort=@Sort,Title=@Title WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSPolicy] SET Contents=@Contents,IsShow=@IsShow,Sort=@Sort,Title=@Title WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSPolicy GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Contents,IsShow,Sort,Title FROM [SYSPolicy] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSPolicy>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Contents,IsShow,Sort,Title FROM [SYSPolicy] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSPolicy] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSPolicy] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSPolicy> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Contents,IsShow,Sort,Title,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSPolicy] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSPolicy>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSPolicy> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Contents,IsShow,Sort,Title FROM [SYSPolicy] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSPolicy>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSPolicy> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Contents,IsShow,Sort,Title FROM [SYSPolicy]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSPolicy>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class AgentIntention 
    {
        #region Fields
        //public string str = "ChiefUser:2147483647|Name:2147483647|wxNo:2147483647|Phone:2147483647|Province:2147483647|City:2147483647|Area:2147483647";
        private int _id;
        private string _chiefuser = string.Empty;
        private string _name = string.Empty;
        private string _wxno = string.Empty;
        private string _phone = string.Empty;
        private string _province = string.Empty;
        private string _city = string.Empty;
        private string _area = string.Empty;
        private DateTime _datcreate = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 上级UserName
        /// </summary>
        public string ChiefUser
        {
            get { return _chiefuser; }
            set { _chiefuser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 代理姓名
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 微信号
        /// </summary>
        public string wxNo
        {
            get { return _wxno; }
            set { _wxno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 手机号
        /// </summary>
        public string Phone
        {
            get { return _phone; }
            set { _phone = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Province
        {
            get { return _province; }
            set { _province = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string City
        {
            get { return _city; }
            set { _city = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Area
        {
            get { return _area; }
            set { _area = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DatCreate
        {
            get { return _datcreate; }
            set { _datcreate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [AgentIntention] (ChiefUser,Name,wxNo,Phone,Province,City,Area,DatCreate) values (@ChiefUser,@Name,@wxNo,@Phone,@Province,@City,@Area,@DatCreate);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [AgentIntention]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ChiefUser",_chiefuser),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@wxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [AgentIntention] (ChiefUser,Name,wxNo,Phone,Province,City,Area,DatCreate) values (@ChiefUser,@Name,@wxNo,@Phone,@Province,@City,@Area,@DatCreate);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [AgentIntention]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ChiefUser",_chiefuser),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@wxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [AgentIntention] SET ChiefUser=@ChiefUser,Name=@Name,wxNo=@wxNo,Phone=@Phone,Province=@Province,City=@City,Area=@Area,DatCreate=@DatCreate WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ChiefUser",_chiefuser),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@wxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [AgentIntention] SET ChiefUser=@ChiefUser,Name=@Name,wxNo=@wxNo,Phone=@Phone,Province=@Province,City=@City,Area=@Area,DatCreate=@DatCreate WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ChiefUser",_chiefuser),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@wxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static AgentIntention GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ChiefUser,Name,wxNo,Phone,Province,City,Area,DatCreate FROM [AgentIntention] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<AgentIntention>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ChiefUser,Name,wxNo,Phone,Province,City,Area,DatCreate FROM [AgentIntention] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [AgentIntention] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [AgentIntention] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<AgentIntention> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ChiefUser,Name,wxNo,Phone,Province,City,Area,DatCreate,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [AgentIntention] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<AgentIntention>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<AgentIntention> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ChiefUser,Name,wxNo,Phone,Province,City,Area,DatCreate FROM [AgentIntention] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<AgentIntention>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<AgentIntention> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ChiefUser,Name,wxNo,Phone,Province,City,Area,DatCreate FROM [AgentIntention]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<AgentIntention>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserType 
    {
        #region Fields
        //public string str = "TypeCode:20|Name:50|State:50";
        private int _id;
        private string _typecode = string.Empty;
        private string _name = string.Empty;
        private int _lever;
        private string _state = string.Empty;
        private decimal _minorderprice;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string TypeCode
        {
            get { return _typecode; }
            set { _typecode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 级别名称
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 级别
        /// </summary>
        public int Lever
        {
            get { return _lever; }
            set { _lever = value; }
        }

        /// <summary>
        /// 状态
        /// </summary>
        public string State
        {
            get { return _state; }
            set { _state = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 下订单最低金额
        /// </summary>
        public decimal MinOrderPrice
        {
            get { return _minorderprice; }
            set { _minorderprice = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserType] (TypeCode,Name,Lever,State,MinOrderPrice) values (@TypeCode,@Name,@Lever,@State,@MinOrderPrice);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserType]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@TypeCode",_typecode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Lever",_lever),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@MinOrderPrice",_minorderprice),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserType] (TypeCode,Name,Lever,State,MinOrderPrice) values (@TypeCode,@Name,@Lever,@State,@MinOrderPrice);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserType]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@TypeCode",_typecode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Lever",_lever),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@MinOrderPrice",_minorderprice),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserType] SET TypeCode=@TypeCode,Name=@Name,Lever=@Lever,State=@State,MinOrderPrice=@MinOrderPrice WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@TypeCode",_typecode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Lever",_lever),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@MinOrderPrice",_minorderprice),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserType] SET TypeCode=@TypeCode,Name=@Name,Lever=@Lever,State=@State,MinOrderPrice=@MinOrderPrice WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@TypeCode",_typecode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Lever",_lever),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@MinOrderPrice",_minorderprice),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserType GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,TypeCode,Name,Lever,State,MinOrderPrice FROM [C_UserType] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserType>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,TypeCode,Name,Lever,State,MinOrderPrice FROM [C_UserType] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserType] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserType] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserType> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,TypeCode,Name,Lever,State,MinOrderPrice,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserType] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserType>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserType> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,TypeCode,Name,Lever,State,MinOrderPrice FROM [C_UserType] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserType>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserType> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,TypeCode,Name,Lever,State,MinOrderPrice FROM [C_UserType]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserType>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSOpenVideo 
    {
        #region Fields
        //public string str = "Title:2147483647|VideoUrl:2147483647";
        private int _id;
        private string _title = string.Empty;
        private string _videourl = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 视频地址
        /// </summary>
        public string VideoUrl
        {
            get { return _videourl; }
            set { _videourl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSOpenVideo] (Title,VideoUrl,Dat) values (@Title,@VideoUrl,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSOpenVideo]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@VideoUrl",_videourl),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSOpenVideo] (Title,VideoUrl,Dat) values (@Title,@VideoUrl,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSOpenVideo]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@VideoUrl",_videourl),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSOpenVideo] SET Title=@Title,VideoUrl=@VideoUrl,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@VideoUrl",_videourl),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSOpenVideo] SET Title=@Title,VideoUrl=@VideoUrl,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@VideoUrl",_videourl),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSOpenVideo GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Title,VideoUrl,Dat FROM [SYSOpenVideo] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSOpenVideo>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Title,VideoUrl,Dat FROM [SYSOpenVideo] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSOpenVideo] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSOpenVideo] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSOpenVideo> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Title,VideoUrl,Dat,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSOpenVideo] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSOpenVideo>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSOpenVideo> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Title,VideoUrl,Dat FROM [SYSOpenVideo] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSOpenVideo>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSOpenVideo> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Title,VideoUrl,Dat FROM [SYSOpenVideo]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSOpenVideo>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserWallet 
    {
        #region Fields
        //public string str = "UserName:2147483647";
        private int _id;
        private decimal _money;
        private string _username = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 余额
        /// </summary>
        public decimal Money
        {
            get { return _money; }
            set { _money = value; }
        }

        /// <summary>
        /// 客户ID
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserWallet] (Money,UserName) values (@Money,@UserName);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserWallet]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserWallet] (Money,UserName) values (@Money,@UserName);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserWallet]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserWallet] SET Money=@Money,UserName=@UserName WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserWallet] SET Money=@Money,UserName=@UserName WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserWallet GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Money,UserName FROM [C_UserWallet] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserWallet>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Money,UserName FROM [C_UserWallet] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserWallet] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserWallet] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserWallet> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Money,UserName,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserWallet] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserWallet>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserWallet> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Money,UserName FROM [C_UserWallet] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserWallet>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserWallet> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Money,UserName FROM [C_UserWallet]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserWallet>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSOpenPic 
    {
        #region Fields
        //public string str = "ImgUrl:2147483647|Title:2147483647";
        private int _id;
        private string _imgurl = string.Empty;
        private string _title = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 图片路径
        /// </summary>
        public string ImgUrl
        {
            get { return _imgurl; }
            set { _imgurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 图片名称
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSOpenPic] (ImgUrl,Title,Dat) values (@ImgUrl,@Title,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSOpenPic]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSOpenPic] (ImgUrl,Title,Dat) values (@ImgUrl,@Title,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSOpenPic]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSOpenPic] SET ImgUrl=@ImgUrl,Title=@Title,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSOpenPic] SET ImgUrl=@ImgUrl,Title=@Title,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSOpenPic GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ImgUrl,Title,Dat FROM [SYSOpenPic] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSOpenPic>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ImgUrl,Title,Dat FROM [SYSOpenPic] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSOpenPic] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSOpenPic] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSOpenPic> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ImgUrl,Title,Dat,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSOpenPic] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSOpenPic>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSOpenPic> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ImgUrl,Title,Dat FROM [SYSOpenPic] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSOpenPic>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSOpenPic> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ImgUrl,Title,Dat FROM [SYSOpenPic]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSOpenPic>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class jf_UserMail 
    {
        #region Fields
        //public string str = "UserName:20|ContactName:50|ContactMobile:50|Address:3000|Province:20|City:20|Area:30";
        private int _id;
        private string _username = string.Empty;
        private string _contactname = string.Empty;
        private string _contactmobile = string.Empty;
        private string _address = string.Empty;
        private bool _isdefault;
        private string _province = string.Empty;
        private string _city = string.Empty;
        private string _area = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 用户名
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 联系人姓名
        /// </summary>
        public string ContactName
        {
            get { return _contactname; }
            set { _contactname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 联系人电话
        /// </summary>
        public string ContactMobile
        {
            get { return _contactmobile; }
            set { _contactmobile = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 收货地址
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 3000); }
        }

        /// <summary>
        /// 是否默认
        /// </summary>
        public bool IsDefault
        {
            get { return _isdefault; }
            set { _isdefault = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Province
        {
            get { return _province; }
            set { _province = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string City
        {
            get { return _city; }
            set { _city = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Area
        {
            get { return _area; }
            set { _area = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [jf_UserMail] (UserName,ContactName,ContactMobile,Address,IsDefault,Province,City,Area) values (@UserName,@ContactName,@ContactMobile,@Address,@IsDefault,@Province,@City,@Area);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_UserMail]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ContactName",_contactname),
                new System.Data.SqlClient.SqlParameter("@ContactMobile",_contactmobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@IsDefault",_isdefault),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [jf_UserMail] (UserName,ContactName,ContactMobile,Address,IsDefault,Province,City,Area) values (@UserName,@ContactName,@ContactMobile,@Address,@IsDefault,@Province,@City,@Area);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_UserMail]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ContactName",_contactname),
                new System.Data.SqlClient.SqlParameter("@ContactMobile",_contactmobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@IsDefault",_isdefault),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [jf_UserMail] SET UserName=@UserName,ContactName=@ContactName,ContactMobile=@ContactMobile,Address=@Address,IsDefault=@IsDefault,Province=@Province,City=@City,Area=@Area WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ContactName",_contactname),
                new System.Data.SqlClient.SqlParameter("@ContactMobile",_contactmobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@IsDefault",_isdefault),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [jf_UserMail] SET UserName=@UserName,ContactName=@ContactName,ContactMobile=@ContactMobile,Address=@Address,IsDefault=@IsDefault,Province=@Province,City=@City,Area=@Area WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ContactName",_contactname),
                new System.Data.SqlClient.SqlParameter("@ContactMobile",_contactmobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@IsDefault",_isdefault),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static jf_UserMail GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,UserName,ContactName,ContactMobile,Address,IsDefault,Province,City,Area FROM [jf_UserMail] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<jf_UserMail>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,UserName,ContactName,ContactMobile,Address,IsDefault,Province,City,Area FROM [jf_UserMail] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [jf_UserMail] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [jf_UserMail] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_UserMail> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,ContactName,ContactMobile,Address,IsDefault,Province,City,Area,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [jf_UserMail] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_UserMail>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_UserMail> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,ContactName,ContactMobile,Address,IsDefault,Province,City,Area FROM [jf_UserMail] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_UserMail>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<jf_UserMail> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,UserName,ContactName,ContactMobile,Address,IsDefault,Province,City,Area FROM [jf_UserMail]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_UserMail>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSNotifyMsg 
    {
        #region Fields
        //public string str = "MsgType:2147483647|MsgContent:2147483647|UserName:2147483647";
        private int _id;
        private string _msgtype = string.Empty;
        private string _msgcontent = string.Empty;
        private string _username = string.Empty;
        private bool _isread;
        private DateTime _dat = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 通知表消息类别
        /// </summary>
        public string MsgType
        {
            get { return _msgtype; }
            set { _msgtype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 消息内容
        /// </summary>
        public string MsgContent
        {
            get { return _msgcontent; }
            set { _msgcontent = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 是否已读
        /// </summary>
        public bool IsRead
        {
            get { return _isread; }
            set { _isread = value; }
        }

        /// <summary>
        /// 消息时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSNotifyMsg] (MsgType,MsgContent,UserName,IsRead,Dat) values (@MsgType,@MsgContent,@UserName,@IsRead,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSNotifyMsg]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MsgType",_msgtype),
                new System.Data.SqlClient.SqlParameter("@MsgContent",_msgcontent),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@IsRead",_isread),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSNotifyMsg] (MsgType,MsgContent,UserName,IsRead,Dat) values (@MsgType,@MsgContent,@UserName,@IsRead,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSNotifyMsg]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MsgType",_msgtype),
                new System.Data.SqlClient.SqlParameter("@MsgContent",_msgcontent),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@IsRead",_isread),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSNotifyMsg] SET MsgType=@MsgType,MsgContent=@MsgContent,UserName=@UserName,IsRead=@IsRead,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MsgType",_msgtype),
                new System.Data.SqlClient.SqlParameter("@MsgContent",_msgcontent),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@IsRead",_isread),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSNotifyMsg] SET MsgType=@MsgType,MsgContent=@MsgContent,UserName=@UserName,IsRead=@IsRead,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MsgType",_msgtype),
                new System.Data.SqlClient.SqlParameter("@MsgContent",_msgcontent),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@IsRead",_isread),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSNotifyMsg GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,MsgType,MsgContent,UserName,IsRead,Dat FROM [SYSNotifyMsg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSNotifyMsg>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,MsgType,MsgContent,UserName,IsRead,Dat FROM [SYSNotifyMsg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSNotifyMsg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSNotifyMsg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSNotifyMsg> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MsgType,MsgContent,UserName,IsRead,Dat,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSNotifyMsg] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSNotifyMsg>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSNotifyMsg> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MsgType,MsgContent,UserName,IsRead,Dat FROM [SYSNotifyMsg] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSNotifyMsg>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSNotifyMsg> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,MsgType,MsgContent,UserName,IsRead,Dat FROM [SYSNotifyMsg]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSNotifyMsg>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class LotteryActivitysRedPack 
    {
        #region Fields
        //public string str = "";
        private int _id;
        private int _activityid;
        private int _areaid;
        private decimal _maxprice;
        private decimal _minprice;
        private decimal _rate;
        private int _createtime;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ActivityID
        {
            get { return _activityid; }
            set { _activityid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int AreaID
        {
            get { return _areaid; }
            set { _areaid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal MaxPrice
        {
            get { return _maxprice; }
            set { _maxprice = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal MinPrice
        {
            get { return _minprice; }
            set { _minprice = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal Rate
        {
            get { return _rate; }
            set { _rate = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CreateTime
        {
            get { return _createtime; }
            set { _createtime = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [LotteryActivitysRedPack] (ActivityID,AreaID,MaxPrice,MinPrice,Rate,CreateTime) values (@ActivityID,@AreaID,@MaxPrice,@MinPrice,@Rate,@CreateTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryActivitysRedPack]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [LotteryActivitysRedPack] (ActivityID,AreaID,MaxPrice,MinPrice,Rate,CreateTime) values (@ActivityID,@AreaID,@MaxPrice,@MinPrice,@Rate,@CreateTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryActivitysRedPack]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [LotteryActivitysRedPack] SET ActivityID=@ActivityID,AreaID=@AreaID,MaxPrice=@MaxPrice,MinPrice=@MinPrice,Rate=@Rate,CreateTime=@CreateTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [LotteryActivitysRedPack] SET ActivityID=@ActivityID,AreaID=@AreaID,MaxPrice=@MaxPrice,MinPrice=@MinPrice,Rate=@Rate,CreateTime=@CreateTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static LotteryActivitysRedPack GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,Rate,CreateTime FROM [LotteryActivitysRedPack] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<LotteryActivitysRedPack>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,Rate,CreateTime FROM [LotteryActivitysRedPack] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [LotteryActivitysRedPack] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [LotteryActivitysRedPack] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryActivitysRedPack> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,Rate,CreateTime,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [LotteryActivitysRedPack] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysRedPack>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryActivitysRedPack> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,Rate,CreateTime FROM [LotteryActivitysRedPack] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysRedPack>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<LotteryActivitysRedPack> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ActivityID,AreaID,MaxPrice,MinPrice,Rate,CreateTime FROM [LotteryActivitysRedPack]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysRedPack>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<LotteryActivitysRedPack> GetEntitysByActivityID(int activityid)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,Rate,CreateTime FROM [LotteryActivitysRedPack] WHERE ActivityID=@ActivityID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ActivityID",activityid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysRedPack>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<LotteryActivitysRedPack> GetEntitysByAreaID(int areaid)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,Rate,CreateTime FROM [LotteryActivitysRedPack] WHERE AreaID=@AreaID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@AreaID",areaid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysRedPack>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class View_C_User 
    {
        #region Fields
        //public string str = "UserName:50|Name:50|Phone:50|C_UserTypeName:50|Province:50|City:50|Area:50|Address:200";
        private int _id;
        private string _username = string.Empty;
        private string _name = string.Empty;
        private string _phone = string.Empty;
        private int _c_usertypeid;
        private string _c_usertypename = string.Empty;
        private string _province = string.Empty;
        private string _city = string.Empty;
        private string _area = string.Empty;
        private string _address = string.Empty;
        private int _chief;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Phone
        {
            get { return _phone; }
            set { _phone = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int C_UserTypeID
        {
            get { return _c_usertypeid; }
            set { _c_usertypeid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string C_UserTypeName
        {
            get { return _c_usertypename; }
            set { _c_usertypename = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Province
        {
            get { return _province; }
            set { _province = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string City
        {
            get { return _city; }
            set { _city = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Area
        {
            get { return _area; }
            set { _area = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Chief
        {
            get { return _chief; }
            set { _chief = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [View_C_User] (ID,UserName,Name,Phone,C_UserTypeID,C_UserTypeName,Province,City,Area,Address,Chief) values (@ID,@UserName,@Name,@Phone,@C_UserTypeID,@C_UserTypeName,@Province,@City,@Area,@Address,@Chief);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_C_User]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeID",_c_usertypeid),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeName",_c_usertypename),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Chief",_chief),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [View_C_User] (ID,UserName,Name,Phone,C_UserTypeID,C_UserTypeName,Province,City,Area,Address,Chief) values (@ID,@UserName,@Name,@Phone,@C_UserTypeID,@C_UserTypeName,@Province,@City,@Area,@Address,@Chief);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_C_User]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeID",_c_usertypeid),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeName",_c_usertypename),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Chief",_chief),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [View_C_User] SET ID=@ID,UserName=@UserName,Name=@Name,Phone=@Phone,C_UserTypeID=@C_UserTypeID,C_UserTypeName=@C_UserTypeName,Province=@Province,City=@City,Area=@Area,Address=@Address,Chief=@Chief WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeID",_c_usertypeid),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeName",_c_usertypename),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Chief",_chief),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [View_C_User] SET ID=@ID,UserName=@UserName,Name=@Name,Phone=@Phone,C_UserTypeID=@C_UserTypeID,C_UserTypeName=@C_UserTypeName,Province=@Province,City=@City,Area=@Area,Address=@Address,Chief=@Chief WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeID",_c_usertypeid),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeName",_c_usertypename),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Chief",_chief),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static View_C_User GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,UserName,Name,Phone,C_UserTypeID,C_UserTypeName,Province,City,Area,Address,Chief FROM [View_C_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<View_C_User>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,UserName,Name,Phone,C_UserTypeID,C_UserTypeName,Province,City,Area,Address,Chief FROM [View_C_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [View_C_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [View_C_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<View_C_User> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,Name,Phone,C_UserTypeID,C_UserTypeName,Province,City,Area,Address,Chief,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [View_C_User] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<View_C_User>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<View_C_User> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,Name,Phone,C_UserTypeID,C_UserTypeName,Province,City,Area,Address,Chief FROM [View_C_User] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<View_C_User>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<View_C_User> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,UserName,Name,Phone,C_UserTypeID,C_UserTypeName,Province,City,Area,Address,Chief FROM [View_C_User]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<View_C_User>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSNotify 
    {
        #region Fields
        //public string str = "MsgType:2147483647|MsgCode:2147483647|Remark:2147483647|WxTmplID:2147483647|Subscriber:2147483647";
        private int _id;
        private string _msgtype = string.Empty;
        private string _msgcode = string.Empty;
        private string _remark = string.Empty;
        private string _wxtmplid = string.Empty;
        private string _subscriber = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 消息类别  唯一
        /// </summary>
        public string MsgType
        {
            get { return _msgtype; }
            set { _msgtype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 消息代号，唯一
        /// </summary>
        public string MsgCode
        {
            get { return _msgcode; }
            set { _msgcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 备注
        /// </summary>
        public string Remark
        {
            get { return _remark; }
            set { _remark = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 微信模板ID
        /// </summary>
        public string WxTmplID
        {
            get { return _wxtmplid; }
            set { _wxtmplid = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 订阅者  多个逗号隔开  如：,way,smile,
        /// </summary>
        public string Subscriber
        {
            get { return _subscriber; }
            set { _subscriber = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSNotify] (MsgType,MsgCode,Remark,WxTmplID,Subscriber) values (@MsgType,@MsgCode,@Remark,@WxTmplID,@Subscriber);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSNotify]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MsgType",_msgtype),
                new System.Data.SqlClient.SqlParameter("@MsgCode",_msgcode),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@WxTmplID",_wxtmplid),
                new System.Data.SqlClient.SqlParameter("@Subscriber",_subscriber),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSNotify] (MsgType,MsgCode,Remark,WxTmplID,Subscriber) values (@MsgType,@MsgCode,@Remark,@WxTmplID,@Subscriber);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSNotify]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MsgType",_msgtype),
                new System.Data.SqlClient.SqlParameter("@MsgCode",_msgcode),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@WxTmplID",_wxtmplid),
                new System.Data.SqlClient.SqlParameter("@Subscriber",_subscriber),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSNotify] SET MsgType=@MsgType,MsgCode=@MsgCode,Remark=@Remark,WxTmplID=@WxTmplID,Subscriber=@Subscriber WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MsgType",_msgtype),
                new System.Data.SqlClient.SqlParameter("@MsgCode",_msgcode),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@WxTmplID",_wxtmplid),
                new System.Data.SqlClient.SqlParameter("@Subscriber",_subscriber),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSNotify] SET MsgType=@MsgType,MsgCode=@MsgCode,Remark=@Remark,WxTmplID=@WxTmplID,Subscriber=@Subscriber WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MsgType",_msgtype),
                new System.Data.SqlClient.SqlParameter("@MsgCode",_msgcode),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@WxTmplID",_wxtmplid),
                new System.Data.SqlClient.SqlParameter("@Subscriber",_subscriber),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSNotify GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,MsgType,MsgCode,Remark,WxTmplID,Subscriber FROM [SYSNotify] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSNotify>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,MsgType,MsgCode,Remark,WxTmplID,Subscriber FROM [SYSNotify] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSNotify] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSNotify] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSNotify> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MsgType,MsgCode,Remark,WxTmplID,Subscriber,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSNotify] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSNotify>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSNotify> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MsgType,MsgCode,Remark,WxTmplID,Subscriber FROM [SYSNotify] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSNotify>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSNotify> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,MsgType,MsgCode,Remark,WxTmplID,Subscriber FROM [SYSNotify]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSNotify>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class View_OutScaleRecord 
    {
        #region Fields
        //public string str = "Shipper:50|ProductNumber:50|Name:50|OutOrderNo:50|ProductName:50|ProductImg:2147483647|Consignee:50";
        private int _qty;
        private string _shipper = string.Empty;
        private string _productnumber = string.Empty;
        private string _name = string.Empty;
        private int _createtime;
        private string _outorderno = string.Empty;
        private string _productname = string.Empty;
        private string _productimg = string.Empty;
        private string _consignee = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int Qty
        {
            get { return _qty; }
            set { _qty = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Shipper
        {
            get { return _shipper; }
            set { _shipper = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductNumber
        {
            get { return _productnumber; }
            set { _productnumber = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CreateTime
        {
            get { return _createtime; }
            set { _createtime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OutOrderNo
        {
            get { return _outorderno; }
            set { _outorderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductName
        {
            get { return _productname; }
            set { _productname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductImg
        {
            get { return _productimg; }
            set { _productimg = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Consignee
        {
            get { return _consignee; }
            set { _consignee = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [View_OutScaleRecord] (Qty,Shipper,ProductNumber,Name,CreateTime,OutOrderNo,ProductName,ProductImg,Consignee) values (@Qty,@Shipper,@ProductNumber,@Name,@CreateTime,@OutOrderNo,@ProductName,@ProductImg,@Consignee);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_OutScaleRecord]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@Qty",_qty),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@ProductImg",_productimg),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [View_OutScaleRecord] (Qty,Shipper,ProductNumber,Name,CreateTime,OutOrderNo,ProductName,ProductImg,Consignee) values (@Qty,@Shipper,@ProductNumber,@Name,@CreateTime,@OutOrderNo,@ProductName,@ProductImg,@Consignee);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_OutScaleRecord]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@Qty",_qty),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@ProductImg",_productimg),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<View_OutScaleRecord> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 Qty,Shipper,ProductNumber,Name,CreateTime,OutOrderNo,ProductName,ProductImg,Consignee FROM [View_OutScaleRecord]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<View_OutScaleRecord>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSMNotify 
    {
        #region Fields
        //public string str = "Title:2147483647|Url:2147483647|OperCreate:2147483647|OperEdit:2147483647";
        private int _id;
        private string _title = string.Empty;
        private string _url = string.Empty;
        private DateTime _datcreate = new DateTime(1900,1,1);
        private DateTime _datedit = new DateTime(1900,1,1);
        private string _opercreate = string.Empty;
        private string _operedit = string.Empty;
        private int _sort;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 标题
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 超链接
        /// </summary>
        public string Url
        {
            get { return _url; }
            set { _url = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public DateTime DatCreate
        {
            get { return _datcreate; }
            set { _datcreate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 修改时间
        /// </summary>
        public DateTime DatEdit
        {
            get { return _datedit; }
            set { _datedit = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 创建人
        /// </summary>
        public string OperCreate
        {
            get { return _opercreate; }
            set { _opercreate = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 修改人
        /// </summary>
        public string OperEdit
        {
            get { return _operedit; }
            set { _operedit = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 排序
        /// </summary>
        public int Sort
        {
            get { return _sort; }
            set { _sort = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSMNotify] (Title,Url,DatCreate,DatEdit,OperCreate,OperEdit,Sort) values (@Title,@Url,@DatCreate,@DatEdit,@OperCreate,@OperEdit,@Sort);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSMNotify]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@OperCreate",_opercreate),
                new System.Data.SqlClient.SqlParameter("@OperEdit",_operedit),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSMNotify] (Title,Url,DatCreate,DatEdit,OperCreate,OperEdit,Sort) values (@Title,@Url,@DatCreate,@DatEdit,@OperCreate,@OperEdit,@Sort);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSMNotify]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@OperCreate",_opercreate),
                new System.Data.SqlClient.SqlParameter("@OperEdit",_operedit),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSMNotify] SET Title=@Title,Url=@Url,DatCreate=@DatCreate,DatEdit=@DatEdit,OperCreate=@OperCreate,OperEdit=@OperEdit,Sort=@Sort WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@OperCreate",_opercreate),
                new System.Data.SqlClient.SqlParameter("@OperEdit",_operedit),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSMNotify] SET Title=@Title,Url=@Url,DatCreate=@DatCreate,DatEdit=@DatEdit,OperCreate=@OperCreate,OperEdit=@OperEdit,Sort=@Sort WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@OperCreate",_opercreate),
                new System.Data.SqlClient.SqlParameter("@OperEdit",_operedit),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSMNotify GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Title,Url,DatCreate,DatEdit,OperCreate,OperEdit,Sort FROM [SYSMNotify] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSMNotify>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Title,Url,DatCreate,DatEdit,OperCreate,OperEdit,Sort FROM [SYSMNotify] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSMNotify] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSMNotify] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSMNotify> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Title,Url,DatCreate,DatEdit,OperCreate,OperEdit,Sort,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSMNotify] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSMNotify>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSMNotify> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Title,Url,DatCreate,DatEdit,OperCreate,OperEdit,Sort FROM [SYSMNotify] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSMNotify>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSMNotify> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Title,Url,DatCreate,DatEdit,OperCreate,OperEdit,Sort FROM [SYSMNotify]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSMNotify>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class PDA 
    {
        #region Fields
        //public string str = "Keys:30|SN:30|Code:30|State:30|Address:30|Remark:50";
        private int _id;
        private string _keys = string.Empty;
        private string _sn = string.Empty;
        private string _code = string.Empty;
        private string _state = string.Empty;
        private string _address = string.Empty;
        private int _supplierid;
        private int _createtime;
        private string _remark = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Keys
        {
            get { return _keys; }
            set { _keys = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string SN
        {
            get { return _sn; }
            set { _sn = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Code
        {
            get { return _code; }
            set { _code = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string State
        {
            get { return _state; }
            set { _state = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int SupplierId
        {
            get { return _supplierid; }
            set { _supplierid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CreateTime
        {
            get { return _createtime; }
            set { _createtime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Remark
        {
            get { return _remark; }
            set { _remark = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [PDA] (Keys,SN,Code,State,Address,SupplierId,CreateTime,Remark) values (@Keys,@SN,@Code,@State,@Address,@SupplierId,@CreateTime,@Remark);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDA]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Keys",_keys),
                new System.Data.SqlClient.SqlParameter("@SN",_sn),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@SupplierId",_supplierid),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [PDA] (Keys,SN,Code,State,Address,SupplierId,CreateTime,Remark) values (@Keys,@SN,@Code,@State,@Address,@SupplierId,@CreateTime,@Remark);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDA]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Keys",_keys),
                new System.Data.SqlClient.SqlParameter("@SN",_sn),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@SupplierId",_supplierid),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [PDA] SET Keys=@Keys,SN=@SN,Code=@Code,State=@State,Address=@Address,SupplierId=@SupplierId,CreateTime=@CreateTime,Remark=@Remark WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Keys",_keys),
                new System.Data.SqlClient.SqlParameter("@SN",_sn),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@SupplierId",_supplierid),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [PDA] SET Keys=@Keys,SN=@SN,Code=@Code,State=@State,Address=@Address,SupplierId=@SupplierId,CreateTime=@CreateTime,Remark=@Remark WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Keys",_keys),
                new System.Data.SqlClient.SqlParameter("@SN",_sn),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@SupplierId",_supplierid),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static PDA GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Keys,SN,Code,State,Address,SupplierId,CreateTime,Remark FROM [PDA] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<PDA>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Keys,SN,Code,State,Address,SupplierId,CreateTime,Remark FROM [PDA] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [PDA] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [PDA] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDA> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Keys,SN,Code,State,Address,SupplierId,CreateTime,Remark,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [PDA] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDA>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDA> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Keys,SN,Code,State,Address,SupplierId,CreateTime,Remark FROM [PDA] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDA>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<PDA> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Keys,SN,Code,State,Address,SupplierId,CreateTime,Remark FROM [PDA]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<PDA>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSIntegralCodeArea 
    {
        #region Fields
        //public string str = "AreaName:2147483647";
        private int _id;
        private int _activityid;
        private string _areaname = string.Empty;
        private int _cnt;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ActivityID
        {
            get { return _activityid; }
            set { _activityid = value; }
        }

        /// <summary>
        /// 区域名称
        /// </summary>
        public string AreaName
        {
            get { return _areaname; }
            set { _areaname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int cnt
        {
            get { return _cnt; }
            set { _cnt = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSIntegralCodeArea] (ActivityID,AreaName,cnt) values (@ActivityID,@AreaName,@cnt);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSIntegralCodeArea]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaName",_areaname),
                new System.Data.SqlClient.SqlParameter("@cnt",_cnt),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSIntegralCodeArea] (ActivityID,AreaName,cnt) values (@ActivityID,@AreaName,@cnt);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSIntegralCodeArea]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaName",_areaname),
                new System.Data.SqlClient.SqlParameter("@cnt",_cnt),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSIntegralCodeArea] SET ActivityID=@ActivityID,AreaName=@AreaName,cnt=@cnt WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaName",_areaname),
                new System.Data.SqlClient.SqlParameter("@cnt",_cnt),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSIntegralCodeArea] SET ActivityID=@ActivityID,AreaName=@AreaName,cnt=@cnt WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaName",_areaname),
                new System.Data.SqlClient.SqlParameter("@cnt",_cnt),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSIntegralCodeArea GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaName,cnt FROM [SYSIntegralCodeArea] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSIntegralCodeArea>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaName,cnt FROM [SYSIntegralCodeArea] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSIntegralCodeArea] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSIntegralCodeArea] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSIntegralCodeArea> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaName,cnt,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSIntegralCodeArea] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSIntegralCodeArea>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSIntegralCodeArea> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaName,cnt FROM [SYSIntegralCodeArea] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSIntegralCodeArea>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSIntegralCodeArea> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ActivityID,AreaName,cnt FROM [SYSIntegralCodeArea]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSIntegralCodeArea>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<SYSIntegralCodeArea> GetEntitysByActivityID(int activityid)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaName,cnt FROM [SYSIntegralCodeArea] WHERE ActivityID=@ActivityID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ActivityID",activityid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSIntegralCodeArea>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class View_RtnStockRecord 
    {
        #region Fields
        //public string str = "Shipper:50|OrderNo:50|Name:50|ProductName:50|ProductImg:2147483647|ProductNumber:50|Consignee:50";
        private int _qty;
        private string _shipper = string.Empty;
        private string _orderno = string.Empty;
        private string _name = string.Empty;
        private int _returntime;
        private string _productname = string.Empty;
        private string _productimg = string.Empty;
        private string _productnumber = string.Empty;
        private string _consignee = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int Qty
        {
            get { return _qty; }
            set { _qty = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Shipper
        {
            get { return _shipper; }
            set { _shipper = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ReturnTime
        {
            get { return _returntime; }
            set { _returntime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductName
        {
            get { return _productname; }
            set { _productname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductImg
        {
            get { return _productimg; }
            set { _productimg = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductNumber
        {
            get { return _productnumber; }
            set { _productnumber = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Consignee
        {
            get { return _consignee; }
            set { _consignee = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [View_RtnStockRecord] (Qty,Shipper,OrderNo,Name,ReturnTime,ProductName,ProductImg,ProductNumber,Consignee) values (@Qty,@Shipper,@OrderNo,@Name,@ReturnTime,@ProductName,@ProductImg,@ProductNumber,@Consignee);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_RtnStockRecord]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@Qty",_qty),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@ReturnTime",_returntime),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@ProductImg",_productimg),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [View_RtnStockRecord] (Qty,Shipper,OrderNo,Name,ReturnTime,ProductName,ProductImg,ProductNumber,Consignee) values (@Qty,@Shipper,@OrderNo,@Name,@ReturnTime,@ProductName,@ProductImg,@ProductNumber,@Consignee);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_RtnStockRecord]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@Qty",_qty),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@ReturnTime",_returntime),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@ProductImg",_productimg),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<View_RtnStockRecord> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 Qty,Shipper,OrderNo,Name,ReturnTime,ProductName,ProductImg,ProductNumber,Consignee FROM [View_RtnStockRecord]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<View_RtnStockRecord>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class ScaleState 
    {
        #region Fields
        //public string str = "StateName:50";
        private int _id;
        private string _statename = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string StateName
        {
            get { return _statename; }
            set { _statename = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [ScaleState] (ID,StateName) values (@ID,@StateName);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleState]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@StateName",_statename),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [ScaleState] (ID,StateName) values (@ID,@StateName);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleState]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@StateName",_statename),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [ScaleState] SET ID=@ID,StateName=@StateName WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@StateName",_statename),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [ScaleState] SET ID=@ID,StateName=@StateName WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@StateName",_statename),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static ScaleState GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,StateName FROM [ScaleState] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<ScaleState>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,StateName FROM [ScaleState] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [ScaleState] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [ScaleState] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<ScaleState> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,StateName,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [ScaleState] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleState>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<ScaleState> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,StateName FROM [ScaleState] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleState>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<ScaleState> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,StateName FROM [ScaleState]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleState>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSMArticleImg 
    {
        #region Fields
        //public string str = "ImgUrl:2147483647|UserName:2147483647";
        private int _id;
        private string _imgurl = string.Empty;
        private int _articleid;
        private string _username = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 图片路径
        /// </summary>
        public string ImgUrl
        {
            get { return _imgurl; }
            set { _imgurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 文章编号
        /// </summary>
        public int ArticleID
        {
            get { return _articleid; }
            set { _articleid = value; }
        }

        /// <summary>
        /// 上传用户编号
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 上传时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSMArticleImg] (ImgUrl,ArticleID,UserName,Dat) values (@ImgUrl,@ArticleID,@UserName,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSMArticleImg]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@ArticleID",_articleid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSMArticleImg] (ImgUrl,ArticleID,UserName,Dat) values (@ImgUrl,@ArticleID,@UserName,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSMArticleImg]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@ArticleID",_articleid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSMArticleImg] SET ImgUrl=@ImgUrl,ArticleID=@ArticleID,UserName=@UserName,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@ArticleID",_articleid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSMArticleImg] SET ImgUrl=@ImgUrl,ArticleID=@ArticleID,UserName=@UserName,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@ArticleID",_articleid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSMArticleImg GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ImgUrl,ArticleID,UserName,Dat FROM [SYSMArticleImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSMArticleImg>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ImgUrl,ArticleID,UserName,Dat FROM [SYSMArticleImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSMArticleImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSMArticleImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSMArticleImg> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ImgUrl,ArticleID,UserName,Dat,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSMArticleImg] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSMArticleImg>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSMArticleImg> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ImgUrl,ArticleID,UserName,Dat FROM [SYSMArticleImg] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSMArticleImg>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSMArticleImg> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ImgUrl,ArticleID,UserName,Dat FROM [SYSMArticleImg]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSMArticleImg>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<SYSMArticleImg> GetEntitysByArticleID(int articleid)
    	{
    		string strSql = "SELECT ID,ImgUrl,ArticleID,UserName,Dat FROM [SYSMArticleImg] WHERE ArticleID=@ArticleID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ArticleID",articleid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSMArticleImg>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSMArticle 
    {
        #region Fields
        //public string str = "Title:2147483647|Img:2147483647|Content:2147483647|Tmp:2147483647";
        private int _id;
        private string _title = string.Empty;
        private string _img = string.Empty;
        private string _content = string.Empty;
        private string _tmp = string.Empty;
        private DateTime _datcreate = new DateTime(1900,1,1);
        private DateTime _datedit = new DateTime(1900,1,1);
        private int _sort;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 文章标题
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 封面图
        /// </summary>
        public string Img
        {
            get { return _img; }
            set { _img = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 文章内容
        /// </summary>
        public string Content
        {
            get { return _content; }
            set { _content = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 草稿箱
        /// </summary>
        public string Tmp
        {
            get { return _tmp; }
            set { _tmp = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public DateTime DatCreate
        {
            get { return _datcreate; }
            set { _datcreate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 更新时间
        /// </summary>
        public DateTime DatEdit
        {
            get { return _datedit; }
            set { _datedit = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Sort
        {
            get { return _sort; }
            set { _sort = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSMArticle] (Title,Img,Content,Tmp,DatCreate,DatEdit,Sort) values (@Title,@Img,@Content,@Tmp,@DatCreate,@DatEdit,@Sort);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSMArticle]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Img",_img),
                new System.Data.SqlClient.SqlParameter("@Content",_content),
                new System.Data.SqlClient.SqlParameter("@Tmp",_tmp),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSMArticle] (Title,Img,Content,Tmp,DatCreate,DatEdit,Sort) values (@Title,@Img,@Content,@Tmp,@DatCreate,@DatEdit,@Sort);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSMArticle]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Img",_img),
                new System.Data.SqlClient.SqlParameter("@Content",_content),
                new System.Data.SqlClient.SqlParameter("@Tmp",_tmp),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSMArticle] SET Title=@Title,Img=@Img,Content=@Content,Tmp=@Tmp,DatCreate=@DatCreate,DatEdit=@DatEdit,Sort=@Sort WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Img",_img),
                new System.Data.SqlClient.SqlParameter("@Content",_content),
                new System.Data.SqlClient.SqlParameter("@Tmp",_tmp),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSMArticle] SET Title=@Title,Img=@Img,Content=@Content,Tmp=@Tmp,DatCreate=@DatCreate,DatEdit=@DatEdit,Sort=@Sort WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Img",_img),
                new System.Data.SqlClient.SqlParameter("@Content",_content),
                new System.Data.SqlClient.SqlParameter("@Tmp",_tmp),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSMArticle GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Title,Img,Content,Tmp,DatCreate,DatEdit,Sort FROM [SYSMArticle] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSMArticle>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Title,Img,Content,Tmp,DatCreate,DatEdit,Sort FROM [SYSMArticle] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSMArticle] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSMArticle] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSMArticle> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Title,Img,Content,Tmp,DatCreate,DatEdit,Sort,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSMArticle] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSMArticle>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSMArticle> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Title,Img,Content,Tmp,DatCreate,DatEdit,Sort FROM [SYSMArticle] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSMArticle>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSMArticle> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Title,Img,Content,Tmp,DatCreate,DatEdit,Sort FROM [SYSMArticle]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSMArticle>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class BaseMain 
    {
        #region Fields
        //public string str = "MainID:50|ShowName:50";
        private int _id;
        private string _mainid = string.Empty;
        private string _showname = string.Empty;
        private int _sort;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string MainID
        {
            get { return _mainid; }
            set { _mainid = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ShowName
        {
            get { return _showname; }
            set { _showname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Sort
        {
            get { return _sort; }
            set { _sort = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [BaseMain] (MainID,ShowName,Sort) values (@MainID,@ShowName,@Sort);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [BaseMain]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [BaseMain] (MainID,ShowName,Sort) values (@MainID,@ShowName,@Sort);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [BaseMain]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [BaseMain] SET MainID=@MainID,ShowName=@ShowName,Sort=@Sort WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [BaseMain] SET MainID=@MainID,ShowName=@ShowName,Sort=@Sort WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static BaseMain GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,MainID,ShowName,Sort FROM [BaseMain] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<BaseMain>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,MainID,ShowName,Sort FROM [BaseMain] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [BaseMain] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [BaseMain] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<BaseMain> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MainID,ShowName,Sort,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [BaseMain] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<BaseMain>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<BaseMain> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MainID,ShowName,Sort FROM [BaseMain] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<BaseMain>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<BaseMain> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,MainID,ShowName,Sort FROM [BaseMain]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<BaseMain>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<BaseMain> GetEntitysByMainID(int mainid)
    	{
    		string strSql = "SELECT ID,MainID,ShowName,Sort FROM [BaseMain] WHERE MainID=@MainID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@MainID",mainid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<BaseMain>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSLog 
    {
        #region Fields
        //public string str = "Oper:2147483647|Logs:2147483647|Url:2147483647|Type:2147483647|FromAPP:2147483647";
        private int _id;
        private string _oper = string.Empty;
        private string _logs = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        private string _url = string.Empty;
        private string _type = string.Empty;
        private string _fromapp = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 操作人
        /// </summary>
        public string Oper
        {
            get { return _oper; }
            set { _oper = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 日志
        /// </summary>
        public string Logs
        {
            get { return _logs; }
            set { _logs = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 操作时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 操作路径
        /// </summary>
        public string Url
        {
            get { return _url; }
            set { _url = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 日志类型
        /// </summary>
        public string Type
        {
            get { return _type; }
            set { _type = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 来自应用   手机客户端/电脑端后台
        /// </summary>
        public string FromAPP
        {
            get { return _fromapp; }
            set { _fromapp = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSLog] (Oper,Logs,Dat,Url,Type,FromAPP) values (@Oper,@Logs,@Dat,@Url,@Type,@FromAPP);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSLog]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@FromAPP",_fromapp),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSLog] (Oper,Logs,Dat,Url,Type,FromAPP) values (@Oper,@Logs,@Dat,@Url,@Type,@FromAPP);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSLog]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@FromAPP",_fromapp),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSLog] SET Oper=@Oper,Logs=@Logs,Dat=@Dat,Url=@Url,Type=@Type,FromAPP=@FromAPP WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@FromAPP",_fromapp),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSLog] SET Oper=@Oper,Logs=@Logs,Dat=@Dat,Url=@Url,Type=@Type,FromAPP=@FromAPP WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@FromAPP",_fromapp),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSLog GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Oper,Logs,Dat,Url,Type,FromAPP FROM [SYSLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSLog>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Oper,Logs,Dat,Url,Type,FromAPP FROM [SYSLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSLog> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Oper,Logs,Dat,Url,Type,FromAPP,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSLog] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSLog>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSLog> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Oper,Logs,Dat,Url,Type,FromAPP FROM [SYSLog] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSLog>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSLog> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Oper,Logs,Dat,Url,Type,FromAPP FROM [SYSLog]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSLog>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class B_UserDesktopAuth 
    {
        #region Fields
        //public string str = "UserName:50|ShowName:50";
        private int _id;
        private int _mainid;
        private int _roleid;
        private string _username = string.Empty;
        private string _showname = string.Empty;
        private int _sort;
        private bool _isshow;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MainID
        {
            get { return _mainid; }
            set { _mainid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int RoleID
        {
            get { return _roleid; }
            set { _roleid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ShowName
        {
            get { return _showname; }
            set { _showname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Sort
        {
            get { return _sort; }
            set { _sort = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsShow
        {
            get { return _isshow; }
            set { _isshow = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [B_UserDesktopAuth] (MainID,RoleID,UserName,ShowName,Sort,IsShow) values (@MainID,@RoleID,@UserName,@ShowName,@Sort,@IsShow);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_UserDesktopAuth]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [B_UserDesktopAuth] (MainID,RoleID,UserName,ShowName,Sort,IsShow) values (@MainID,@RoleID,@UserName,@ShowName,@Sort,@IsShow);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_UserDesktopAuth]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [B_UserDesktopAuth] SET MainID=@MainID,RoleID=@RoleID,UserName=@UserName,ShowName=@ShowName,Sort=@Sort,IsShow=@IsShow WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [B_UserDesktopAuth] SET MainID=@MainID,RoleID=@RoleID,UserName=@UserName,ShowName=@ShowName,Sort=@Sort,IsShow=@IsShow WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ShowName",_showname),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static B_UserDesktopAuth GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,MainID,RoleID,UserName,ShowName,Sort,IsShow FROM [B_UserDesktopAuth] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<B_UserDesktopAuth>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,MainID,RoleID,UserName,ShowName,Sort,IsShow FROM [B_UserDesktopAuth] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [B_UserDesktopAuth] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [B_UserDesktopAuth] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_UserDesktopAuth> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MainID,RoleID,UserName,ShowName,Sort,IsShow,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [B_UserDesktopAuth] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_UserDesktopAuth>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_UserDesktopAuth> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MainID,RoleID,UserName,ShowName,Sort,IsShow FROM [B_UserDesktopAuth] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_UserDesktopAuth>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<B_UserDesktopAuth> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,MainID,RoleID,UserName,ShowName,Sort,IsShow FROM [B_UserDesktopAuth]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<B_UserDesktopAuth>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<B_UserDesktopAuth> GetEntitysByMainID(int mainid)
    	{
    		string strSql = "SELECT ID,MainID,RoleID,UserName,ShowName,Sort,IsShow FROM [B_UserDesktopAuth] WHERE MainID=@MainID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@MainID",mainid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<B_UserDesktopAuth>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<B_UserDesktopAuth> GetEntitysByRoleID(int roleid)
    	{
    		string strSql = "SELECT ID,MainID,RoleID,UserName,ShowName,Sort,IsShow FROM [B_UserDesktopAuth] WHERE RoleID=@RoleID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@RoleID",roleid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<B_UserDesktopAuth>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSICodeIntegralSet 
    {
        #region Fields
        //public string str = "CodePrefix:50";
        private int _id;
        private string _codeprefix = string.Empty;
        private int _integralcnt;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 积分码前缀
        /// </summary>
        public string CodePrefix
        {
            get { return _codeprefix; }
            set { _codeprefix = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 积分值
        /// </summary>
        public int IntegralCnt
        {
            get { return _integralcnt; }
            set { _integralcnt = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSICodeIntegralSet] (CodePrefix,IntegralCnt) values (@CodePrefix,@IntegralCnt);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSICodeIntegralSet]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@CodePrefix",_codeprefix),
                new System.Data.SqlClient.SqlParameter("@IntegralCnt",_integralcnt),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSICodeIntegralSet] (CodePrefix,IntegralCnt) values (@CodePrefix,@IntegralCnt);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSICodeIntegralSet]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@CodePrefix",_codeprefix),
                new System.Data.SqlClient.SqlParameter("@IntegralCnt",_integralcnt),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSICodeIntegralSet] SET CodePrefix=@CodePrefix,IntegralCnt=@IntegralCnt WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@CodePrefix",_codeprefix),
                new System.Data.SqlClient.SqlParameter("@IntegralCnt",_integralcnt),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSICodeIntegralSet] SET CodePrefix=@CodePrefix,IntegralCnt=@IntegralCnt WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@CodePrefix",_codeprefix),
                new System.Data.SqlClient.SqlParameter("@IntegralCnt",_integralcnt),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSICodeIntegralSet GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,CodePrefix,IntegralCnt FROM [SYSICodeIntegralSet] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSICodeIntegralSet>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,CodePrefix,IntegralCnt FROM [SYSICodeIntegralSet] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSICodeIntegralSet] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSICodeIntegralSet] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSICodeIntegralSet> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,CodePrefix,IntegralCnt,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSICodeIntegralSet] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSICodeIntegralSet>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSICodeIntegralSet> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,CodePrefix,IntegralCnt FROM [SYSICodeIntegralSet] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSICodeIntegralSet>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSICodeIntegralSet> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,CodePrefix,IntegralCnt FROM [SYSICodeIntegralSet]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSICodeIntegralSet>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSExceptionCode 
    {
        #region Fields
        //public string str = "ExType:500|ExURL:500|Message:5000|ExContent:5000|Oper:50";
        private int _id;
        private string _extype = string.Empty;
        private string _exurl = string.Empty;
        private string _message = string.Empty;
        private string _excontent = string.Empty;
        private string _oper = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 一场类型
        /// </summary>
        public string ExType
        {
            get { return _extype; }
            set { _extype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 异常Url
        /// </summary>
        public string ExURL
        {
            get { return _exurl; }
            set { _exurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 异常信息
        /// </summary>
        public string Message
        {
            get { return _message; }
            set { _message = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 5000); }
        }

        /// <summary>
        /// 异常内容
        /// </summary>
        public string ExContent
        {
            get { return _excontent; }
            set { _excontent = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 5000); }
        }

        /// <summary>
        /// 操作人
        /// </summary>
        public string Oper
        {
            get { return _oper; }
            set { _oper = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSExceptionCode] (ExType,ExURL,Message,ExContent,Oper,Dat) values (@ExType,@ExURL,@Message,@ExContent,@Oper,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSExceptionCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ExType",_extype),
                new System.Data.SqlClient.SqlParameter("@ExURL",_exurl),
                new System.Data.SqlClient.SqlParameter("@Message",_message),
                new System.Data.SqlClient.SqlParameter("@ExContent",_excontent),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSExceptionCode] (ExType,ExURL,Message,ExContent,Oper,Dat) values (@ExType,@ExURL,@Message,@ExContent,@Oper,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSExceptionCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ExType",_extype),
                new System.Data.SqlClient.SqlParameter("@ExURL",_exurl),
                new System.Data.SqlClient.SqlParameter("@Message",_message),
                new System.Data.SqlClient.SqlParameter("@ExContent",_excontent),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSExceptionCode] SET ExType=@ExType,ExURL=@ExURL,Message=@Message,ExContent=@ExContent,Oper=@Oper,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ExType",_extype),
                new System.Data.SqlClient.SqlParameter("@ExURL",_exurl),
                new System.Data.SqlClient.SqlParameter("@Message",_message),
                new System.Data.SqlClient.SqlParameter("@ExContent",_excontent),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSExceptionCode] SET ExType=@ExType,ExURL=@ExURL,Message=@Message,ExContent=@ExContent,Oper=@Oper,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ExType",_extype),
                new System.Data.SqlClient.SqlParameter("@ExURL",_exurl),
                new System.Data.SqlClient.SqlParameter("@Message",_message),
                new System.Data.SqlClient.SqlParameter("@ExContent",_excontent),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSExceptionCode GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ExType,ExURL,Message,ExContent,Oper,Dat FROM [SYSExceptionCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSExceptionCode>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ExType,ExURL,Message,ExContent,Oper,Dat FROM [SYSExceptionCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSExceptionCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSExceptionCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSExceptionCode> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ExType,ExURL,Message,ExContent,Oper,Dat,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSExceptionCode] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSExceptionCode>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSExceptionCode> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ExType,ExURL,Message,ExContent,Oper,Dat FROM [SYSExceptionCode] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSExceptionCode>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSExceptionCode> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ExType,ExURL,Message,ExContent,Oper,Dat FROM [SYSExceptionCode]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSExceptionCode>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class B_RolesDesktopAuth 
    {
        #region Fields
        //public string str = "";
        private int _id;
        private int _roleid;
        private int _mainid;
        private int _updatetime;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int RoleID
        {
            get { return _roleid; }
            set { _roleid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MainID
        {
            get { return _mainid; }
            set { _mainid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int UpdateTime
        {
            get { return _updatetime; }
            set { _updatetime = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [B_RolesDesktopAuth] (RoleID,MainID,UpdateTime) values (@RoleID,@MainID,@UpdateTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_RolesDesktopAuth]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [B_RolesDesktopAuth] (RoleID,MainID,UpdateTime) values (@RoleID,@MainID,@UpdateTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_RolesDesktopAuth]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [B_RolesDesktopAuth] SET RoleID=@RoleID,MainID=@MainID,UpdateTime=@UpdateTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [B_RolesDesktopAuth] SET RoleID=@RoleID,MainID=@MainID,UpdateTime=@UpdateTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@MainID",_mainid),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static B_RolesDesktopAuth GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,RoleID,MainID,UpdateTime FROM [B_RolesDesktopAuth] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<B_RolesDesktopAuth>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,RoleID,MainID,UpdateTime FROM [B_RolesDesktopAuth] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [B_RolesDesktopAuth] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [B_RolesDesktopAuth] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_RolesDesktopAuth> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,RoleID,MainID,UpdateTime,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [B_RolesDesktopAuth] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_RolesDesktopAuth>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_RolesDesktopAuth> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,RoleID,MainID,UpdateTime FROM [B_RolesDesktopAuth] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_RolesDesktopAuth>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<B_RolesDesktopAuth> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,RoleID,MainID,UpdateTime FROM [B_RolesDesktopAuth]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<B_RolesDesktopAuth>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<B_RolesDesktopAuth> GetEntitysByRoleID(int roleid)
    	{
    		string strSql = "SELECT ID,RoleID,MainID,UpdateTime FROM [B_RolesDesktopAuth] WHERE RoleID=@RoleID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@RoleID",roleid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<B_RolesDesktopAuth>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<B_RolesDesktopAuth> GetEntitysByMainID(int mainid)
    	{
    		string strSql = "SELECT ID,RoleID,MainID,UpdateTime FROM [B_RolesDesktopAuth] WHERE MainID=@MainID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@MainID",mainid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<B_RolesDesktopAuth>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class RedPackShare 
    {
        #region Fields
        //public string str = "Code:50|UserName:50|RedTicket:200";
        private int _id;
        private string _code = string.Empty;
        private int _redcnt;
        private int _receivecnt;
        private string _username = string.Empty;
        private string _redticket = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Code
        {
            get { return _code; }
            set { _code = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int RedCnt
        {
            get { return _redcnt; }
            set { _redcnt = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ReceiveCnt
        {
            get { return _receivecnt; }
            set { _receivecnt = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string RedTicket
        {
            get { return _redticket; }
            set { _redticket = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [RedPackShare] (Code,RedCnt,ReceiveCnt,UserName,RedTicket) values (@Code,@RedCnt,@ReceiveCnt,@UserName,@RedTicket);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [RedPackShare]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@RedCnt",_redcnt),
                new System.Data.SqlClient.SqlParameter("@ReceiveCnt",_receivecnt),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@RedTicket",_redticket),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [RedPackShare] (Code,RedCnt,ReceiveCnt,UserName,RedTicket) values (@Code,@RedCnt,@ReceiveCnt,@UserName,@RedTicket);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [RedPackShare]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@RedCnt",_redcnt),
                new System.Data.SqlClient.SqlParameter("@ReceiveCnt",_receivecnt),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@RedTicket",_redticket),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [RedPackShare] SET Code=@Code,RedCnt=@RedCnt,ReceiveCnt=@ReceiveCnt,UserName=@UserName,RedTicket=@RedTicket WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@RedCnt",_redcnt),
                new System.Data.SqlClient.SqlParameter("@ReceiveCnt",_receivecnt),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@RedTicket",_redticket),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [RedPackShare] SET Code=@Code,RedCnt=@RedCnt,ReceiveCnt=@ReceiveCnt,UserName=@UserName,RedTicket=@RedTicket WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@RedCnt",_redcnt),
                new System.Data.SqlClient.SqlParameter("@ReceiveCnt",_receivecnt),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@RedTicket",_redticket),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static RedPackShare GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Code,RedCnt,ReceiveCnt,UserName,RedTicket FROM [RedPackShare] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<RedPackShare>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Code,RedCnt,ReceiveCnt,UserName,RedTicket FROM [RedPackShare] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [RedPackShare] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [RedPackShare] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<RedPackShare> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Code,RedCnt,ReceiveCnt,UserName,RedTicket,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [RedPackShare] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackShare>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<RedPackShare> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Code,RedCnt,ReceiveCnt,UserName,RedTicket FROM [RedPackShare] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackShare>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<RedPackShare> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Code,RedCnt,ReceiveCnt,UserName,RedTicket FROM [RedPackShare]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackShare>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSCompanyProfile 
    {
        #region Fields
        //public string str = "Title:2147483647|Contxt:2147483647|Tmp:2147483647";
        private int _id;
        private string _title = string.Empty;
        private string _contxt = string.Empty;
        private string _tmp = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 标题
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 简介内容
        /// </summary>
        public string Contxt
        {
            get { return _contxt; }
            set { _contxt = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 草稿箱
        /// </summary>
        public string Tmp
        {
            get { return _tmp; }
            set { _tmp = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSCompanyProfile] (Title,Contxt,Tmp) values (@Title,@Contxt,@Tmp);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSCompanyProfile]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Contxt",_contxt),
                new System.Data.SqlClient.SqlParameter("@Tmp",_tmp),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSCompanyProfile] (Title,Contxt,Tmp) values (@Title,@Contxt,@Tmp);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSCompanyProfile]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Contxt",_contxt),
                new System.Data.SqlClient.SqlParameter("@Tmp",_tmp),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSCompanyProfile] SET Title=@Title,Contxt=@Contxt,Tmp=@Tmp WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Contxt",_contxt),
                new System.Data.SqlClient.SqlParameter("@Tmp",_tmp),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSCompanyProfile] SET Title=@Title,Contxt=@Contxt,Tmp=@Tmp WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@Contxt",_contxt),
                new System.Data.SqlClient.SqlParameter("@Tmp",_tmp),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSCompanyProfile GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Title,Contxt,Tmp FROM [SYSCompanyProfile] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSCompanyProfile>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Title,Contxt,Tmp FROM [SYSCompanyProfile] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSCompanyProfile] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSCompanyProfile] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSCompanyProfile> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Title,Contxt,Tmp,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSCompanyProfile] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSCompanyProfile>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSCompanyProfile> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Title,Contxt,Tmp FROM [SYSCompanyProfile] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSCompanyProfile>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSCompanyProfile> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Title,Contxt,Tmp FROM [SYSCompanyProfile]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSCompanyProfile>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class RedPackLottery 
    {
        #region Fields
        //public string str = "Code:50|UserName:50";
        private int _id;
        private string _code = string.Empty;
        private string _username = string.Empty;
        private DateTime _addtime = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Code
        {
            get { return _code; }
            set { _code = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime Addtime
        {
            get { return _addtime; }
            set { _addtime = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [RedPackLottery] (Code,UserName,Addtime) values (@Code,@UserName,@Addtime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [RedPackLottery]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Addtime",_addtime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [RedPackLottery] (Code,UserName,Addtime) values (@Code,@UserName,@Addtime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [RedPackLottery]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Addtime",_addtime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [RedPackLottery] SET Code=@Code,UserName=@UserName,Addtime=@Addtime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Addtime",_addtime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [RedPackLottery] SET Code=@Code,UserName=@UserName,Addtime=@Addtime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Addtime",_addtime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static RedPackLottery GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Code,UserName,Addtime FROM [RedPackLottery] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<RedPackLottery>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Code,UserName,Addtime FROM [RedPackLottery] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [RedPackLottery] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [RedPackLottery] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<RedPackLottery> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Code,UserName,Addtime,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [RedPackLottery] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackLottery>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<RedPackLottery> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Code,UserName,Addtime FROM [RedPackLottery] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackLottery>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<RedPackLottery> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Code,UserName,Addtime FROM [RedPackLottery]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackLottery>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSCompanyImgs 
    {
        #region Fields
        //public string str = "ImgUrl:2147483647|UserName:2147483647|Type:50";
        private int _id;
        private string _imgurl = string.Empty;
        private string _username = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        private string _type = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ImgUrl
        {
            get { return _imgurl; }
            set { _imgurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 图片类型
        /// </summary>
        public string Type
        {
            get { return _type; }
            set { _type = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSCompanyImgs] (ImgUrl,UserName,Dat,Type) values (@ImgUrl,@UserName,@Dat,@Type);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSCompanyImgs]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSCompanyImgs] (ImgUrl,UserName,Dat,Type) values (@ImgUrl,@UserName,@Dat,@Type);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSCompanyImgs]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSCompanyImgs] SET ImgUrl=@ImgUrl,UserName=@UserName,Dat=@Dat,Type=@Type WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSCompanyImgs] SET ImgUrl=@ImgUrl,UserName=@UserName,Dat=@Dat,Type=@Type WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSCompanyImgs GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ImgUrl,UserName,Dat,Type FROM [SYSCompanyImgs] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSCompanyImgs>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ImgUrl,UserName,Dat,Type FROM [SYSCompanyImgs] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSCompanyImgs] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSCompanyImgs] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSCompanyImgs> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ImgUrl,UserName,Dat,Type,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSCompanyImgs] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSCompanyImgs>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSCompanyImgs> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ImgUrl,UserName,Dat,Type FROM [SYSCompanyImgs] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSCompanyImgs>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSCompanyImgs> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ImgUrl,UserName,Dat,Type FROM [SYSCompanyImgs]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSCompanyImgs>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class LotteryActivitys 
    {
        #region Fields
        //public string str = "Title:50|Explain:100|FailType:100|FailMsg:100";
        private int _id;
        private string _title = string.Empty;
        private DateTime _datb = new DateTime(1900,1,1);
        private DateTime _date = new DateTime(1900,1,1);
        private bool _istimelimit;
        private bool _isvalid;
        private bool _isactive;
        private string _explain = string.Empty;
        private string _failtype = string.Empty;
        private string _failmsg = string.Empty;
        private int _failprizeid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 活动名称
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 活动开始时间
        /// </summary>
        public DateTime DatB
        {
            get { return _datb; }
            set { _datb = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 活动结束时间
        /// </summary>
        public DateTime DatE
        {
            get { return _date; }
            set { _date = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 是否限时
        /// </summary>
        public bool IsTimeLimit
        {
            get { return _istimelimit; }
            set { _istimelimit = value; }
        }

        /// <summary>
        /// 是否有效
        /// </summary>
        public bool IsValid
        {
            get { return _isvalid; }
            set { _isvalid = value; }
        }

        /// <summary>
        /// 是否启用
        /// </summary>
        public bool IsActive
        {
            get { return _isactive; }
            set { _isactive = value; }
        }

        /// <summary>
        /// 活动说明
        /// </summary>
        public string Explain
        {
            get { return _explain; }
            set { _explain = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 100); }
        }

        /// <summary>
        /// 按概率没抽到时的处理类型（msg：提示文字/prize：获得奖品）
        /// </summary>
        public string FailType
        {
            get { return _failtype; }
            set { _failtype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 100); }
        }

        /// <summary>
        /// FailType为msg时提示消息
        /// </summary>
        public string FailMsg
        {
            get { return _failmsg; }
            set { _failmsg = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 100); }
        }

        /// <summary>
        /// FailType为prize时获得的奖品ID
        /// </summary>
        public int FailPrizeID
        {
            get { return _failprizeid; }
            set { _failprizeid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [LotteryActivitys] (Title,DatB,DatE,IsTimeLimit,IsValid,IsActive,Explain,FailType,FailMsg,FailPrizeID) values (@Title,@DatB,@DatE,@IsTimeLimit,@IsValid,@IsActive,@Explain,@FailType,@FailMsg,@FailPrizeID);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryActivitys]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@DatB",_datb),
                new System.Data.SqlClient.SqlParameter("@DatE",_date),
                new System.Data.SqlClient.SqlParameter("@IsTimeLimit",_istimelimit),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsActive",_isactive),
                new System.Data.SqlClient.SqlParameter("@Explain",_explain),
                new System.Data.SqlClient.SqlParameter("@FailType",_failtype),
                new System.Data.SqlClient.SqlParameter("@FailMsg",_failmsg),
                new System.Data.SqlClient.SqlParameter("@FailPrizeID",_failprizeid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [LotteryActivitys] (Title,DatB,DatE,IsTimeLimit,IsValid,IsActive,Explain,FailType,FailMsg,FailPrizeID) values (@Title,@DatB,@DatE,@IsTimeLimit,@IsValid,@IsActive,@Explain,@FailType,@FailMsg,@FailPrizeID);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryActivitys]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@DatB",_datb),
                new System.Data.SqlClient.SqlParameter("@DatE",_date),
                new System.Data.SqlClient.SqlParameter("@IsTimeLimit",_istimelimit),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsActive",_isactive),
                new System.Data.SqlClient.SqlParameter("@Explain",_explain),
                new System.Data.SqlClient.SqlParameter("@FailType",_failtype),
                new System.Data.SqlClient.SqlParameter("@FailMsg",_failmsg),
                new System.Data.SqlClient.SqlParameter("@FailPrizeID",_failprizeid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [LotteryActivitys] SET Title=@Title,DatB=@DatB,DatE=@DatE,IsTimeLimit=@IsTimeLimit,IsValid=@IsValid,IsActive=@IsActive,Explain=@Explain,FailType=@FailType,FailMsg=@FailMsg,FailPrizeID=@FailPrizeID WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@DatB",_datb),
                new System.Data.SqlClient.SqlParameter("@DatE",_date),
                new System.Data.SqlClient.SqlParameter("@IsTimeLimit",_istimelimit),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsActive",_isactive),
                new System.Data.SqlClient.SqlParameter("@Explain",_explain),
                new System.Data.SqlClient.SqlParameter("@FailType",_failtype),
                new System.Data.SqlClient.SqlParameter("@FailMsg",_failmsg),
                new System.Data.SqlClient.SqlParameter("@FailPrizeID",_failprizeid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [LotteryActivitys] SET Title=@Title,DatB=@DatB,DatE=@DatE,IsTimeLimit=@IsTimeLimit,IsValid=@IsValid,IsActive=@IsActive,Explain=@Explain,FailType=@FailType,FailMsg=@FailMsg,FailPrizeID=@FailPrizeID WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
                new System.Data.SqlClient.SqlParameter("@DatB",_datb),
                new System.Data.SqlClient.SqlParameter("@DatE",_date),
                new System.Data.SqlClient.SqlParameter("@IsTimeLimit",_istimelimit),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsActive",_isactive),
                new System.Data.SqlClient.SqlParameter("@Explain",_explain),
                new System.Data.SqlClient.SqlParameter("@FailType",_failtype),
                new System.Data.SqlClient.SqlParameter("@FailMsg",_failmsg),
                new System.Data.SqlClient.SqlParameter("@FailPrizeID",_failprizeid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static LotteryActivitys GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Title,DatB,DatE,IsTimeLimit,IsValid,IsActive,Explain,FailType,FailMsg,FailPrizeID FROM [LotteryActivitys] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<LotteryActivitys>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Title,DatB,DatE,IsTimeLimit,IsValid,IsActive,Explain,FailType,FailMsg,FailPrizeID FROM [LotteryActivitys] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [LotteryActivitys] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [LotteryActivitys] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryActivitys> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Title,DatB,DatE,IsTimeLimit,IsValid,IsActive,Explain,FailType,FailMsg,FailPrizeID,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [LotteryActivitys] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitys>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryActivitys> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Title,DatB,DatE,IsTimeLimit,IsValid,IsActive,Explain,FailType,FailMsg,FailPrizeID FROM [LotteryActivitys] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitys>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<LotteryActivitys> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Title,DatB,DatE,IsTimeLimit,IsValid,IsActive,Explain,FailType,FailMsg,FailPrizeID FROM [LotteryActivitys]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitys>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class RedPackRecord 
    {
        #region Fields
        //public string str = "UserName:50|Code:50|openid:50|W_State:50";
        private int _id;
        private string _username = string.Empty;
        private string _code = string.Empty;
        private string _openid = string.Empty;
        private DateTime _add_time = new DateTime(1900,1,1);
        private string _w_state = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Code
        {
            get { return _code; }
            set { _code = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string openid
        {
            get { return _openid; }
            set { _openid = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime Add_Time
        {
            get { return _add_time; }
            set { _add_time = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string W_State
        {
            get { return _w_state; }
            set { _w_state = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [RedPackRecord] (UserName,Code,openid,Add_Time,W_State) values (@UserName,@Code,@openid,@Add_Time,@W_State);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [RedPackRecord]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@openid",_openid),
                new System.Data.SqlClient.SqlParameter("@Add_Time",_add_time),
                new System.Data.SqlClient.SqlParameter("@W_State",_w_state),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [RedPackRecord] (UserName,Code,openid,Add_Time,W_State) values (@UserName,@Code,@openid,@Add_Time,@W_State);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [RedPackRecord]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@openid",_openid),
                new System.Data.SqlClient.SqlParameter("@Add_Time",_add_time),
                new System.Data.SqlClient.SqlParameter("@W_State",_w_state),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [RedPackRecord] SET UserName=@UserName,Code=@Code,openid=@openid,Add_Time=@Add_Time,W_State=@W_State WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@openid",_openid),
                new System.Data.SqlClient.SqlParameter("@Add_Time",_add_time),
                new System.Data.SqlClient.SqlParameter("@W_State",_w_state),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [RedPackRecord] SET UserName=@UserName,Code=@Code,openid=@openid,Add_Time=@Add_Time,W_State=@W_State WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@openid",_openid),
                new System.Data.SqlClient.SqlParameter("@Add_Time",_add_time),
                new System.Data.SqlClient.SqlParameter("@W_State",_w_state),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static RedPackRecord GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,UserName,Code,openid,Add_Time,W_State FROM [RedPackRecord] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<RedPackRecord>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,UserName,Code,openid,Add_Time,W_State FROM [RedPackRecord] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [RedPackRecord] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [RedPackRecord] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<RedPackRecord> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,Code,openid,Add_Time,W_State,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [RedPackRecord] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackRecord>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<RedPackRecord> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,Code,openid,Add_Time,W_State FROM [RedPackRecord] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackRecord>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<RedPackRecord> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,UserName,Code,openid,Add_Time,W_State FROM [RedPackRecord]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackRecord>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<RedPackRecord> GetEntitysByopenid(int openid)
    	{
    		string strSql = "SELECT ID,UserName,Code,openid,Add_Time,W_State FROM [RedPackRecord] WHERE openid=@openid";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@openid",openid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackRecord>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSAgentKnow 
    {
        #region Fields
        //public string str = "Contents:2147483647|Title:50";
        private int _id;
        private string _contents = string.Empty;
        private bool _isshow;
        private int _sort;
        private string _title = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 内容
        /// </summary>
        public string Contents
        {
            get { return _contents; }
            set { _contents = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 是否显示
        /// </summary>
        public bool IsShow
        {
            get { return _isshow; }
            set { _isshow = value; }
        }

        /// <summary>
        /// 排序
        /// </summary>
        public int Sort
        {
            get { return _sort; }
            set { _sort = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSAgentKnow] (Contents,IsShow,Sort,Title) values (@Contents,@IsShow,@Sort,@Title);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSAgentKnow]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSAgentKnow] (Contents,IsShow,Sort,Title) values (@Contents,@IsShow,@Sort,@Title);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSAgentKnow]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSAgentKnow] SET Contents=@Contents,IsShow=@IsShow,Sort=@Sort,Title=@Title WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSAgentKnow] SET Contents=@Contents,IsShow=@IsShow,Sort=@Sort,Title=@Title WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Title",_title),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSAgentKnow GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Contents,IsShow,Sort,Title FROM [SYSAgentKnow] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSAgentKnow>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Contents,IsShow,Sort,Title FROM [SYSAgentKnow] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSAgentKnow] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSAgentKnow] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSAgentKnow> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Contents,IsShow,Sort,Title,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSAgentKnow] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSAgentKnow>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSAgentKnow> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Contents,IsShow,Sort,Title FROM [SYSAgentKnow] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSAgentKnow>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSAgentKnow> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Contents,IsShow,Sort,Title FROM [SYSAgentKnow]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSAgentKnow>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_User 
    {
        #region Fields
        //public string str = "UserName:50|Name:50|Phone:50|PassWord:50|Card:50|CardUrl:300|state:50|Identifier:50|Introducer:50|PortraitUrl:300|wxNo:50|WxQRCode:50|Province:50|City:50|Area:50";
        private int _id;
        private int _usenum;
        private string _username = string.Empty;
        private string _name = string.Empty;
        private string _phone = string.Empty;
        private string _password = string.Empty;
        private decimal _money;
        private string _card = string.Empty;
        private string _cardurl = string.Empty;
        private int _c_usertypeid;
        private string _state = string.Empty;
        private string _identifier = string.Empty;
        private int _chief;
        private string _introducer = string.Empty;
        private DateTime _datcreate = new DateTime(1900,1,1);
        private DateTime _datverify = new DateTime(1900,1,1);
        private DateTime _datlogin = new DateTime(1900,1,1);
        private DateTime _datpwdchange = new DateTime(1900,1,1);
        private string _portraiturl = string.Empty;
        private bool _isvalid;
        private string _wxno = string.Empty;
        private string _wxqrcode = string.Empty;
        private string _province = string.Empty;
        private string _city = string.Empty;
        private string _area = string.Empty;
        private int _updatetime;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int useNum
        {
            get { return _usenum; }
            set { _usenum = value; }
        }

        /// <summary>
        /// 客户编号 唯一
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 姓名
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 电话
        /// </summary>
        public string Phone
        {
            get { return _phone; }
            set { _phone = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 密码
        /// </summary>
        public string PassWord
        {
            get { return _password; }
            set { _password = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 余额
        /// </summary>
        public decimal Money
        {
            get { return _money; }
            set { _money = value; }
        }

        /// <summary>
        /// 身份证
        /// </summary>
        public string Card
        {
            get { return _card; }
            set { _card = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 身份证地址
        /// </summary>
        public string CardUrl
        {
            get { return _cardurl; }
            set { _cardurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 300); }
        }

        /// <summary>
        /// 类型外键 Lever字段
        /// </summary>
        public int C_UserTypeID
        {
            get { return _c_usertypeid; }
            set { _c_usertypeid = value; }
        }

        /// <summary>
        /// 状态(已审核、未审核、黑名单、已删除)
        /// </summary>
        public string state
        {
            get { return _state; }
            set { _state = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 授权编号
        /// </summary>
        public string Identifier
        {
            get { return _identifier; }
            set { _identifier = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 上级
        /// </summary>
        public int Chief
        {
            get { return _chief; }
            set { _chief = value; }
        }

        /// <summary>
        /// 推荐人 UserName
        /// </summary>
        public string Introducer
        {
            get { return _introducer; }
            set { _introducer = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 申请时间
        /// </summary>
        public DateTime DatCreate
        {
            get { return _datcreate; }
            set { _datcreate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 审核时间
        /// </summary>
        public DateTime DatVerify
        {
            get { return _datverify; }
            set { _datverify = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 最新一次登录时间
        /// </summary>
        public DateTime DatLogin
        {
            get { return _datlogin; }
            set { _datlogin = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 密码修改时间
        /// </summary>
        public DateTime DatPwdChange
        {
            get { return _datpwdchange; }
            set { _datpwdchange = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PortraitUrl
        {
            get { return _portraiturl; }
            set { _portraiturl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 300); }
        }

        /// <summary>
        /// 是否可用
        /// </summary>
        public bool IsValid
        {
            get { return _isvalid; }
            set { _isvalid = value; }
        }

        /// <summary>
        /// 微信号
        /// </summary>
        public string wxNo
        {
            get { return _wxno; }
            set { _wxno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 微信二维码
        /// </summary>
        public string WxQRCode
        {
            get { return _wxqrcode; }
            set { _wxqrcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 省份
        /// </summary>
        public string Province
        {
            get { return _province; }
            set { _province = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 所在市
        /// </summary>
        public string City
        {
            get { return _city; }
            set { _city = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 所在区
        /// </summary>
        public string Area
        {
            get { return _area; }
            set { _area = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int UpdateTime
        {
            get { return _updatetime; }
            set { _updatetime = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_User] (useNum,UserName,Name,Phone,PassWord,Money,Card,CardUrl,C_UserTypeID,state,Identifier,Chief,Introducer,DatCreate,DatVerify,DatLogin,DatPwdChange,PortraitUrl,IsValid,wxNo,WxQRCode,Province,City,Area,UpdateTime) values (@useNum,@UserName,@Name,@Phone,@PassWord,@Money,@Card,@CardUrl,@C_UserTypeID,@state,@Identifier,@Chief,@Introducer,@DatCreate,@DatVerify,@DatLogin,@DatPwdChange,@PortraitUrl,@IsValid,@wxNo,@WxQRCode,@Province,@City,@Area,@UpdateTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_User]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@useNum",_usenum),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@Card",_card),
                new System.Data.SqlClient.SqlParameter("@CardUrl",_cardurl),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeID",_c_usertypeid),
                new System.Data.SqlClient.SqlParameter("@state",_state),
                new System.Data.SqlClient.SqlParameter("@Identifier",_identifier),
                new System.Data.SqlClient.SqlParameter("@Chief",_chief),
                new System.Data.SqlClient.SqlParameter("@Introducer",_introducer),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
                new System.Data.SqlClient.SqlParameter("@DatLogin",_datlogin),
                new System.Data.SqlClient.SqlParameter("@DatPwdChange",_datpwdchange),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@wxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@WxQRCode",_wxqrcode),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_User] (useNum,UserName,Name,Phone,PassWord,Money,Card,CardUrl,C_UserTypeID,state,Identifier,Chief,Introducer,DatCreate,DatVerify,DatLogin,DatPwdChange,PortraitUrl,IsValid,wxNo,WxQRCode,Province,City,Area,UpdateTime) values (@useNum,@UserName,@Name,@Phone,@PassWord,@Money,@Card,@CardUrl,@C_UserTypeID,@state,@Identifier,@Chief,@Introducer,@DatCreate,@DatVerify,@DatLogin,@DatPwdChange,@PortraitUrl,@IsValid,@wxNo,@WxQRCode,@Province,@City,@Area,@UpdateTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_User]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@useNum",_usenum),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@Card",_card),
                new System.Data.SqlClient.SqlParameter("@CardUrl",_cardurl),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeID",_c_usertypeid),
                new System.Data.SqlClient.SqlParameter("@state",_state),
                new System.Data.SqlClient.SqlParameter("@Identifier",_identifier),
                new System.Data.SqlClient.SqlParameter("@Chief",_chief),
                new System.Data.SqlClient.SqlParameter("@Introducer",_introducer),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
                new System.Data.SqlClient.SqlParameter("@DatLogin",_datlogin),
                new System.Data.SqlClient.SqlParameter("@DatPwdChange",_datpwdchange),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@wxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@WxQRCode",_wxqrcode),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_User] SET useNum=@useNum,UserName=@UserName,Name=@Name,Phone=@Phone,PassWord=@PassWord,Money=@Money,Card=@Card,CardUrl=@CardUrl,C_UserTypeID=@C_UserTypeID,state=@state,Identifier=@Identifier,Chief=@Chief,Introducer=@Introducer,DatCreate=@DatCreate,DatVerify=@DatVerify,DatLogin=@DatLogin,DatPwdChange=@DatPwdChange,PortraitUrl=@PortraitUrl,IsValid=@IsValid,wxNo=@wxNo,WxQRCode=@WxQRCode,Province=@Province,City=@City,Area=@Area,UpdateTime=@UpdateTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@useNum",_usenum),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@Card",_card),
                new System.Data.SqlClient.SqlParameter("@CardUrl",_cardurl),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeID",_c_usertypeid),
                new System.Data.SqlClient.SqlParameter("@state",_state),
                new System.Data.SqlClient.SqlParameter("@Identifier",_identifier),
                new System.Data.SqlClient.SqlParameter("@Chief",_chief),
                new System.Data.SqlClient.SqlParameter("@Introducer",_introducer),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
                new System.Data.SqlClient.SqlParameter("@DatLogin",_datlogin),
                new System.Data.SqlClient.SqlParameter("@DatPwdChange",_datpwdchange),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@wxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@WxQRCode",_wxqrcode),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_User] SET useNum=@useNum,UserName=@UserName,Name=@Name,Phone=@Phone,PassWord=@PassWord,Money=@Money,Card=@Card,CardUrl=@CardUrl,C_UserTypeID=@C_UserTypeID,state=@state,Identifier=@Identifier,Chief=@Chief,Introducer=@Introducer,DatCreate=@DatCreate,DatVerify=@DatVerify,DatLogin=@DatLogin,DatPwdChange=@DatPwdChange,PortraitUrl=@PortraitUrl,IsValid=@IsValid,wxNo=@wxNo,WxQRCode=@WxQRCode,Province=@Province,City=@City,Area=@Area,UpdateTime=@UpdateTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@useNum",_usenum),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@Card",_card),
                new System.Data.SqlClient.SqlParameter("@CardUrl",_cardurl),
                new System.Data.SqlClient.SqlParameter("@C_UserTypeID",_c_usertypeid),
                new System.Data.SqlClient.SqlParameter("@state",_state),
                new System.Data.SqlClient.SqlParameter("@Identifier",_identifier),
                new System.Data.SqlClient.SqlParameter("@Chief",_chief),
                new System.Data.SqlClient.SqlParameter("@Introducer",_introducer),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
                new System.Data.SqlClient.SqlParameter("@DatLogin",_datlogin),
                new System.Data.SqlClient.SqlParameter("@DatPwdChange",_datpwdchange),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@wxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@WxQRCode",_wxqrcode),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_User GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,useNum,UserName,Name,Phone,PassWord,Money,Card,CardUrl,C_UserTypeID,state,Identifier,Chief,Introducer,DatCreate,DatVerify,DatLogin,DatPwdChange,PortraitUrl,IsValid,wxNo,WxQRCode,Province,City,Area,UpdateTime FROM [C_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_User>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,useNum,UserName,Name,Phone,PassWord,Money,Card,CardUrl,C_UserTypeID,state,Identifier,Chief,Introducer,DatCreate,DatVerify,DatLogin,DatPwdChange,PortraitUrl,IsValid,wxNo,WxQRCode,Province,City,Area,UpdateTime FROM [C_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_User> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,useNum,UserName,Name,Phone,PassWord,Money,Card,CardUrl,C_UserTypeID,state,Identifier,Chief,Introducer,DatCreate,DatVerify,DatLogin,DatPwdChange,PortraitUrl,IsValid,wxNo,WxQRCode,Province,City,Area,UpdateTime,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_User] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_User>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_User> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,useNum,UserName,Name,Phone,PassWord,Money,Card,CardUrl,C_UserTypeID,state,Identifier,Chief,Introducer,DatCreate,DatVerify,DatLogin,DatPwdChange,PortraitUrl,IsValid,wxNo,WxQRCode,Province,City,Area,UpdateTime FROM [C_User] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_User>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_User> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,useNum,UserName,Name,Phone,PassWord,Money,Card,CardUrl,C_UserTypeID,state,Identifier,Chief,Introducer,DatCreate,DatVerify,DatLogin,DatPwdChange,PortraitUrl,IsValid,wxNo,WxQRCode,Province,City,Area,UpdateTime FROM [C_User]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_User>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSAdv 
    {
        #region Fields
        //public string str = "Name:50|Url:2147483647|ImgUrl:2147483647";
        private int _id;
        private string _name = string.Empty;
        private string _url = string.Empty;
        private string _imgurl = string.Empty;
        private int _advtype;
        private int _sort;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 广告链接
        /// </summary>
        public string Url
        {
            get { return _url; }
            set { _url = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 图片链接
        /// </summary>
        public string ImgUrl
        {
            get { return _imgurl; }
            set { _imgurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 广告类型   1为首页
        /// </summary>
        public int AdvType
        {
            get { return _advtype; }
            set { _advtype = value; }
        }

        /// <summary>
        /// 排序
        /// </summary>
        public int Sort
        {
            get { return _sort; }
            set { _sort = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSAdv] (Name,Url,ImgUrl,AdvType,Sort) values (@Name,@Url,@ImgUrl,@AdvType,@Sort);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSAdv]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@AdvType",_advtype),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSAdv] (Name,Url,ImgUrl,AdvType,Sort) values (@Name,@Url,@ImgUrl,@AdvType,@Sort);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSAdv]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@AdvType",_advtype),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSAdv] SET Name=@Name,Url=@Url,ImgUrl=@ImgUrl,AdvType=@AdvType,Sort=@Sort WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@AdvType",_advtype),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSAdv] SET Name=@Name,Url=@Url,ImgUrl=@ImgUrl,AdvType=@AdvType,Sort=@Sort WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Url",_url),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@AdvType",_advtype),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSAdv GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Name,Url,ImgUrl,AdvType,Sort FROM [SYSAdv] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSAdv>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Name,Url,ImgUrl,AdvType,Sort FROM [SYSAdv] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSAdv] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSAdv] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSAdv> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Name,Url,ImgUrl,AdvType,Sort,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSAdv] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSAdv>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSAdv> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Name,Url,ImgUrl,AdvType,Sort FROM [SYSAdv] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSAdv>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSAdv> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Name,Url,ImgUrl,AdvType,Sort FROM [SYSAdv]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSAdv>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserAdvice 
    {
        #region Fields
        //public string str = "Contents:2147483647|Phone:50|Name:50|State:50|UserName:50|B_Name:50";
        private int _id;
        private string _contents = string.Empty;
        private string _phone = string.Empty;
        private string _name = string.Empty;
        private DateTime _datcreate = new DateTime(1900,1,1);
        private string _state = string.Empty;
        private string _username = string.Empty;
        private string _b_name = string.Empty;
        private DateTime _datverify = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Contents
        {
            get { return _contents; }
            set { _contents = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Phone
        {
            get { return _phone; }
            set { _phone = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DatCreate
        {
            get { return _datcreate; }
            set { _datcreate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string State
        {
            get { return _state; }
            set { _state = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string B_Name
        {
            get { return _b_name; }
            set { _b_name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DatVerify
        {
            get { return _datverify; }
            set { _datverify = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserAdvice] (Contents,Phone,Name,DatCreate,State,UserName,B_Name,DatVerify) values (@Contents,@Phone,@Name,@DatCreate,@State,@UserName,@B_Name,@DatVerify);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserAdvice]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@B_Name",_b_name),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserAdvice] (Contents,Phone,Name,DatCreate,State,UserName,B_Name,DatVerify) values (@Contents,@Phone,@Name,@DatCreate,@State,@UserName,@B_Name,@DatVerify);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserAdvice]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@B_Name",_b_name),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserAdvice] SET Contents=@Contents,Phone=@Phone,Name=@Name,DatCreate=@DatCreate,State=@State,UserName=@UserName,B_Name=@B_Name,DatVerify=@DatVerify WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@B_Name",_b_name),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserAdvice] SET Contents=@Contents,Phone=@Phone,Name=@Name,DatCreate=@DatCreate,State=@State,UserName=@UserName,B_Name=@B_Name,DatVerify=@DatVerify WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Contents",_contents),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@B_Name",_b_name),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserAdvice GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Contents,Phone,Name,DatCreate,State,UserName,B_Name,DatVerify FROM [C_UserAdvice] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserAdvice>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Contents,Phone,Name,DatCreate,State,UserName,B_Name,DatVerify FROM [C_UserAdvice] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserAdvice] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserAdvice] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserAdvice> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Contents,Phone,Name,DatCreate,State,UserName,B_Name,DatVerify,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserAdvice] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserAdvice>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserAdvice> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Contents,Phone,Name,DatCreate,State,UserName,B_Name,DatVerify FROM [C_UserAdvice] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserAdvice>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserAdvice> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Contents,Phone,Name,DatCreate,State,UserName,B_Name,DatVerify FROM [C_UserAdvice]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserAdvice>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class PDAUserFunc 
    {
        #region Fields
        //public string str = "FunCode:20";
        private int _id;
        private int _userid;
        private string _funcode = string.Empty;
        private bool _isenable;
        private DateTime _creatdate = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int UserId
        {
            get { return _userid; }
            set { _userid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FunCode
        {
            get { return _funcode; }
            set { _funcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsEnable
        {
            get { return _isenable; }
            set { _isenable = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime CreatDate
        {
            get { return _creatdate; }
            set { _creatdate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [PDAUserFunc] (UserId,FunCode,IsEnable,CreatDate) values (@UserId,@FunCode,@IsEnable,@CreatDate);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAUserFunc]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserId",_userid),
                new System.Data.SqlClient.SqlParameter("@FunCode",_funcode),
                new System.Data.SqlClient.SqlParameter("@IsEnable",_isenable),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [PDAUserFunc] (UserId,FunCode,IsEnable,CreatDate) values (@UserId,@FunCode,@IsEnable,@CreatDate);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAUserFunc]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserId",_userid),
                new System.Data.SqlClient.SqlParameter("@FunCode",_funcode),
                new System.Data.SqlClient.SqlParameter("@IsEnable",_isenable),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [PDAUserFunc] SET UserId=@UserId,FunCode=@FunCode,IsEnable=@IsEnable,CreatDate=@CreatDate WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserId",_userid),
                new System.Data.SqlClient.SqlParameter("@FunCode",_funcode),
                new System.Data.SqlClient.SqlParameter("@IsEnable",_isenable),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [PDAUserFunc] SET UserId=@UserId,FunCode=@FunCode,IsEnable=@IsEnable,CreatDate=@CreatDate WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserId",_userid),
                new System.Data.SqlClient.SqlParameter("@FunCode",_funcode),
                new System.Data.SqlClient.SqlParameter("@IsEnable",_isenable),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static PDAUserFunc GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,UserId,FunCode,IsEnable,CreatDate FROM [PDAUserFunc] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<PDAUserFunc>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,UserId,FunCode,IsEnable,CreatDate FROM [PDAUserFunc] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [PDAUserFunc] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [PDAUserFunc] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAUserFunc> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserId,FunCode,IsEnable,CreatDate,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [PDAUserFunc] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAUserFunc>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAUserFunc> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserId,FunCode,IsEnable,CreatDate FROM [PDAUserFunc] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAUserFunc>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<PDAUserFunc> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,UserId,FunCode,IsEnable,CreatDate FROM [PDAUserFunc]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAUserFunc>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<PDAUserFunc> GetEntitysByUserId(int userid)
    	{
    		string strSql = "SELECT ID,UserId,FunCode,IsEnable,CreatDate FROM [PDAUserFunc] WHERE UserId=@UserId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@UserId",userid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAUserFunc>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class Supplier 
    {
        #region Fields
        //public string str = "Name:2147483647|Address:2147483647|B_Name:2147483647|Phone:50|Card:50|Type:50";
        private int _id;
        private string _name = string.Empty;
        private string _address = string.Empty;
        private DateTime _addtime = new DateTime(1900,1,1);
        private string _b_name = string.Empty;
        private string _phone = string.Empty;
        private string _card = string.Empty;
        private string _type = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime AddTime
        {
            get { return _addtime; }
            set { _addtime = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string B_Name
        {
            get { return _b_name; }
            set { _b_name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Phone
        {
            get { return _phone; }
            set { _phone = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Card
        {
            get { return _card; }
            set { _card = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Type
        {
            get { return _type; }
            set { _type = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [Supplier] (Name,Address,AddTime,B_Name,Phone,Card,Type) values (@Name,@Address,@AddTime,@B_Name,@Phone,@Card,@Type);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Supplier]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@AddTime",_addtime),
                new System.Data.SqlClient.SqlParameter("@B_Name",_b_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Card",_card),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [Supplier] (Name,Address,AddTime,B_Name,Phone,Card,Type) values (@Name,@Address,@AddTime,@B_Name,@Phone,@Card,@Type);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Supplier]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@AddTime",_addtime),
                new System.Data.SqlClient.SqlParameter("@B_Name",_b_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Card",_card),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [Supplier] SET Name=@Name,Address=@Address,AddTime=@AddTime,B_Name=@B_Name,Phone=@Phone,Card=@Card,Type=@Type WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@AddTime",_addtime),
                new System.Data.SqlClient.SqlParameter("@B_Name",_b_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Card",_card),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [Supplier] SET Name=@Name,Address=@Address,AddTime=@AddTime,B_Name=@B_Name,Phone=@Phone,Card=@Card,Type=@Type WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@AddTime",_addtime),
                new System.Data.SqlClient.SqlParameter("@B_Name",_b_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@Card",_card),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static Supplier GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Name,Address,AddTime,B_Name,Phone,Card,Type FROM [Supplier] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<Supplier>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Name,Address,AddTime,B_Name,Phone,Card,Type FROM [Supplier] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [Supplier] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [Supplier] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Supplier> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Name,Address,AddTime,B_Name,Phone,Card,Type,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [Supplier] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Supplier>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Supplier> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Name,Address,AddTime,B_Name,Phone,Card,Type FROM [Supplier] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Supplier>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<Supplier> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Name,Address,AddTime,B_Name,Phone,Card,Type FROM [Supplier]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<Supplier>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class PDAApp 
    {
        #region Fields
        //public string str = "Ver:50|AppName:50|Size:50|AppPath:200";
        private int _id;
        private bool _isok;
        private string _ver = string.Empty;
        private string _appname = string.Empty;
        private string _size = string.Empty;
        private string _apppath = string.Empty;
        private int _creattime;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsOK
        {
            get { return _isok; }
            set { _isok = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Ver
        {
            get { return _ver; }
            set { _ver = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string AppName
        {
            get { return _appname; }
            set { _appname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Size
        {
            get { return _size; }
            set { _size = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string AppPath
        {
            get { return _apppath; }
            set { _apppath = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CreatTime
        {
            get { return _creattime; }
            set { _creattime = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [PDAApp] (IsOK,Ver,AppName,Size,AppPath,CreatTime) values (@IsOK,@Ver,@AppName,@Size,@AppPath,@CreatTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAApp]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@IsOK",_isok),
                new System.Data.SqlClient.SqlParameter("@Ver",_ver),
                new System.Data.SqlClient.SqlParameter("@AppName",_appname),
                new System.Data.SqlClient.SqlParameter("@Size",_size),
                new System.Data.SqlClient.SqlParameter("@AppPath",_apppath),
                new System.Data.SqlClient.SqlParameter("@CreatTime",_creattime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [PDAApp] (IsOK,Ver,AppName,Size,AppPath,CreatTime) values (@IsOK,@Ver,@AppName,@Size,@AppPath,@CreatTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAApp]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@IsOK",_isok),
                new System.Data.SqlClient.SqlParameter("@Ver",_ver),
                new System.Data.SqlClient.SqlParameter("@AppName",_appname),
                new System.Data.SqlClient.SqlParameter("@Size",_size),
                new System.Data.SqlClient.SqlParameter("@AppPath",_apppath),
                new System.Data.SqlClient.SqlParameter("@CreatTime",_creattime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [PDAApp] SET IsOK=@IsOK,Ver=@Ver,AppName=@AppName,Size=@Size,AppPath=@AppPath,CreatTime=@CreatTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@IsOK",_isok),
                new System.Data.SqlClient.SqlParameter("@Ver",_ver),
                new System.Data.SqlClient.SqlParameter("@AppName",_appname),
                new System.Data.SqlClient.SqlParameter("@Size",_size),
                new System.Data.SqlClient.SqlParameter("@AppPath",_apppath),
                new System.Data.SqlClient.SqlParameter("@CreatTime",_creattime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [PDAApp] SET IsOK=@IsOK,Ver=@Ver,AppName=@AppName,Size=@Size,AppPath=@AppPath,CreatTime=@CreatTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@IsOK",_isok),
                new System.Data.SqlClient.SqlParameter("@Ver",_ver),
                new System.Data.SqlClient.SqlParameter("@AppName",_appname),
                new System.Data.SqlClient.SqlParameter("@Size",_size),
                new System.Data.SqlClient.SqlParameter("@AppPath",_apppath),
                new System.Data.SqlClient.SqlParameter("@CreatTime",_creattime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static PDAApp GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,IsOK,Ver,AppName,Size,AppPath,CreatTime FROM [PDAApp] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<PDAApp>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,IsOK,Ver,AppName,Size,AppPath,CreatTime FROM [PDAApp] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [PDAApp] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [PDAApp] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAApp> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,IsOK,Ver,AppName,Size,AppPath,CreatTime,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [PDAApp] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAApp>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAApp> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,IsOK,Ver,AppName,Size,AppPath,CreatTime FROM [PDAApp] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAApp>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<PDAApp> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,IsOK,Ver,AppName,Size,AppPath,CreatTime FROM [PDAApp]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAApp>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class LotteryActivitysAreaRedPack 
    {
        #region Fields
        //public string str = "shiwu:200";
        private int _id;
        private int _activityid;
        private int _areaid;
        private decimal _maxprice;
        private decimal _minprice;
        private int _redcnt;
        private string _shiwu = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 活动ID
        /// </summary>
        public int ActivityID
        {
            get { return _activityid; }
            set { _activityid = value; }
        }

        /// <summary>
        /// 区域ID
        /// </summary>
        public int AreaID
        {
            get { return _areaid; }
            set { _areaid = value; }
        }

        /// <summary>
        /// 单个红包最大金额
        /// </summary>
        public decimal MaxPrice
        {
            get { return _maxprice; }
            set { _maxprice = value; }
        }

        /// <summary>
        /// 单个红包最小金额
        /// </summary>
        public decimal MinPrice
        {
            get { return _minprice; }
            set { _minprice = value; }
        }

        /// <summary>
        /// 红包个数
        /// </summary>
        public int RedCnt
        {
            get { return _redcnt; }
            set { _redcnt = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string shiwu
        {
            get { return _shiwu; }
            set { _shiwu = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [LotteryActivitysAreaRedPack] (ActivityID,AreaID,MaxPrice,MinPrice,RedCnt,shiwu) values (@ActivityID,@AreaID,@MaxPrice,@MinPrice,@RedCnt,@shiwu);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryActivitysAreaRedPack]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@RedCnt",_redcnt),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [LotteryActivitysAreaRedPack] (ActivityID,AreaID,MaxPrice,MinPrice,RedCnt,shiwu) values (@ActivityID,@AreaID,@MaxPrice,@MinPrice,@RedCnt,@shiwu);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryActivitysAreaRedPack]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@RedCnt",_redcnt),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [LotteryActivitysAreaRedPack] SET ActivityID=@ActivityID,AreaID=@AreaID,MaxPrice=@MaxPrice,MinPrice=@MinPrice,RedCnt=@RedCnt,shiwu=@shiwu WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@RedCnt",_redcnt),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [LotteryActivitysAreaRedPack] SET ActivityID=@ActivityID,AreaID=@AreaID,MaxPrice=@MaxPrice,MinPrice=@MinPrice,RedCnt=@RedCnt,shiwu=@shiwu WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@RedCnt",_redcnt),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static LotteryActivitysAreaRedPack GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,RedCnt,shiwu FROM [LotteryActivitysAreaRedPack] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<LotteryActivitysAreaRedPack>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,RedCnt,shiwu FROM [LotteryActivitysAreaRedPack] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [LotteryActivitysAreaRedPack] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [LotteryActivitysAreaRedPack] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryActivitysAreaRedPack> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,RedCnt,shiwu,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [LotteryActivitysAreaRedPack] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysAreaRedPack>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryActivitysAreaRedPack> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,RedCnt,shiwu FROM [LotteryActivitysAreaRedPack] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysAreaRedPack>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<LotteryActivitysAreaRedPack> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ActivityID,AreaID,MaxPrice,MinPrice,RedCnt,shiwu FROM [LotteryActivitysAreaRedPack]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysAreaRedPack>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<LotteryActivitysAreaRedPack> GetEntitysByActivityID(int activityid)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,RedCnt,shiwu FROM [LotteryActivitysAreaRedPack] WHERE ActivityID=@ActivityID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ActivityID",activityid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysAreaRedPack>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<LotteryActivitysAreaRedPack> GetEntitysByAreaID(int areaid)
    	{
    		string strSql = "SELECT ID,ActivityID,AreaID,MaxPrice,MinPrice,RedCnt,shiwu FROM [LotteryActivitysAreaRedPack] WHERE AreaID=@AreaID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@AreaID",areaid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysAreaRedPack>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class View_AntiQuery 
    {
        #region Fields
        //public string str = "AntiCode:50|IP:50|province:50|city:50|warning:50|Address:50|UserName:50|BigCode:50|MiddleCode:50|SmallCode:50|SalesAddress:100";
        private int _id;
        private string _anticode = string.Empty;
        private string _ip = string.Empty;
        private string _province = string.Empty;
        private string _city = string.Empty;
        private string _warning = string.Empty;
        private string _address = string.Empty;
        private string _username = string.Empty;
        private int _createtime;
        private string _bigcode = string.Empty;
        private string _middlecode = string.Empty;
        private string _smallcode = string.Empty;
        private string _salesaddress = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string AntiCode
        {
            get { return _anticode; }
            set { _anticode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string IP
        {
            get { return _ip; }
            set { _ip = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string province
        {
            get { return _province; }
            set { _province = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string city
        {
            get { return _city; }
            set { _city = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string warning
        {
            get { return _warning; }
            set { _warning = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CreateTime
        {
            get { return _createtime; }
            set { _createtime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BigCode
        {
            get { return _bigcode; }
            set { _bigcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string MiddleCode
        {
            get { return _middlecode; }
            set { _middlecode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string SmallCode
        {
            get { return _smallcode; }
            set { _smallcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string SalesAddress
        {
            get { return _salesaddress; }
            set { _salesaddress = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 100); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [View_AntiQuery] (ID,AntiCode,IP,province,city,warning,Address,UserName,CreateTime,BigCode,MiddleCode,SmallCode,SalesAddress) values (@ID,@AntiCode,@IP,@province,@city,@warning,@Address,@UserName,@CreateTime,@BigCode,@MiddleCode,@SmallCode,@SalesAddress);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_AntiQuery]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@IP",_ip),
                new System.Data.SqlClient.SqlParameter("@province",_province),
                new System.Data.SqlClient.SqlParameter("@city",_city),
                new System.Data.SqlClient.SqlParameter("@warning",_warning),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@SalesAddress",_salesaddress),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [View_AntiQuery] (ID,AntiCode,IP,province,city,warning,Address,UserName,CreateTime,BigCode,MiddleCode,SmallCode,SalesAddress) values (@ID,@AntiCode,@IP,@province,@city,@warning,@Address,@UserName,@CreateTime,@BigCode,@MiddleCode,@SmallCode,@SalesAddress);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_AntiQuery]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@IP",_ip),
                new System.Data.SqlClient.SqlParameter("@province",_province),
                new System.Data.SqlClient.SqlParameter("@city",_city),
                new System.Data.SqlClient.SqlParameter("@warning",_warning),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@SalesAddress",_salesaddress),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [View_AntiQuery] SET ID=@ID,AntiCode=@AntiCode,IP=@IP,province=@province,city=@city,warning=@warning,Address=@Address,UserName=@UserName,CreateTime=@CreateTime,BigCode=@BigCode,MiddleCode=@MiddleCode,SmallCode=@SmallCode,SalesAddress=@SalesAddress WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@IP",_ip),
                new System.Data.SqlClient.SqlParameter("@province",_province),
                new System.Data.SqlClient.SqlParameter("@city",_city),
                new System.Data.SqlClient.SqlParameter("@warning",_warning),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@SalesAddress",_salesaddress),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [View_AntiQuery] SET ID=@ID,AntiCode=@AntiCode,IP=@IP,province=@province,city=@city,warning=@warning,Address=@Address,UserName=@UserName,CreateTime=@CreateTime,BigCode=@BigCode,MiddleCode=@MiddleCode,SmallCode=@SmallCode,SalesAddress=@SalesAddress WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@IP",_ip),
                new System.Data.SqlClient.SqlParameter("@province",_province),
                new System.Data.SqlClient.SqlParameter("@city",_city),
                new System.Data.SqlClient.SqlParameter("@warning",_warning),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@SalesAddress",_salesaddress),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static View_AntiQuery GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,AntiCode,IP,province,city,warning,Address,UserName,CreateTime,BigCode,MiddleCode,SmallCode,SalesAddress FROM [View_AntiQuery] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<View_AntiQuery>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,AntiCode,IP,province,city,warning,Address,UserName,CreateTime,BigCode,MiddleCode,SmallCode,SalesAddress FROM [View_AntiQuery] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [View_AntiQuery] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [View_AntiQuery] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<View_AntiQuery> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,AntiCode,IP,province,city,warning,Address,UserName,CreateTime,BigCode,MiddleCode,SmallCode,SalesAddress,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [View_AntiQuery] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<View_AntiQuery>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<View_AntiQuery> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,AntiCode,IP,province,city,warning,Address,UserName,CreateTime,BigCode,MiddleCode,SmallCode,SalesAddress FROM [View_AntiQuery] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<View_AntiQuery>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<View_AntiQuery> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,AntiCode,IP,province,city,warning,Address,UserName,CreateTime,BigCode,MiddleCode,SmallCode,SalesAddress FROM [View_AntiQuery]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<View_AntiQuery>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class View_GetHQOrder 
    {
        #region Fields
        //public string str = "OrderNo:30|ProductName:50|ProductNumber:50|UserName:20|Name:50|Address:200";
        private string _orderno = string.Empty;
        private string _productname = string.Empty;
        private string _productnumber = string.Empty;
        private int _qty;
        private string _username = string.Empty;
        private string _name = string.Empty;
        private string _address = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductName
        {
            get { return _productname; }
            set { _productname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductNumber
        {
            get { return _productnumber; }
            set { _productnumber = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Qty
        {
            get { return _qty; }
            set { _qty = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [View_GetHQOrder] (OrderNo,ProductName,ProductNumber,Qty,UserName,Name,Address) values (@OrderNo,@ProductName,@ProductNumber,@Qty,@UserName,@Name,@Address);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_GetHQOrder]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@Qty",_qty),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [View_GetHQOrder] (OrderNo,ProductName,ProductNumber,Qty,UserName,Name,Address) values (@OrderNo,@ProductName,@ProductNumber,@Qty,@UserName,@Name,@Address);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [View_GetHQOrder]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@Qty",_qty),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<View_GetHQOrder> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 OrderNo,ProductName,ProductNumber,Qty,UserName,Name,Address FROM [View_GetHQOrder]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<View_GetHQOrder>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class ProductSnap 
    {
        #region Fields
        //public string str = "OrderNo:2147483647|ProductName:50|Main_img:2147483647|Detail:2147483647";
        private int _id;
        private int _productid;
        private bool _isdel;
        private DateTime _datedit = new DateTime(1900,1,1);
        private string _orderno = string.Empty;
        private string _productname = string.Empty;
        private string _main_img = string.Empty;
        private string _detail = string.Empty;
        private decimal _saleprice;
        private bool _ispostfree;
        private decimal _buyprice;
        private int _getcnt;
        private decimal _discountrate;
        private DateTime _datdiscountb = new DateTime(1900,1,1);
        private DateTime _datdiscounte = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 商品ID
        /// </summary>
        public int ProductID
        {
            get { return _productid; }
            set { _productid = value; }
        }

        /// <summary>
        /// 是否被删除
        /// </summary>
        public bool IsDel
        {
            get { return _isdel; }
            set { _isdel = value; }
        }

        /// <summary>
        /// 更新时间
        /// </summary>
        public DateTime DatEdit
        {
            get { return _datedit; }
            set { _datedit = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 订单号
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 商品名称
        /// </summary>
        public string ProductName
        {
            get { return _productname; }
            set { _productname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 商品主图
        /// </summary>
        public string Main_img
        {
            get { return _main_img; }
            set { _main_img = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 商品详情
        /// </summary>
        public string Detail
        {
            get { return _detail; }
            set { _detail = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 销售价
        /// </summary>
        public decimal SalePrice
        {
            get { return _saleprice; }
            set { _saleprice = value; }
        }

        /// <summary>
        /// 是否包邮
        /// </summary>
        public bool isPostFree
        {
            get { return _ispostfree; }
            set { _ispostfree = value; }
        }

        /// <summary>
        /// 购买时的价格
        /// </summary>
        public decimal BuyPrice
        {
            get { return _buyprice; }
            set { _buyprice = value; }
        }

        /// <summary>
        /// 购买数量
        /// </summary>
        public int GetCnt
        {
            get { return _getcnt; }
            set { _getcnt = value; }
        }

        /// <summary>
        /// 折扣率 填几折  如5折填5
        /// </summary>
        public decimal DiscountRate
        {
            get { return _discountrate; }
            set { _discountrate = value; }
        }

        /// <summary>
        /// 折扣开始时间
        /// </summary>
        public DateTime DatDiscountB
        {
            get { return _datdiscountb; }
            set { _datdiscountb = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 折扣结束时间
        /// </summary>
        public DateTime DatDiscountE
        {
            get { return _datdiscounte; }
            set { _datdiscounte = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [ProductSnap] (ProductID,IsDel,DatEdit,OrderNo,ProductName,Main_img,Detail,SalePrice,isPostFree,BuyPrice,GetCnt,DiscountRate,DatDiscountB,DatDiscountE) values (@ProductID,@IsDel,@DatEdit,@OrderNo,@ProductName,@Main_img,@Detail,@SalePrice,@isPostFree,@BuyPrice,@GetCnt,@DiscountRate,@DatDiscountB,@DatDiscountE);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ProductSnap]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@IsDel",_isdel),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@SalePrice",_saleprice),
                new System.Data.SqlClient.SqlParameter("@isPostFree",_ispostfree),
                new System.Data.SqlClient.SqlParameter("@BuyPrice",_buyprice),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
                new System.Data.SqlClient.SqlParameter("@DiscountRate",_discountrate),
                new System.Data.SqlClient.SqlParameter("@DatDiscountB",_datdiscountb),
                new System.Data.SqlClient.SqlParameter("@DatDiscountE",_datdiscounte),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [ProductSnap] (ProductID,IsDel,DatEdit,OrderNo,ProductName,Main_img,Detail,SalePrice,isPostFree,BuyPrice,GetCnt,DiscountRate,DatDiscountB,DatDiscountE) values (@ProductID,@IsDel,@DatEdit,@OrderNo,@ProductName,@Main_img,@Detail,@SalePrice,@isPostFree,@BuyPrice,@GetCnt,@DiscountRate,@DatDiscountB,@DatDiscountE);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ProductSnap]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@IsDel",_isdel),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@SalePrice",_saleprice),
                new System.Data.SqlClient.SqlParameter("@isPostFree",_ispostfree),
                new System.Data.SqlClient.SqlParameter("@BuyPrice",_buyprice),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
                new System.Data.SqlClient.SqlParameter("@DiscountRate",_discountrate),
                new System.Data.SqlClient.SqlParameter("@DatDiscountB",_datdiscountb),
                new System.Data.SqlClient.SqlParameter("@DatDiscountE",_datdiscounte),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [ProductSnap] SET ProductID=@ProductID,IsDel=@IsDel,DatEdit=@DatEdit,OrderNo=@OrderNo,ProductName=@ProductName,Main_img=@Main_img,Detail=@Detail,SalePrice=@SalePrice,isPostFree=@isPostFree,BuyPrice=@BuyPrice,GetCnt=@GetCnt,DiscountRate=@DiscountRate,DatDiscountB=@DatDiscountB,DatDiscountE=@DatDiscountE WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@IsDel",_isdel),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@SalePrice",_saleprice),
                new System.Data.SqlClient.SqlParameter("@isPostFree",_ispostfree),
                new System.Data.SqlClient.SqlParameter("@BuyPrice",_buyprice),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
                new System.Data.SqlClient.SqlParameter("@DiscountRate",_discountrate),
                new System.Data.SqlClient.SqlParameter("@DatDiscountB",_datdiscountb),
                new System.Data.SqlClient.SqlParameter("@DatDiscountE",_datdiscounte),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [ProductSnap] SET ProductID=@ProductID,IsDel=@IsDel,DatEdit=@DatEdit,OrderNo=@OrderNo,ProductName=@ProductName,Main_img=@Main_img,Detail=@Detail,SalePrice=@SalePrice,isPostFree=@isPostFree,BuyPrice=@BuyPrice,GetCnt=@GetCnt,DiscountRate=@DiscountRate,DatDiscountB=@DatDiscountB,DatDiscountE=@DatDiscountE WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@IsDel",_isdel),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@SalePrice",_saleprice),
                new System.Data.SqlClient.SqlParameter("@isPostFree",_ispostfree),
                new System.Data.SqlClient.SqlParameter("@BuyPrice",_buyprice),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
                new System.Data.SqlClient.SqlParameter("@DiscountRate",_discountrate),
                new System.Data.SqlClient.SqlParameter("@DatDiscountB",_datdiscountb),
                new System.Data.SqlClient.SqlParameter("@DatDiscountE",_datdiscounte),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static ProductSnap GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ProductID,IsDel,DatEdit,OrderNo,ProductName,Main_img,Detail,SalePrice,isPostFree,BuyPrice,GetCnt,DiscountRate,DatDiscountB,DatDiscountE FROM [ProductSnap] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<ProductSnap>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ProductID,IsDel,DatEdit,OrderNo,ProductName,Main_img,Detail,SalePrice,isPostFree,BuyPrice,GetCnt,DiscountRate,DatDiscountB,DatDiscountE FROM [ProductSnap] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [ProductSnap] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [ProductSnap] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<ProductSnap> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ProductID,IsDel,DatEdit,OrderNo,ProductName,Main_img,Detail,SalePrice,isPostFree,BuyPrice,GetCnt,DiscountRate,DatDiscountB,DatDiscountE,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [ProductSnap] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<ProductSnap>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<ProductSnap> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ProductID,IsDel,DatEdit,OrderNo,ProductName,Main_img,Detail,SalePrice,isPostFree,BuyPrice,GetCnt,DiscountRate,DatDiscountB,DatDiscountE FROM [ProductSnap] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<ProductSnap>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<ProductSnap> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ProductID,IsDel,DatEdit,OrderNo,ProductName,Main_img,Detail,SalePrice,isPostFree,BuyPrice,GetCnt,DiscountRate,DatDiscountB,DatDiscountE FROM [ProductSnap]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<ProductSnap>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<ProductSnap> GetEntitysByProductID(int productid)
    	{
    		string strSql = "SELECT ID,ProductID,IsDel,DatEdit,OrderNo,ProductName,Main_img,Detail,SalePrice,isPostFree,BuyPrice,GetCnt,DiscountRate,DatDiscountB,DatDiscountE FROM [ProductSnap] WHERE ProductID=@ProductID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ProductID",productid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<ProductSnap>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SpaceCount 
    {
        #region Fields
        //public string str = "Remark:50";
        private int _id;
        private int _menuid;
        private int _qty;
        private string _remark = string.Empty;
        private int _uptime;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MenuId
        {
            get { return _menuid; }
            set { _menuid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Qty
        {
            get { return _qty; }
            set { _qty = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Remark
        {
            get { return _remark; }
            set { _remark = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int UpTime
        {
            get { return _uptime; }
            set { _uptime = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SpaceCount] (MenuId,Qty,Remark,UpTime) values (@MenuId,@Qty,@Remark,@UpTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SpaceCount]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuId",_menuid),
                new System.Data.SqlClient.SqlParameter("@Qty",_qty),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@UpTime",_uptime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SpaceCount] (MenuId,Qty,Remark,UpTime) values (@MenuId,@Qty,@Remark,@UpTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SpaceCount]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuId",_menuid),
                new System.Data.SqlClient.SqlParameter("@Qty",_qty),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@UpTime",_uptime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SpaceCount] SET MenuId=@MenuId,Qty=@Qty,Remark=@Remark,UpTime=@UpTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuId",_menuid),
                new System.Data.SqlClient.SqlParameter("@Qty",_qty),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@UpTime",_uptime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SpaceCount] SET MenuId=@MenuId,Qty=@Qty,Remark=@Remark,UpTime=@UpTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuId",_menuid),
                new System.Data.SqlClient.SqlParameter("@Qty",_qty),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@UpTime",_uptime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SpaceCount GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,MenuId,Qty,Remark,UpTime FROM [SpaceCount] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SpaceCount>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,MenuId,Qty,Remark,UpTime FROM [SpaceCount] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SpaceCount] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SpaceCount] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SpaceCount> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MenuId,Qty,Remark,UpTime,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SpaceCount] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SpaceCount>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SpaceCount> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MenuId,Qty,Remark,UpTime FROM [SpaceCount] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SpaceCount>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SpaceCount> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,MenuId,Qty,Remark,UpTime FROM [SpaceCount]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SpaceCount>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<SpaceCount> GetEntitysByMenuId(int menuid)
    	{
    		string strSql = "SELECT ID,MenuId,Qty,Remark,UpTime FROM [SpaceCount] WHERE MenuId=@MenuId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@MenuId",menuid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<SpaceCount>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class Product_Lever 
    {
        #region Fields
        //public string str = "";
        private int _id;
        private int _productid;
        private decimal _price;
        private int _usertypeid;
        #endregion

        #region Attributes
        /// <summary>
        /// 产品和级别关系表ID
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 产品编号
        /// </summary>
        public int ProductID
        {
            get { return _productid; }
            set { _productid = value; }
        }

        /// <summary>
        /// 级别价格
        /// </summary>
        public decimal Price
        {
            get { return _price; }
            set { _price = value; }
        }

        /// <summary>
        /// 代理级别    C_UserType的 Lever字段
        /// </summary>
        public int UserTypeID
        {
            get { return _usertypeid; }
            set { _usertypeid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [Product_Lever] (ProductID,Price,UserTypeID) values (@ProductID,@Price,@UserTypeID);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Product_Lever]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@Price",_price),
                new System.Data.SqlClient.SqlParameter("@UserTypeID",_usertypeid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [Product_Lever] (ProductID,Price,UserTypeID) values (@ProductID,@Price,@UserTypeID);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Product_Lever]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@Price",_price),
                new System.Data.SqlClient.SqlParameter("@UserTypeID",_usertypeid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [Product_Lever] SET ProductID=@ProductID,Price=@Price,UserTypeID=@UserTypeID WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@Price",_price),
                new System.Data.SqlClient.SqlParameter("@UserTypeID",_usertypeid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [Product_Lever] SET ProductID=@ProductID,Price=@Price,UserTypeID=@UserTypeID WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@Price",_price),
                new System.Data.SqlClient.SqlParameter("@UserTypeID",_usertypeid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static Product_Lever GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ProductID,Price,UserTypeID FROM [Product_Lever] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<Product_Lever>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ProductID,Price,UserTypeID FROM [Product_Lever] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [Product_Lever] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [Product_Lever] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Product_Lever> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ProductID,Price,UserTypeID,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [Product_Lever] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Product_Lever>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Product_Lever> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ProductID,Price,UserTypeID FROM [Product_Lever] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Product_Lever>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<Product_Lever> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ProductID,Price,UserTypeID FROM [Product_Lever]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<Product_Lever>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<Product_Lever> GetEntitysByProductID(int productid)
    	{
    		string strSql = "SELECT ID,ProductID,Price,UserTypeID FROM [Product_Lever] WHERE ProductID=@ProductID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ProductID",productid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<Product_Lever>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<Product_Lever> GetEntitysByUserTypeID(int usertypeid)
    	{
    		string strSql = "SELECT ID,ProductID,Price,UserTypeID FROM [Product_Lever] WHERE UserTypeID=@UserTypeID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@UserTypeID",usertypeid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<Product_Lever>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class PDAParam 
    {
        #region Fields
        //public string str = "";
        private int _id;
        private int _scanprocess;
        private bool _islink;
        private bool _isinto;
        private bool _isout;
        private bool _isrtn;
        private bool _smallpacking;
        private bool _middlepacking;
        private int _linkway;
        private bool _islinkproduct;
        private bool _islinksupplier;
        private bool _smallinto;
        private bool _middleinto;
        private bool _biginto;
        private int _intoway;
        private bool _isintoproduct;
        private bool _isintosupplier;
        private bool _smallout;
        private bool _middleout;
        private bool _bigout;
        private int _outway;
        private bool _isoutproduct;
        private bool _smallrtn;
        private bool _middlertn;
        private bool _bigrtn;
        private bool _orderrtn;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ScanProcess
        {
            get { return _scanprocess; }
            set { _scanprocess = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsLink
        {
            get { return _islink; }
            set { _islink = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsInto
        {
            get { return _isinto; }
            set { _isinto = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsOut
        {
            get { return _isout; }
            set { _isout = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsRtn
        {
            get { return _isrtn; }
            set { _isrtn = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool SmallPacking
        {
            get { return _smallpacking; }
            set { _smallpacking = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool MiddlePacking
        {
            get { return _middlepacking; }
            set { _middlepacking = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int LinkWay
        {
            get { return _linkway; }
            set { _linkway = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsLinkProduct
        {
            get { return _islinkproduct; }
            set { _islinkproduct = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsLinkSupplier
        {
            get { return _islinksupplier; }
            set { _islinksupplier = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool SmallInto
        {
            get { return _smallinto; }
            set { _smallinto = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool MiddleInto
        {
            get { return _middleinto; }
            set { _middleinto = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool BigInto
        {
            get { return _biginto; }
            set { _biginto = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int IntoWay
        {
            get { return _intoway; }
            set { _intoway = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsIntoProduct
        {
            get { return _isintoproduct; }
            set { _isintoproduct = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsIntoSupplier
        {
            get { return _isintosupplier; }
            set { _isintosupplier = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool SmallOut
        {
            get { return _smallout; }
            set { _smallout = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool MiddleOut
        {
            get { return _middleout; }
            set { _middleout = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool BigOut
        {
            get { return _bigout; }
            set { _bigout = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int OutWay
        {
            get { return _outway; }
            set { _outway = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsOutProduct
        {
            get { return _isoutproduct; }
            set { _isoutproduct = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool SmallRtn
        {
            get { return _smallrtn; }
            set { _smallrtn = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool MiddleRtn
        {
            get { return _middlertn; }
            set { _middlertn = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool BigRtn
        {
            get { return _bigrtn; }
            set { _bigrtn = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool OrderRtn
        {
            get { return _orderrtn; }
            set { _orderrtn = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [PDAParam] (ScanProcess,IsLink,IsInto,IsOut,IsRtn,SmallPacking,MiddlePacking,LinkWay,IsLinkProduct,IsLinkSupplier,SmallInto,MiddleInto,BigInto,IntoWay,IsIntoProduct,IsIntoSupplier,SmallOut,MiddleOut,BigOut,OutWay,IsOutProduct,SmallRtn,MiddleRtn,BigRtn,OrderRtn) values (@ScanProcess,@IsLink,@IsInto,@IsOut,@IsRtn,@SmallPacking,@MiddlePacking,@LinkWay,@IsLinkProduct,@IsLinkSupplier,@SmallInto,@MiddleInto,@BigInto,@IntoWay,@IsIntoProduct,@IsIntoSupplier,@SmallOut,@MiddleOut,@BigOut,@OutWay,@IsOutProduct,@SmallRtn,@MiddleRtn,@BigRtn,@OrderRtn);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAParam]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ScanProcess",_scanprocess),
                new System.Data.SqlClient.SqlParameter("@IsLink",_islink),
                new System.Data.SqlClient.SqlParameter("@IsInto",_isinto),
                new System.Data.SqlClient.SqlParameter("@IsOut",_isout),
                new System.Data.SqlClient.SqlParameter("@IsRtn",_isrtn),
                new System.Data.SqlClient.SqlParameter("@SmallPacking",_smallpacking),
                new System.Data.SqlClient.SqlParameter("@MiddlePacking",_middlepacking),
                new System.Data.SqlClient.SqlParameter("@LinkWay",_linkway),
                new System.Data.SqlClient.SqlParameter("@IsLinkProduct",_islinkproduct),
                new System.Data.SqlClient.SqlParameter("@IsLinkSupplier",_islinksupplier),
                new System.Data.SqlClient.SqlParameter("@SmallInto",_smallinto),
                new System.Data.SqlClient.SqlParameter("@MiddleInto",_middleinto),
                new System.Data.SqlClient.SqlParameter("@BigInto",_biginto),
                new System.Data.SqlClient.SqlParameter("@IntoWay",_intoway),
                new System.Data.SqlClient.SqlParameter("@IsIntoProduct",_isintoproduct),
                new System.Data.SqlClient.SqlParameter("@IsIntoSupplier",_isintosupplier),
                new System.Data.SqlClient.SqlParameter("@SmallOut",_smallout),
                new System.Data.SqlClient.SqlParameter("@MiddleOut",_middleout),
                new System.Data.SqlClient.SqlParameter("@BigOut",_bigout),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@IsOutProduct",_isoutproduct),
                new System.Data.SqlClient.SqlParameter("@SmallRtn",_smallrtn),
                new System.Data.SqlClient.SqlParameter("@MiddleRtn",_middlertn),
                new System.Data.SqlClient.SqlParameter("@BigRtn",_bigrtn),
                new System.Data.SqlClient.SqlParameter("@OrderRtn",_orderrtn),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [PDAParam] (ScanProcess,IsLink,IsInto,IsOut,IsRtn,SmallPacking,MiddlePacking,LinkWay,IsLinkProduct,IsLinkSupplier,SmallInto,MiddleInto,BigInto,IntoWay,IsIntoProduct,IsIntoSupplier,SmallOut,MiddleOut,BigOut,OutWay,IsOutProduct,SmallRtn,MiddleRtn,BigRtn,OrderRtn) values (@ScanProcess,@IsLink,@IsInto,@IsOut,@IsRtn,@SmallPacking,@MiddlePacking,@LinkWay,@IsLinkProduct,@IsLinkSupplier,@SmallInto,@MiddleInto,@BigInto,@IntoWay,@IsIntoProduct,@IsIntoSupplier,@SmallOut,@MiddleOut,@BigOut,@OutWay,@IsOutProduct,@SmallRtn,@MiddleRtn,@BigRtn,@OrderRtn);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAParam]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ScanProcess",_scanprocess),
                new System.Data.SqlClient.SqlParameter("@IsLink",_islink),
                new System.Data.SqlClient.SqlParameter("@IsInto",_isinto),
                new System.Data.SqlClient.SqlParameter("@IsOut",_isout),
                new System.Data.SqlClient.SqlParameter("@IsRtn",_isrtn),
                new System.Data.SqlClient.SqlParameter("@SmallPacking",_smallpacking),
                new System.Data.SqlClient.SqlParameter("@MiddlePacking",_middlepacking),
                new System.Data.SqlClient.SqlParameter("@LinkWay",_linkway),
                new System.Data.SqlClient.SqlParameter("@IsLinkProduct",_islinkproduct),
                new System.Data.SqlClient.SqlParameter("@IsLinkSupplier",_islinksupplier),
                new System.Data.SqlClient.SqlParameter("@SmallInto",_smallinto),
                new System.Data.SqlClient.SqlParameter("@MiddleInto",_middleinto),
                new System.Data.SqlClient.SqlParameter("@BigInto",_biginto),
                new System.Data.SqlClient.SqlParameter("@IntoWay",_intoway),
                new System.Data.SqlClient.SqlParameter("@IsIntoProduct",_isintoproduct),
                new System.Data.SqlClient.SqlParameter("@IsIntoSupplier",_isintosupplier),
                new System.Data.SqlClient.SqlParameter("@SmallOut",_smallout),
                new System.Data.SqlClient.SqlParameter("@MiddleOut",_middleout),
                new System.Data.SqlClient.SqlParameter("@BigOut",_bigout),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@IsOutProduct",_isoutproduct),
                new System.Data.SqlClient.SqlParameter("@SmallRtn",_smallrtn),
                new System.Data.SqlClient.SqlParameter("@MiddleRtn",_middlertn),
                new System.Data.SqlClient.SqlParameter("@BigRtn",_bigrtn),
                new System.Data.SqlClient.SqlParameter("@OrderRtn",_orderrtn),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [PDAParam] SET ScanProcess=@ScanProcess,IsLink=@IsLink,IsInto=@IsInto,IsOut=@IsOut,IsRtn=@IsRtn,SmallPacking=@SmallPacking,MiddlePacking=@MiddlePacking,LinkWay=@LinkWay,IsLinkProduct=@IsLinkProduct,IsLinkSupplier=@IsLinkSupplier,SmallInto=@SmallInto,MiddleInto=@MiddleInto,BigInto=@BigInto,IntoWay=@IntoWay,IsIntoProduct=@IsIntoProduct,IsIntoSupplier=@IsIntoSupplier,SmallOut=@SmallOut,MiddleOut=@MiddleOut,BigOut=@BigOut,OutWay=@OutWay,IsOutProduct=@IsOutProduct,SmallRtn=@SmallRtn,MiddleRtn=@MiddleRtn,BigRtn=@BigRtn,OrderRtn=@OrderRtn WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ScanProcess",_scanprocess),
                new System.Data.SqlClient.SqlParameter("@IsLink",_islink),
                new System.Data.SqlClient.SqlParameter("@IsInto",_isinto),
                new System.Data.SqlClient.SqlParameter("@IsOut",_isout),
                new System.Data.SqlClient.SqlParameter("@IsRtn",_isrtn),
                new System.Data.SqlClient.SqlParameter("@SmallPacking",_smallpacking),
                new System.Data.SqlClient.SqlParameter("@MiddlePacking",_middlepacking),
                new System.Data.SqlClient.SqlParameter("@LinkWay",_linkway),
                new System.Data.SqlClient.SqlParameter("@IsLinkProduct",_islinkproduct),
                new System.Data.SqlClient.SqlParameter("@IsLinkSupplier",_islinksupplier),
                new System.Data.SqlClient.SqlParameter("@SmallInto",_smallinto),
                new System.Data.SqlClient.SqlParameter("@MiddleInto",_middleinto),
                new System.Data.SqlClient.SqlParameter("@BigInto",_biginto),
                new System.Data.SqlClient.SqlParameter("@IntoWay",_intoway),
                new System.Data.SqlClient.SqlParameter("@IsIntoProduct",_isintoproduct),
                new System.Data.SqlClient.SqlParameter("@IsIntoSupplier",_isintosupplier),
                new System.Data.SqlClient.SqlParameter("@SmallOut",_smallout),
                new System.Data.SqlClient.SqlParameter("@MiddleOut",_middleout),
                new System.Data.SqlClient.SqlParameter("@BigOut",_bigout),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@IsOutProduct",_isoutproduct),
                new System.Data.SqlClient.SqlParameter("@SmallRtn",_smallrtn),
                new System.Data.SqlClient.SqlParameter("@MiddleRtn",_middlertn),
                new System.Data.SqlClient.SqlParameter("@BigRtn",_bigrtn),
                new System.Data.SqlClient.SqlParameter("@OrderRtn",_orderrtn),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [PDAParam] SET ScanProcess=@ScanProcess,IsLink=@IsLink,IsInto=@IsInto,IsOut=@IsOut,IsRtn=@IsRtn,SmallPacking=@SmallPacking,MiddlePacking=@MiddlePacking,LinkWay=@LinkWay,IsLinkProduct=@IsLinkProduct,IsLinkSupplier=@IsLinkSupplier,SmallInto=@SmallInto,MiddleInto=@MiddleInto,BigInto=@BigInto,IntoWay=@IntoWay,IsIntoProduct=@IsIntoProduct,IsIntoSupplier=@IsIntoSupplier,SmallOut=@SmallOut,MiddleOut=@MiddleOut,BigOut=@BigOut,OutWay=@OutWay,IsOutProduct=@IsOutProduct,SmallRtn=@SmallRtn,MiddleRtn=@MiddleRtn,BigRtn=@BigRtn,OrderRtn=@OrderRtn WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ScanProcess",_scanprocess),
                new System.Data.SqlClient.SqlParameter("@IsLink",_islink),
                new System.Data.SqlClient.SqlParameter("@IsInto",_isinto),
                new System.Data.SqlClient.SqlParameter("@IsOut",_isout),
                new System.Data.SqlClient.SqlParameter("@IsRtn",_isrtn),
                new System.Data.SqlClient.SqlParameter("@SmallPacking",_smallpacking),
                new System.Data.SqlClient.SqlParameter("@MiddlePacking",_middlepacking),
                new System.Data.SqlClient.SqlParameter("@LinkWay",_linkway),
                new System.Data.SqlClient.SqlParameter("@IsLinkProduct",_islinkproduct),
                new System.Data.SqlClient.SqlParameter("@IsLinkSupplier",_islinksupplier),
                new System.Data.SqlClient.SqlParameter("@SmallInto",_smallinto),
                new System.Data.SqlClient.SqlParameter("@MiddleInto",_middleinto),
                new System.Data.SqlClient.SqlParameter("@BigInto",_biginto),
                new System.Data.SqlClient.SqlParameter("@IntoWay",_intoway),
                new System.Data.SqlClient.SqlParameter("@IsIntoProduct",_isintoproduct),
                new System.Data.SqlClient.SqlParameter("@IsIntoSupplier",_isintosupplier),
                new System.Data.SqlClient.SqlParameter("@SmallOut",_smallout),
                new System.Data.SqlClient.SqlParameter("@MiddleOut",_middleout),
                new System.Data.SqlClient.SqlParameter("@BigOut",_bigout),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@IsOutProduct",_isoutproduct),
                new System.Data.SqlClient.SqlParameter("@SmallRtn",_smallrtn),
                new System.Data.SqlClient.SqlParameter("@MiddleRtn",_middlertn),
                new System.Data.SqlClient.SqlParameter("@BigRtn",_bigrtn),
                new System.Data.SqlClient.SqlParameter("@OrderRtn",_orderrtn),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static PDAParam GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ScanProcess,IsLink,IsInto,IsOut,IsRtn,SmallPacking,MiddlePacking,LinkWay,IsLinkProduct,IsLinkSupplier,SmallInto,MiddleInto,BigInto,IntoWay,IsIntoProduct,IsIntoSupplier,SmallOut,MiddleOut,BigOut,OutWay,IsOutProduct,SmallRtn,MiddleRtn,BigRtn,OrderRtn FROM [PDAParam] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<PDAParam>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ScanProcess,IsLink,IsInto,IsOut,IsRtn,SmallPacking,MiddlePacking,LinkWay,IsLinkProduct,IsLinkSupplier,SmallInto,MiddleInto,BigInto,IntoWay,IsIntoProduct,IsIntoSupplier,SmallOut,MiddleOut,BigOut,OutWay,IsOutProduct,SmallRtn,MiddleRtn,BigRtn,OrderRtn FROM [PDAParam] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [PDAParam] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [PDAParam] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAParam> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ScanProcess,IsLink,IsInto,IsOut,IsRtn,SmallPacking,MiddlePacking,LinkWay,IsLinkProduct,IsLinkSupplier,SmallInto,MiddleInto,BigInto,IntoWay,IsIntoProduct,IsIntoSupplier,SmallOut,MiddleOut,BigOut,OutWay,IsOutProduct,SmallRtn,MiddleRtn,BigRtn,OrderRtn,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [PDAParam] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAParam>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAParam> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ScanProcess,IsLink,IsInto,IsOut,IsRtn,SmallPacking,MiddlePacking,LinkWay,IsLinkProduct,IsLinkSupplier,SmallInto,MiddleInto,BigInto,IntoWay,IsIntoProduct,IsIntoSupplier,SmallOut,MiddleOut,BigOut,OutWay,IsOutProduct,SmallRtn,MiddleRtn,BigRtn,OrderRtn FROM [PDAParam] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAParam>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<PDAParam> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ScanProcess,IsLink,IsInto,IsOut,IsRtn,SmallPacking,MiddlePacking,LinkWay,IsLinkProduct,IsLinkSupplier,SmallInto,MiddleInto,BigInto,IntoWay,IsIntoProduct,IsIntoSupplier,SmallOut,MiddleOut,BigOut,OutWay,IsOutProduct,SmallRtn,MiddleRtn,BigRtn,OrderRtn FROM [PDAParam]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAParam>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class LotteryPrizes 
    {
        #region Fields
        //public string str = "PrizeLevel:30|PrizeName:30|PrizeImgUrl:200";
        private int _id;
        private int _activityid;
        private string _prizelevel = string.Empty;
        private string _prizename = string.Empty;
        private string _prizeimgurl = string.Empty;
        private decimal _winningrate;
        private int _wontime;
        private bool _isvalid;
        private bool _isfinish;
        private bool _isnot;
        private int _prizeqty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 活动ID
        /// </summary>
        public int ActivityID
        {
            get { return _activityid; }
            set { _activityid = value; }
        }

        /// <summary>
        /// 奖品等级
        /// </summary>
        public string PrizeLevel
        {
            get { return _prizelevel; }
            set { _prizelevel = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 奖品名称
        /// </summary>
        public string PrizeName
        {
            get { return _prizename; }
            set { _prizename = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 奖品图片
        /// </summary>
        public string PrizeImgUrl
        {
            get { return _prizeimgurl; }
            set { _prizeimgurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 中奖率 小数
        /// </summary>
        public decimal WinningRate
        {
            get { return _winningrate; }
            set { _winningrate = value; }
        }

        /// <summary>
        /// 已中次数
        /// </summary>
        public int WonTime
        {
            get { return _wontime; }
            set { _wontime = value; }
        }

        /// <summary>
        /// 是否有效
        /// </summary>
        public bool IsValid
        {
            get { return _isvalid; }
            set { _isvalid = value; }
        }

        /// <summary>
        /// 是否编辑完成
        /// </summary>
        public bool IsFinish
        {
            get { return _isfinish; }
            set { _isfinish = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsNot
        {
            get { return _isnot; }
            set { _isnot = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int PrizeQty
        {
            get { return _prizeqty; }
            set { _prizeqty = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [LotteryPrizes] (ActivityID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,WonTime,IsValid,IsFinish,IsNot,PrizeQty) values (@ActivityID,@PrizeLevel,@PrizeName,@PrizeImgUrl,@WinningRate,@WonTime,@IsValid,@IsFinish,@IsNot,@PrizeQty);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryPrizes]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@PrizeLevel",_prizelevel),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@PrizeImgUrl",_prizeimgurl),
                new System.Data.SqlClient.SqlParameter("@WinningRate",_winningrate),
                new System.Data.SqlClient.SqlParameter("@WonTime",_wontime),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsFinish",_isfinish),
                new System.Data.SqlClient.SqlParameter("@IsNot",_isnot),
                new System.Data.SqlClient.SqlParameter("@PrizeQty",_prizeqty),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [LotteryPrizes] (ActivityID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,WonTime,IsValid,IsFinish,IsNot,PrizeQty) values (@ActivityID,@PrizeLevel,@PrizeName,@PrizeImgUrl,@WinningRate,@WonTime,@IsValid,@IsFinish,@IsNot,@PrizeQty);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryPrizes]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@PrizeLevel",_prizelevel),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@PrizeImgUrl",_prizeimgurl),
                new System.Data.SqlClient.SqlParameter("@WinningRate",_winningrate),
                new System.Data.SqlClient.SqlParameter("@WonTime",_wontime),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsFinish",_isfinish),
                new System.Data.SqlClient.SqlParameter("@IsNot",_isnot),
                new System.Data.SqlClient.SqlParameter("@PrizeQty",_prizeqty),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [LotteryPrizes] SET ActivityID=@ActivityID,PrizeLevel=@PrizeLevel,PrizeName=@PrizeName,PrizeImgUrl=@PrizeImgUrl,WinningRate=@WinningRate,WonTime=@WonTime,IsValid=@IsValid,IsFinish=@IsFinish,IsNot=@IsNot,PrizeQty=@PrizeQty WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@PrizeLevel",_prizelevel),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@PrizeImgUrl",_prizeimgurl),
                new System.Data.SqlClient.SqlParameter("@WinningRate",_winningrate),
                new System.Data.SqlClient.SqlParameter("@WonTime",_wontime),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsFinish",_isfinish),
                new System.Data.SqlClient.SqlParameter("@IsNot",_isnot),
                new System.Data.SqlClient.SqlParameter("@PrizeQty",_prizeqty),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [LotteryPrizes] SET ActivityID=@ActivityID,PrizeLevel=@PrizeLevel,PrizeName=@PrizeName,PrizeImgUrl=@PrizeImgUrl,WinningRate=@WinningRate,WonTime=@WonTime,IsValid=@IsValid,IsFinish=@IsFinish,IsNot=@IsNot,PrizeQty=@PrizeQty WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@PrizeLevel",_prizelevel),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@PrizeImgUrl",_prizeimgurl),
                new System.Data.SqlClient.SqlParameter("@WinningRate",_winningrate),
                new System.Data.SqlClient.SqlParameter("@WonTime",_wontime),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@IsFinish",_isfinish),
                new System.Data.SqlClient.SqlParameter("@IsNot",_isnot),
                new System.Data.SqlClient.SqlParameter("@PrizeQty",_prizeqty),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static LotteryPrizes GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ActivityID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,WonTime,IsValid,IsFinish,IsNot,PrizeQty FROM [LotteryPrizes] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<LotteryPrizes>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ActivityID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,WonTime,IsValid,IsFinish,IsNot,PrizeQty FROM [LotteryPrizes] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [LotteryPrizes] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [LotteryPrizes] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryPrizes> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ActivityID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,WonTime,IsValid,IsFinish,IsNot,PrizeQty,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [LotteryPrizes] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryPrizes>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryPrizes> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ActivityID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,WonTime,IsValid,IsFinish,IsNot,PrizeQty FROM [LotteryPrizes] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryPrizes>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<LotteryPrizes> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ActivityID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,WonTime,IsValid,IsFinish,IsNot,PrizeQty FROM [LotteryPrizes]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryPrizes>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<LotteryPrizes> GetEntitysByActivityID(int activityid)
    	{
    		string strSql = "SELECT ID,ActivityID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,WonTime,IsValid,IsFinish,IsNot,PrizeQty FROM [LotteryPrizes] WHERE ActivityID=@ActivityID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ActivityID",activityid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryPrizes>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class ProDetailImg 
    {
        #region Fields
        //public string str = "ImgUrl:2147483647|UserName:2147483647";
        private int _id;
        private string _imgurl = string.Empty;
        private int _goodsid;
        private string _username = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 图片链接
        /// </summary>
        public string ImgUrl
        {
            get { return _imgurl; }
            set { _imgurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 商品编号
        /// </summary>
        public int GoodsID
        {
            get { return _goodsid; }
            set { _goodsid = value; }
        }

        /// <summary>
        /// 用户名
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 上传时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [ProDetailImg] (ImgUrl,GoodsID,UserName,Dat) values (@ImgUrl,@GoodsID,@UserName,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ProDetailImg]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [ProDetailImg] (ImgUrl,GoodsID,UserName,Dat) values (@ImgUrl,@GoodsID,@UserName,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ProDetailImg]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [ProDetailImg] SET ImgUrl=@ImgUrl,GoodsID=@GoodsID,UserName=@UserName,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [ProDetailImg] SET ImgUrl=@ImgUrl,GoodsID=@GoodsID,UserName=@UserName,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static ProDetailImg GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ImgUrl,GoodsID,UserName,Dat FROM [ProDetailImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<ProDetailImg>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ImgUrl,GoodsID,UserName,Dat FROM [ProDetailImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [ProDetailImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [ProDetailImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<ProDetailImg> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ImgUrl,GoodsID,UserName,Dat,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [ProDetailImg] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<ProDetailImg>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<ProDetailImg> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ImgUrl,GoodsID,UserName,Dat FROM [ProDetailImg] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<ProDetailImg>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<ProDetailImg> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ImgUrl,GoodsID,UserName,Dat FROM [ProDetailImg]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<ProDetailImg>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<ProDetailImg> GetEntitysByGoodsID(int goodsid)
    	{
    		string strSql = "SELECT ID,ImgUrl,GoodsID,UserName,Dat FROM [ProDetailImg] WHERE GoodsID=@GoodsID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@GoodsID",goodsid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<ProDetailImg>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class Prize 
    {
        #region Fields
        //public string str = "Lever:50|Name:50|Remark:200";
        private int _id;
        private string _lever = string.Empty;
        private string _name = string.Empty;
        private string _remark = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Lever
        {
            get { return _lever; }
            set { _lever = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Remark
        {
            get { return _remark; }
            set { _remark = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [Prize] (Lever,Name,Remark) values (@Lever,@Name,@Remark);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Prize]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Lever",_lever),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [Prize] (Lever,Name,Remark) values (@Lever,@Name,@Remark);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Prize]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Lever",_lever),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [Prize] SET Lever=@Lever,Name=@Name,Remark=@Remark WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Lever",_lever),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [Prize] SET Lever=@Lever,Name=@Name,Remark=@Remark WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Lever",_lever),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static Prize GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Lever,Name,Remark FROM [Prize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<Prize>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Lever,Name,Remark FROM [Prize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [Prize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [Prize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Prize> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Lever,Name,Remark,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [Prize] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Prize>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Prize> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Lever,Name,Remark FROM [Prize] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Prize>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<Prize> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Lever,Name,Remark FROM [Prize]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<Prize>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class OrderPost 
    {
        #region Fields
        //public string str = "OrderNo:2147483647|PostName:50|PostNo:50";
        private int _id;
        private string _orderno = string.Empty;
        private int _codeid;
        private string _postname = string.Empty;
        private string _postno = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 订单号
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 快递基础表ID
        /// </summary>
        public int CodeID
        {
            get { return _codeid; }
            set { _codeid = value; }
        }

        /// <summary>
        /// 快递名称
        /// </summary>
        public string PostName
        {
            get { return _postname; }
            set { _postname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 快递单号
        /// </summary>
        public string PostNo
        {
            get { return _postno; }
            set { _postno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 发货时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [OrderPost] (OrderNo,CodeID,PostName,PostNo,Dat) values (@OrderNo,@CodeID,@PostName,@PostNo,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [OrderPost]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@CodeID",_codeid),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostNo",_postno),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [OrderPost] (OrderNo,CodeID,PostName,PostNo,Dat) values (@OrderNo,@CodeID,@PostName,@PostNo,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [OrderPost]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@CodeID",_codeid),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostNo",_postno),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [OrderPost] SET OrderNo=@OrderNo,CodeID=@CodeID,PostName=@PostName,PostNo=@PostNo,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@CodeID",_codeid),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostNo",_postno),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [OrderPost] SET OrderNo=@OrderNo,CodeID=@CodeID,PostName=@PostName,PostNo=@PostNo,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@CodeID",_codeid),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostNo",_postno),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static OrderPost GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,OrderNo,CodeID,PostName,PostNo,Dat FROM [OrderPost] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<OrderPost>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,OrderNo,CodeID,PostName,PostNo,Dat FROM [OrderPost] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [OrderPost] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [OrderPost] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<OrderPost> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,CodeID,PostName,PostNo,Dat,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [OrderPost] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<OrderPost>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<OrderPost> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,CodeID,PostName,PostNo,Dat FROM [OrderPost] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<OrderPost>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<OrderPost> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,OrderNo,CodeID,PostName,PostNo,Dat FROM [OrderPost]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<OrderPost>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<OrderPost> GetEntitysByCodeID(int codeid)
    	{
    		string strSql = "SELECT ID,OrderNo,CodeID,PostName,PostNo,Dat FROM [OrderPost] WHERE CodeID=@CodeID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@CodeID",codeid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<OrderPost>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class LotteryRecord 
    {
        #region Fields
        //public string str = "SerialNumber:50|UserName:20|ActivityTitle:30|PrizeLevel:30|PrizeName:30|PrizeImgUrl:200|IntegralCode:50|Name:50|Phone:30|States:50|RecAddress:300|UserOpenId:200|UserWxNo:50|UserWxName:100|UserWxImg:500|redArea:50|chief:50|ip:50|province:50";
        private int _id;
        private string _serialnumber = string.Empty;
        private string _username = string.Empty;
        private int _activityid;
        private string _activitytitle = string.Empty;
        private int _prizeid;
        private string _prizelevel = string.Empty;
        private string _prizename = string.Empty;
        private string _prizeimgurl = string.Empty;
        private decimal _winningrate;
        private DateTime _dat = new DateTime(1900,1,1);
        private string _integralcode = string.Empty;
        private string _name = string.Empty;
        private string _phone = string.Empty;
        private string _states = string.Empty;
        private string _recaddress = string.Empty;
        private string _useropenid = string.Empty;
        private bool _isnot;
        private string _userwxno = string.Empty;
        private string _userwxname = string.Empty;
        private string _userwximg = string.Empty;
        private string _redarea = string.Empty;
        private decimal _redmoney;
        private string _chief = string.Empty;
        private string _ip = string.Empty;
        private string _province = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 流水号
        /// </summary>
        public string SerialNumber
        {
            get { return _serialnumber; }
            set { _serialnumber = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// C_User的UserName   客户ID
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 活动ID
        /// </summary>
        public int ActivityID
        {
            get { return _activityid; }
            set { _activityid = value; }
        }

        /// <summary>
        /// 活动名称
        /// </summary>
        public string ActivityTitle
        {
            get { return _activitytitle; }
            set { _activitytitle = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 奖品ID
        /// </summary>
        public int PrizeID
        {
            get { return _prizeid; }
            set { _prizeid = value; }
        }

        /// <summary>
        /// 奖品等级
        /// </summary>
        public string PrizeLevel
        {
            get { return _prizelevel; }
            set { _prizelevel = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 奖品名称
        /// </summary>
        public string PrizeName
        {
            get { return _prizename; }
            set { _prizename = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 奖品图片
        /// </summary>
        public string PrizeImgUrl
        {
            get { return _prizeimgurl; }
            set { _prizeimgurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 中奖率  小数
        /// </summary>
        public decimal WinningRate
        {
            get { return _winningrate; }
            set { _winningrate = value; }
        }

        /// <summary>
        /// 获奖时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 获奖防伪码
        /// </summary>
        public string IntegralCode
        {
            get { return _integralcode; }
            set { _integralcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Phone
        {
            get { return _phone; }
            set { _phone = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 已发放或未发放
        /// </summary>
        public string States
        {
            get { return _states; }
            set { _states = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string RecAddress
        {
            get { return _recaddress; }
            set { _recaddress = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 300); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserOpenId
        {
            get { return _useropenid; }
            set { _useropenid = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsNot
        {
            get { return _isnot; }
            set { _isnot = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserWxNo
        {
            get { return _userwxno; }
            set { _userwxno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserWxName
        {
            get { return _userwxname; }
            set { _userwxname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 100); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserWxImg
        {
            get { return _userwximg; }
            set { _userwximg = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string redArea
        {
            get { return _redarea; }
            set { _redarea = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal redMoney
        {
            get { return _redmoney; }
            set { _redmoney = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string chief
        {
            get { return _chief; }
            set { _chief = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ip
        {
            get { return _ip; }
            set { _ip = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string province
        {
            get { return _province; }
            set { _province = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [LotteryRecord] (SerialNumber,UserName,ActivityID,ActivityTitle,PrizeID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,Dat,IntegralCode,Name,Phone,States,RecAddress,UserOpenId,IsNot,UserWxNo,UserWxName,UserWxImg,redArea,redMoney,chief,ip,province) values (@SerialNumber,@UserName,@ActivityID,@ActivityTitle,@PrizeID,@PrizeLevel,@PrizeName,@PrizeImgUrl,@WinningRate,@Dat,@IntegralCode,@Name,@Phone,@States,@RecAddress,@UserOpenId,@IsNot,@UserWxNo,@UserWxName,@UserWxImg,@redArea,@redMoney,@chief,@ip,@province);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryRecord]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@SerialNumber",_serialnumber),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@ActivityTitle",_activitytitle),
                new System.Data.SqlClient.SqlParameter("@PrizeID",_prizeid),
                new System.Data.SqlClient.SqlParameter("@PrizeLevel",_prizelevel),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@PrizeImgUrl",_prizeimgurl),
                new System.Data.SqlClient.SqlParameter("@WinningRate",_winningrate),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@States",_states),
                new System.Data.SqlClient.SqlParameter("@RecAddress",_recaddress),
                new System.Data.SqlClient.SqlParameter("@UserOpenId",_useropenid),
                new System.Data.SqlClient.SqlParameter("@IsNot",_isnot),
                new System.Data.SqlClient.SqlParameter("@UserWxNo",_userwxno),
                new System.Data.SqlClient.SqlParameter("@UserWxName",_userwxname),
                new System.Data.SqlClient.SqlParameter("@UserWxImg",_userwximg),
                new System.Data.SqlClient.SqlParameter("@redArea",_redarea),
                new System.Data.SqlClient.SqlParameter("@redMoney",_redmoney),
                new System.Data.SqlClient.SqlParameter("@chief",_chief),
                new System.Data.SqlClient.SqlParameter("@ip",_ip),
                new System.Data.SqlClient.SqlParameter("@province",_province),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [LotteryRecord] (SerialNumber,UserName,ActivityID,ActivityTitle,PrizeID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,Dat,IntegralCode,Name,Phone,States,RecAddress,UserOpenId,IsNot,UserWxNo,UserWxName,UserWxImg,redArea,redMoney,chief,ip,province) values (@SerialNumber,@UserName,@ActivityID,@ActivityTitle,@PrizeID,@PrizeLevel,@PrizeName,@PrizeImgUrl,@WinningRate,@Dat,@IntegralCode,@Name,@Phone,@States,@RecAddress,@UserOpenId,@IsNot,@UserWxNo,@UserWxName,@UserWxImg,@redArea,@redMoney,@chief,@ip,@province);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryRecord]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@SerialNumber",_serialnumber),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@ActivityTitle",_activitytitle),
                new System.Data.SqlClient.SqlParameter("@PrizeID",_prizeid),
                new System.Data.SqlClient.SqlParameter("@PrizeLevel",_prizelevel),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@PrizeImgUrl",_prizeimgurl),
                new System.Data.SqlClient.SqlParameter("@WinningRate",_winningrate),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@States",_states),
                new System.Data.SqlClient.SqlParameter("@RecAddress",_recaddress),
                new System.Data.SqlClient.SqlParameter("@UserOpenId",_useropenid),
                new System.Data.SqlClient.SqlParameter("@IsNot",_isnot),
                new System.Data.SqlClient.SqlParameter("@UserWxNo",_userwxno),
                new System.Data.SqlClient.SqlParameter("@UserWxName",_userwxname),
                new System.Data.SqlClient.SqlParameter("@UserWxImg",_userwximg),
                new System.Data.SqlClient.SqlParameter("@redArea",_redarea),
                new System.Data.SqlClient.SqlParameter("@redMoney",_redmoney),
                new System.Data.SqlClient.SqlParameter("@chief",_chief),
                new System.Data.SqlClient.SqlParameter("@ip",_ip),
                new System.Data.SqlClient.SqlParameter("@province",_province),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [LotteryRecord] SET SerialNumber=@SerialNumber,UserName=@UserName,ActivityID=@ActivityID,ActivityTitle=@ActivityTitle,PrizeID=@PrizeID,PrizeLevel=@PrizeLevel,PrizeName=@PrizeName,PrizeImgUrl=@PrizeImgUrl,WinningRate=@WinningRate,Dat=@Dat,IntegralCode=@IntegralCode,Name=@Name,Phone=@Phone,States=@States,RecAddress=@RecAddress,UserOpenId=@UserOpenId,IsNot=@IsNot,UserWxNo=@UserWxNo,UserWxName=@UserWxName,UserWxImg=@UserWxImg,redArea=@redArea,redMoney=@redMoney,chief=@chief,ip=@ip,province=@province WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@SerialNumber",_serialnumber),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@ActivityTitle",_activitytitle),
                new System.Data.SqlClient.SqlParameter("@PrizeID",_prizeid),
                new System.Data.SqlClient.SqlParameter("@PrizeLevel",_prizelevel),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@PrizeImgUrl",_prizeimgurl),
                new System.Data.SqlClient.SqlParameter("@WinningRate",_winningrate),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@States",_states),
                new System.Data.SqlClient.SqlParameter("@RecAddress",_recaddress),
                new System.Data.SqlClient.SqlParameter("@UserOpenId",_useropenid),
                new System.Data.SqlClient.SqlParameter("@IsNot",_isnot),
                new System.Data.SqlClient.SqlParameter("@UserWxNo",_userwxno),
                new System.Data.SqlClient.SqlParameter("@UserWxName",_userwxname),
                new System.Data.SqlClient.SqlParameter("@UserWxImg",_userwximg),
                new System.Data.SqlClient.SqlParameter("@redArea",_redarea),
                new System.Data.SqlClient.SqlParameter("@redMoney",_redmoney),
                new System.Data.SqlClient.SqlParameter("@chief",_chief),
                new System.Data.SqlClient.SqlParameter("@ip",_ip),
                new System.Data.SqlClient.SqlParameter("@province",_province),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [LotteryRecord] SET SerialNumber=@SerialNumber,UserName=@UserName,ActivityID=@ActivityID,ActivityTitle=@ActivityTitle,PrizeID=@PrizeID,PrizeLevel=@PrizeLevel,PrizeName=@PrizeName,PrizeImgUrl=@PrizeImgUrl,WinningRate=@WinningRate,Dat=@Dat,IntegralCode=@IntegralCode,Name=@Name,Phone=@Phone,States=@States,RecAddress=@RecAddress,UserOpenId=@UserOpenId,IsNot=@IsNot,UserWxNo=@UserWxNo,UserWxName=@UserWxName,UserWxImg=@UserWxImg,redArea=@redArea,redMoney=@redMoney,chief=@chief,ip=@ip,province=@province WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@SerialNumber",_serialnumber),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ActivityID",_activityid),
                new System.Data.SqlClient.SqlParameter("@ActivityTitle",_activitytitle),
                new System.Data.SqlClient.SqlParameter("@PrizeID",_prizeid),
                new System.Data.SqlClient.SqlParameter("@PrizeLevel",_prizelevel),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@PrizeImgUrl",_prizeimgurl),
                new System.Data.SqlClient.SqlParameter("@WinningRate",_winningrate),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@States",_states),
                new System.Data.SqlClient.SqlParameter("@RecAddress",_recaddress),
                new System.Data.SqlClient.SqlParameter("@UserOpenId",_useropenid),
                new System.Data.SqlClient.SqlParameter("@IsNot",_isnot),
                new System.Data.SqlClient.SqlParameter("@UserWxNo",_userwxno),
                new System.Data.SqlClient.SqlParameter("@UserWxName",_userwxname),
                new System.Data.SqlClient.SqlParameter("@UserWxImg",_userwximg),
                new System.Data.SqlClient.SqlParameter("@redArea",_redarea),
                new System.Data.SqlClient.SqlParameter("@redMoney",_redmoney),
                new System.Data.SqlClient.SqlParameter("@chief",_chief),
                new System.Data.SqlClient.SqlParameter("@ip",_ip),
                new System.Data.SqlClient.SqlParameter("@province",_province),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static LotteryRecord GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,SerialNumber,UserName,ActivityID,ActivityTitle,PrizeID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,Dat,IntegralCode,Name,Phone,States,RecAddress,UserOpenId,IsNot,UserWxNo,UserWxName,UserWxImg,redArea,redMoney,chief,ip,province FROM [LotteryRecord] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<LotteryRecord>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,SerialNumber,UserName,ActivityID,ActivityTitle,PrizeID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,Dat,IntegralCode,Name,Phone,States,RecAddress,UserOpenId,IsNot,UserWxNo,UserWxName,UserWxImg,redArea,redMoney,chief,ip,province FROM [LotteryRecord] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [LotteryRecord] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [LotteryRecord] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryRecord> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,SerialNumber,UserName,ActivityID,ActivityTitle,PrizeID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,Dat,IntegralCode,Name,Phone,States,RecAddress,UserOpenId,IsNot,UserWxNo,UserWxName,UserWxImg,redArea,redMoney,chief,ip,province,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [LotteryRecord] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryRecord>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryRecord> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,SerialNumber,UserName,ActivityID,ActivityTitle,PrizeID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,Dat,IntegralCode,Name,Phone,States,RecAddress,UserOpenId,IsNot,UserWxNo,UserWxName,UserWxImg,redArea,redMoney,chief,ip,province FROM [LotteryRecord] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryRecord>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<LotteryRecord> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,SerialNumber,UserName,ActivityID,ActivityTitle,PrizeID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,Dat,IntegralCode,Name,Phone,States,RecAddress,UserOpenId,IsNot,UserWxNo,UserWxName,UserWxImg,redArea,redMoney,chief,ip,province FROM [LotteryRecord]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryRecord>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<LotteryRecord> GetEntitysByActivityID(int activityid)
    	{
    		string strSql = "SELECT ID,SerialNumber,UserName,ActivityID,ActivityTitle,PrizeID,PrizeLevel,PrizeName,PrizeImgUrl,WinningRate,Dat,IntegralCode,Name,Phone,States,RecAddress,UserOpenId,IsNot,UserWxNo,UserWxName,UserWxImg,redArea,redMoney,chief,ip,province FROM [LotteryRecord] WHERE ActivityID=@ActivityID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ActivityID",activityid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryRecord>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class OrderLog 
    {
        #region Fields
        //public string str = "OrderNo:2147483647|LogType:50|Logs:2147483647|Oper:500";
        private int _id;
        private string _orderno = string.Empty;
        private string _logtype = string.Empty;
        private string _logs = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        private string _oper = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 订单号
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 日志内容
        /// </summary>
        public string LogType
        {
            get { return _logtype; }
            set { _logtype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 日志内容
        /// </summary>
        public string Logs
        {
            get { return _logs; }
            set { _logs = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 操作时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 操作人
        /// </summary>
        public string Oper
        {
            get { return _oper; }
            set { _oper = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [OrderLog] (OrderNo,LogType,Logs,Dat,Oper) values (@OrderNo,@LogType,@Logs,@Dat,@Oper);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [OrderLog]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@LogType",_logtype),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [OrderLog] (OrderNo,LogType,Logs,Dat,Oper) values (@OrderNo,@LogType,@Logs,@Dat,@Oper);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [OrderLog]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@LogType",_logtype),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [OrderLog] SET OrderNo=@OrderNo,LogType=@LogType,Logs=@Logs,Dat=@Dat,Oper=@Oper WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@LogType",_logtype),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [OrderLog] SET OrderNo=@OrderNo,LogType=@LogType,Logs=@Logs,Dat=@Dat,Oper=@Oper WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@LogType",_logtype),
                new System.Data.SqlClient.SqlParameter("@Logs",_logs),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@Oper",_oper),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static OrderLog GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,OrderNo,LogType,Logs,Dat,Oper FROM [OrderLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<OrderLog>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,OrderNo,LogType,Logs,Dat,Oper FROM [OrderLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [OrderLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [OrderLog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<OrderLog> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,LogType,Logs,Dat,Oper,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [OrderLog] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<OrderLog>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<OrderLog> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,LogType,Logs,Dat,Oper FROM [OrderLog] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<OrderLog>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<OrderLog> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,OrderNo,LogType,Logs,Dat,Oper FROM [OrderLog]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<OrderLog>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class Order 
    {
        #region Fields
        //public string str = "OrderNo:30|OrderName:50|OrderImgSrc:200|OrderState:50|PayState:50|AuditState:50|SendState:50|PayType:500|PayBank:500|UserName:20|ParentUser:20|PayUserName:20|OrderMan:50|OrderMobile:50|Address:200|Remark:500|E_UserName:50|E_State:50|E_OrderNo:50";
        private int _id;
        private string _orderno = string.Empty;
        private string _ordername = string.Empty;
        private string _orderimgsrc = string.Empty;
        private decimal _sumprice;
        private DateTime _datcreate = new DateTime(1900,1,1);
        private string _orderstate = string.Empty;
        private string _paystate = string.Empty;
        private decimal _payprice;
        private DateTime _datpay = new DateTime(1900,1,1);
        private DateTime _datsend = new DateTime(1900,1,1);
        private string _auditstate = string.Empty;
        private string _sendstate = string.Empty;
        private DateTime _dataudit = new DateTime(1900,1,1);
        private DateTime _datfinish = new DateTime(1900,1,1);
        private string _paytype = string.Empty;
        private string _paybank = string.Empty;
        private string _username = string.Empty;
        private string _parentuser = string.Empty;
        private string _payusername = string.Empty;
        private int _mailid;
        private decimal _postage;
        private string _orderman = string.Empty;
        private string _ordermobile = string.Empty;
        private string _address = string.Empty;
        private string _remark = string.Empty;
        private int _scalecount;
        private int _productcnt;
        private string _e_username = string.Empty;
        private string _e_state = string.Empty;
        private string _e_orderno = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 订单号，不能重复
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 订单名称
        /// </summary>
        public string OrderName
        {
            get { return _ordername; }
            set { _ordername = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 订单图片src（首个商品主图）
        /// </summary>
        public string OrderImgSrc
        {
            get { return _orderimgsrc; }
            set { _orderimgsrc = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 订单总价
        /// </summary>
        public decimal SumPrice
        {
            get { return _sumprice; }
            set { _sumprice = value; }
        }

        /// <summary>
        /// 订单创建时间
        /// </summary>
        public DateTime DatCreate
        {
            get { return _datcreate; }
            set { _datcreate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 订单状态（待审核/待发货/已发货/已完成/已取消）
        /// </summary>
        public string OrderState
        {
            get { return _orderstate; }
            set { _orderstate = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 支付状态  已支付/未支付/已退款
        /// </summary>
        public string PayState
        {
            get { return _paystate; }
            set { _paystate = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 支付金额
        /// </summary>
        public decimal PayPrice
        {
            get { return _payprice; }
            set { _payprice = value; }
        }

        /// <summary>
        /// 支付时间
        /// </summary>
        public DateTime DatPay
        {
            get { return _datpay; }
            set { _datpay = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 发货时间
        /// </summary>
        public DateTime DatSend
        {
            get { return _datsend; }
            set { _datsend = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 审核状态：未审核/已审核
        /// </summary>
        public string AuditState
        {
            get { return _auditstate; }
            set { _auditstate = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 发货状态  已发货/未发货
        /// </summary>
        public string SendState
        {
            get { return _sendstate; }
            set { _sendstate = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 审核时间
        /// </summary>
        public DateTime DatAudit
        {
            get { return _dataudit; }
            set { _dataudit = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 交易完成时间
        /// </summary>
        public DateTime DatFinish
        {
            get { return _datfinish; }
            set { _datfinish = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 支付方式
        /// </summary>
        public string PayType
        {
            get { return _paytype; }
            set { _paytype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 支付银行
        /// </summary>
        public string PayBank
        {
            get { return _paybank; }
            set { _paybank = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 用户名
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 上级UserName
        /// </summary>
        public string ParentUser
        {
            get { return _parentuser; }
            set { _parentuser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 支付人用户名
        /// </summary>
        public string PayUserName
        {
            get { return _payusername; }
            set { _payusername = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 邮寄ID，不是邮寄则为0
        /// </summary>
        public int MailID
        {
            get { return _mailid; }
            set { _mailid = value; }
        }

        /// <summary>
        /// 邮费（元）
        /// </summary>
        public decimal Postage
        {
            get { return _postage; }
            set { _postage = value; }
        }

        /// <summary>
        /// 订单联系人姓名
        /// </summary>
        public string OrderMan
        {
            get { return _orderman; }
            set { _orderman = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 订单联系人手机号
        /// </summary>
        public string OrderMobile
        {
            get { return _ordermobile; }
            set { _ordermobile = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 收货地址
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 订单备注
        /// </summary>
        public string Remark
        {
            get { return _remark; }
            set { _remark = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ScaleCount
        {
            get { return _scalecount; }
            set { _scalecount = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ProductCnt
        {
            get { return _productcnt; }
            set { _productcnt = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string E_UserName
        {
            get { return _e_username; }
            set { _e_username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string E_State
        {
            get { return _e_state; }
            set { _e_state = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string E_OrderNo
        {
            get { return _e_orderno; }
            set { _e_orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [Order] (OrderNo,OrderName,OrderImgSrc,SumPrice,DatCreate,OrderState,PayState,PayPrice,DatPay,DatSend,AuditState,SendState,DatAudit,DatFinish,PayType,PayBank,UserName,ParentUser,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,ScaleCount,ProductCnt,E_UserName,E_State,E_OrderNo) values (@OrderNo,@OrderName,@OrderImgSrc,@SumPrice,@DatCreate,@OrderState,@PayState,@PayPrice,@DatPay,@DatSend,@AuditState,@SendState,@DatAudit,@DatFinish,@PayType,@PayBank,@UserName,@ParentUser,@PayUserName,@MailID,@Postage,@OrderMan,@OrderMobile,@Address,@Remark,@ScaleCount,@ProductCnt,@E_UserName,@E_State,@E_OrderNo);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Order]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@OrderName",_ordername),
                new System.Data.SqlClient.SqlParameter("@OrderImgSrc",_orderimgsrc),
                new System.Data.SqlClient.SqlParameter("@SumPrice",_sumprice),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@OrderState",_orderstate),
                new System.Data.SqlClient.SqlParameter("@PayState",_paystate),
                new System.Data.SqlClient.SqlParameter("@PayPrice",_payprice),
                new System.Data.SqlClient.SqlParameter("@DatPay",_datpay),
                new System.Data.SqlClient.SqlParameter("@DatSend",_datsend),
                new System.Data.SqlClient.SqlParameter("@AuditState",_auditstate),
                new System.Data.SqlClient.SqlParameter("@SendState",_sendstate),
                new System.Data.SqlClient.SqlParameter("@DatAudit",_dataudit),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
                new System.Data.SqlClient.SqlParameter("@PayType",_paytype),
                new System.Data.SqlClient.SqlParameter("@PayBank",_paybank),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ParentUser",_parentuser),
                new System.Data.SqlClient.SqlParameter("@PayUserName",_payusername),
                new System.Data.SqlClient.SqlParameter("@MailID",_mailid),
                new System.Data.SqlClient.SqlParameter("@Postage",_postage),
                new System.Data.SqlClient.SqlParameter("@OrderMan",_orderman),
                new System.Data.SqlClient.SqlParameter("@OrderMobile",_ordermobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@ScaleCount",_scalecount),
                new System.Data.SqlClient.SqlParameter("@ProductCnt",_productcnt),
                new System.Data.SqlClient.SqlParameter("@E_UserName",_e_username),
                new System.Data.SqlClient.SqlParameter("@E_State",_e_state),
                new System.Data.SqlClient.SqlParameter("@E_OrderNo",_e_orderno),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [Order] (OrderNo,OrderName,OrderImgSrc,SumPrice,DatCreate,OrderState,PayState,PayPrice,DatPay,DatSend,AuditState,SendState,DatAudit,DatFinish,PayType,PayBank,UserName,ParentUser,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,ScaleCount,ProductCnt,E_UserName,E_State,E_OrderNo) values (@OrderNo,@OrderName,@OrderImgSrc,@SumPrice,@DatCreate,@OrderState,@PayState,@PayPrice,@DatPay,@DatSend,@AuditState,@SendState,@DatAudit,@DatFinish,@PayType,@PayBank,@UserName,@ParentUser,@PayUserName,@MailID,@Postage,@OrderMan,@OrderMobile,@Address,@Remark,@ScaleCount,@ProductCnt,@E_UserName,@E_State,@E_OrderNo);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Order]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@OrderName",_ordername),
                new System.Data.SqlClient.SqlParameter("@OrderImgSrc",_orderimgsrc),
                new System.Data.SqlClient.SqlParameter("@SumPrice",_sumprice),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@OrderState",_orderstate),
                new System.Data.SqlClient.SqlParameter("@PayState",_paystate),
                new System.Data.SqlClient.SqlParameter("@PayPrice",_payprice),
                new System.Data.SqlClient.SqlParameter("@DatPay",_datpay),
                new System.Data.SqlClient.SqlParameter("@DatSend",_datsend),
                new System.Data.SqlClient.SqlParameter("@AuditState",_auditstate),
                new System.Data.SqlClient.SqlParameter("@SendState",_sendstate),
                new System.Data.SqlClient.SqlParameter("@DatAudit",_dataudit),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
                new System.Data.SqlClient.SqlParameter("@PayType",_paytype),
                new System.Data.SqlClient.SqlParameter("@PayBank",_paybank),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ParentUser",_parentuser),
                new System.Data.SqlClient.SqlParameter("@PayUserName",_payusername),
                new System.Data.SqlClient.SqlParameter("@MailID",_mailid),
                new System.Data.SqlClient.SqlParameter("@Postage",_postage),
                new System.Data.SqlClient.SqlParameter("@OrderMan",_orderman),
                new System.Data.SqlClient.SqlParameter("@OrderMobile",_ordermobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@ScaleCount",_scalecount),
                new System.Data.SqlClient.SqlParameter("@ProductCnt",_productcnt),
                new System.Data.SqlClient.SqlParameter("@E_UserName",_e_username),
                new System.Data.SqlClient.SqlParameter("@E_State",_e_state),
                new System.Data.SqlClient.SqlParameter("@E_OrderNo",_e_orderno),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [Order] SET OrderNo=@OrderNo,OrderName=@OrderName,OrderImgSrc=@OrderImgSrc,SumPrice=@SumPrice,DatCreate=@DatCreate,OrderState=@OrderState,PayState=@PayState,PayPrice=@PayPrice,DatPay=@DatPay,DatSend=@DatSend,AuditState=@AuditState,SendState=@SendState,DatAudit=@DatAudit,DatFinish=@DatFinish,PayType=@PayType,PayBank=@PayBank,UserName=@UserName,ParentUser=@ParentUser,PayUserName=@PayUserName,MailID=@MailID,Postage=@Postage,OrderMan=@OrderMan,OrderMobile=@OrderMobile,Address=@Address,Remark=@Remark,ScaleCount=@ScaleCount,ProductCnt=@ProductCnt,E_UserName=@E_UserName,E_State=@E_State,E_OrderNo=@E_OrderNo WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@OrderName",_ordername),
                new System.Data.SqlClient.SqlParameter("@OrderImgSrc",_orderimgsrc),
                new System.Data.SqlClient.SqlParameter("@SumPrice",_sumprice),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@OrderState",_orderstate),
                new System.Data.SqlClient.SqlParameter("@PayState",_paystate),
                new System.Data.SqlClient.SqlParameter("@PayPrice",_payprice),
                new System.Data.SqlClient.SqlParameter("@DatPay",_datpay),
                new System.Data.SqlClient.SqlParameter("@DatSend",_datsend),
                new System.Data.SqlClient.SqlParameter("@AuditState",_auditstate),
                new System.Data.SqlClient.SqlParameter("@SendState",_sendstate),
                new System.Data.SqlClient.SqlParameter("@DatAudit",_dataudit),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
                new System.Data.SqlClient.SqlParameter("@PayType",_paytype),
                new System.Data.SqlClient.SqlParameter("@PayBank",_paybank),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ParentUser",_parentuser),
                new System.Data.SqlClient.SqlParameter("@PayUserName",_payusername),
                new System.Data.SqlClient.SqlParameter("@MailID",_mailid),
                new System.Data.SqlClient.SqlParameter("@Postage",_postage),
                new System.Data.SqlClient.SqlParameter("@OrderMan",_orderman),
                new System.Data.SqlClient.SqlParameter("@OrderMobile",_ordermobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@ScaleCount",_scalecount),
                new System.Data.SqlClient.SqlParameter("@ProductCnt",_productcnt),
                new System.Data.SqlClient.SqlParameter("@E_UserName",_e_username),
                new System.Data.SqlClient.SqlParameter("@E_State",_e_state),
                new System.Data.SqlClient.SqlParameter("@E_OrderNo",_e_orderno),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [Order] SET OrderNo=@OrderNo,OrderName=@OrderName,OrderImgSrc=@OrderImgSrc,SumPrice=@SumPrice,DatCreate=@DatCreate,OrderState=@OrderState,PayState=@PayState,PayPrice=@PayPrice,DatPay=@DatPay,DatSend=@DatSend,AuditState=@AuditState,SendState=@SendState,DatAudit=@DatAudit,DatFinish=@DatFinish,PayType=@PayType,PayBank=@PayBank,UserName=@UserName,ParentUser=@ParentUser,PayUserName=@PayUserName,MailID=@MailID,Postage=@Postage,OrderMan=@OrderMan,OrderMobile=@OrderMobile,Address=@Address,Remark=@Remark,ScaleCount=@ScaleCount,ProductCnt=@ProductCnt,E_UserName=@E_UserName,E_State=@E_State,E_OrderNo=@E_OrderNo WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@OrderName",_ordername),
                new System.Data.SqlClient.SqlParameter("@OrderImgSrc",_orderimgsrc),
                new System.Data.SqlClient.SqlParameter("@SumPrice",_sumprice),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@OrderState",_orderstate),
                new System.Data.SqlClient.SqlParameter("@PayState",_paystate),
                new System.Data.SqlClient.SqlParameter("@PayPrice",_payprice),
                new System.Data.SqlClient.SqlParameter("@DatPay",_datpay),
                new System.Data.SqlClient.SqlParameter("@DatSend",_datsend),
                new System.Data.SqlClient.SqlParameter("@AuditState",_auditstate),
                new System.Data.SqlClient.SqlParameter("@SendState",_sendstate),
                new System.Data.SqlClient.SqlParameter("@DatAudit",_dataudit),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
                new System.Data.SqlClient.SqlParameter("@PayType",_paytype),
                new System.Data.SqlClient.SqlParameter("@PayBank",_paybank),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ParentUser",_parentuser),
                new System.Data.SqlClient.SqlParameter("@PayUserName",_payusername),
                new System.Data.SqlClient.SqlParameter("@MailID",_mailid),
                new System.Data.SqlClient.SqlParameter("@Postage",_postage),
                new System.Data.SqlClient.SqlParameter("@OrderMan",_orderman),
                new System.Data.SqlClient.SqlParameter("@OrderMobile",_ordermobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@ScaleCount",_scalecount),
                new System.Data.SqlClient.SqlParameter("@ProductCnt",_productcnt),
                new System.Data.SqlClient.SqlParameter("@E_UserName",_e_username),
                new System.Data.SqlClient.SqlParameter("@E_State",_e_state),
                new System.Data.SqlClient.SqlParameter("@E_OrderNo",_e_orderno),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static Order GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,OrderNo,OrderName,OrderImgSrc,SumPrice,DatCreate,OrderState,PayState,PayPrice,DatPay,DatSend,AuditState,SendState,DatAudit,DatFinish,PayType,PayBank,UserName,ParentUser,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,ScaleCount,ProductCnt,E_UserName,E_State,E_OrderNo FROM [Order] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<Order>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,OrderNo,OrderName,OrderImgSrc,SumPrice,DatCreate,OrderState,PayState,PayPrice,DatPay,DatSend,AuditState,SendState,DatAudit,DatFinish,PayType,PayBank,UserName,ParentUser,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,ScaleCount,ProductCnt,E_UserName,E_State,E_OrderNo FROM [Order] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [Order] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [Order] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Order> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,OrderName,OrderImgSrc,SumPrice,DatCreate,OrderState,PayState,PayPrice,DatPay,DatSend,AuditState,SendState,DatAudit,DatFinish,PayType,PayBank,UserName,ParentUser,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,ScaleCount,ProductCnt,E_UserName,E_State,E_OrderNo,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [Order] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Order>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Order> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,OrderName,OrderImgSrc,SumPrice,DatCreate,OrderState,PayState,PayPrice,DatPay,DatSend,AuditState,SendState,DatAudit,DatFinish,PayType,PayBank,UserName,ParentUser,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,ScaleCount,ProductCnt,E_UserName,E_State,E_OrderNo FROM [Order] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Order>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<Order> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,OrderNo,OrderName,OrderImgSrc,SumPrice,DatCreate,OrderState,PayState,PayPrice,DatPay,DatSend,AuditState,SendState,DatAudit,DatFinish,PayType,PayBank,UserName,ParentUser,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,ScaleCount,ProductCnt,E_UserName,E_State,E_OrderNo FROM [Order]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<Order>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class LotteryActivitysAreaRedPackPrice 
    {
        #region Fields
        //public string str = "shiwu:50";
        private int _id;
        private int _laarp_id;
        private decimal _maxprice;
        private decimal _minprice;
        private decimal _rate;
        private string _shiwu = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int LAARP_ID
        {
            get { return _laarp_id; }
            set { _laarp_id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal MaxPrice
        {
            get { return _maxprice; }
            set { _maxprice = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal MinPrice
        {
            get { return _minprice; }
            set { _minprice = value; }
        }

        /// <summary>
        /// 中奖概率
        /// </summary>
        public decimal Rate
        {
            get { return _rate; }
            set { _rate = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string shiwu
        {
            get { return _shiwu; }
            set { _shiwu = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [LotteryActivitysAreaRedPackPrice] (LAARP_ID,MaxPrice,MinPrice,Rate,shiwu) values (@LAARP_ID,@MaxPrice,@MinPrice,@Rate,@shiwu);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryActivitysAreaRedPackPrice]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@LAARP_ID",_laarp_id),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [LotteryActivitysAreaRedPackPrice] (LAARP_ID,MaxPrice,MinPrice,Rate,shiwu) values (@LAARP_ID,@MaxPrice,@MinPrice,@Rate,@shiwu);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [LotteryActivitysAreaRedPackPrice]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@LAARP_ID",_laarp_id),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [LotteryActivitysAreaRedPackPrice] SET LAARP_ID=@LAARP_ID,MaxPrice=@MaxPrice,MinPrice=@MinPrice,Rate=@Rate,shiwu=@shiwu WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@LAARP_ID",_laarp_id),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [LotteryActivitysAreaRedPackPrice] SET LAARP_ID=@LAARP_ID,MaxPrice=@MaxPrice,MinPrice=@MinPrice,Rate=@Rate,shiwu=@shiwu WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@LAARP_ID",_laarp_id),
                new System.Data.SqlClient.SqlParameter("@MaxPrice",_maxprice),
                new System.Data.SqlClient.SqlParameter("@MinPrice",_minprice),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static LotteryActivitysAreaRedPackPrice GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,LAARP_ID,MaxPrice,MinPrice,Rate,shiwu FROM [LotteryActivitysAreaRedPackPrice] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<LotteryActivitysAreaRedPackPrice>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,LAARP_ID,MaxPrice,MinPrice,Rate,shiwu FROM [LotteryActivitysAreaRedPackPrice] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [LotteryActivitysAreaRedPackPrice] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [LotteryActivitysAreaRedPackPrice] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryActivitysAreaRedPackPrice> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,LAARP_ID,MaxPrice,MinPrice,Rate,shiwu,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [LotteryActivitysAreaRedPackPrice] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysAreaRedPackPrice>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<LotteryActivitysAreaRedPackPrice> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,LAARP_ID,MaxPrice,MinPrice,Rate,shiwu FROM [LotteryActivitysAreaRedPackPrice] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysAreaRedPackPrice>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<LotteryActivitysAreaRedPackPrice> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,LAARP_ID,MaxPrice,MinPrice,Rate,shiwu FROM [LotteryActivitysAreaRedPackPrice]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysAreaRedPackPrice>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<LotteryActivitysAreaRedPackPrice> GetEntitysByLAARP_ID(int laarp_id)
    	{
    		string strSql = "SELECT ID,LAARP_ID,MaxPrice,MinPrice,Rate,shiwu FROM [LotteryActivitysAreaRedPackPrice] WHERE LAARP_ID=@LAARP_ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@LAARP_ID",laarp_id) };
    
    		return DAL.EntityDataHelper.FillData2Entities<LotteryActivitysAreaRedPackPrice>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class Scale 
    {
        #region Fields
        //public string str = "BigCode:50|MiddleCode:50|SmallCode:50|AntiCode:50|LinkMidPDAUser:50|LinkBigPDAUser:50|LinkMidOrderNo:50|LinkBigOrderNo:50|IntoPDAUser:50|IntoOrderNo:50|OutPDAUser:50|OutOrderNo:50|ProductNo:50|UserName:50";
        private int _id;
        private string _bigcode = string.Empty;
        private string _middlecode = string.Empty;
        private string _smallcode = string.Empty;
        private string _anticode = string.Empty;
        private int _createtime;
        private int _stateid;
        private bool _islinkmid;
        private bool _islinkbig;
        private int _linkmidtime;
        private int _linkbigtime;
        private string _linkmidpdauser = string.Empty;
        private string _linkbigpdauser = string.Empty;
        private string _linkmidorderno = string.Empty;
        private string _linkbigorderno = string.Empty;
        private bool _isinto;
        private string _intopdauser = string.Empty;
        private int _intotime;
        private string _intoorderno = string.Empty;
        private bool _isout;
        private string _outpdauser = string.Empty;
        private int _outtime;
        private string _outorderno = string.Empty;
        private int _outway;
        private bool _isintegral;
        private string _productno = string.Empty;
        private string _username = string.Empty;
        private int _supplierid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 大标
        /// </summary>
        public string BigCode
        {
            get { return _bigcode; }
            set { _bigcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string MiddleCode
        {
            get { return _middlecode; }
            set { _middlecode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 小标
        /// </summary>
        public string SmallCode
        {
            get { return _smallcode; }
            set { _smallcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 防伪标
        /// </summary>
        public string AntiCode
        {
            get { return _anticode; }
            set { _anticode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CreateTime
        {
            get { return _createtime; }
            set { _createtime = value; }
        }

        /// <summary>
        /// 0.默认,2.小中关联,3.中大关联,4.禁用,6.入库,7.出货,9.退货
        /// </summary>
        public int StateID
        {
            get { return _stateid; }
            set { _stateid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsLinkMid
        {
            get { return _islinkmid; }
            set { _islinkmid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsLinkBig
        {
            get { return _islinkbig; }
            set { _islinkbig = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int LinkMidTime
        {
            get { return _linkmidtime; }
            set { _linkmidtime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int LinkBigTime
        {
            get { return _linkbigtime; }
            set { _linkbigtime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string LinkMidPDAUser
        {
            get { return _linkmidpdauser; }
            set { _linkmidpdauser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string LinkBigPDAUser
        {
            get { return _linkbigpdauser; }
            set { _linkbigpdauser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string LinkMidOrderNo
        {
            get { return _linkmidorderno; }
            set { _linkmidorderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string LinkBigOrderNo
        {
            get { return _linkbigorderno; }
            set { _linkbigorderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsInto
        {
            get { return _isinto; }
            set { _isinto = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string IntoPDAUser
        {
            get { return _intopdauser; }
            set { _intopdauser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int IntoTime
        {
            get { return _intotime; }
            set { _intotime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string IntoOrderNo
        {
            get { return _intoorderno; }
            set { _intoorderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsOut
        {
            get { return _isout; }
            set { _isout = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OutPDAUser
        {
            get { return _outpdauser; }
            set { _outpdauser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int OutTime
        {
            get { return _outtime; }
            set { _outtime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OutOrderNo
        {
            get { return _outorderno; }
            set { _outorderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 出货方式 0.未出货,1.小标,2.中标,3.大标
        /// </summary>
        public int OutWay
        {
            get { return _outway; }
            set { _outway = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsIntegral
        {
            get { return _isintegral; }
            set { _isintegral = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProductNo
        {
            get { return _productno; }
            set { _productno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int SupplierId
        {
            get { return _supplierid; }
            set { _supplierid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [Scale] (BigCode,MiddleCode,SmallCode,AntiCode,CreateTime,StateID,IsLinkMid,IsLinkBig,LinkMidTime,LinkBigTime,LinkMidPDAUser,LinkBigPDAUser,LinkMidOrderNo,LinkBigOrderNo,IsInto,IntoPDAUser,IntoTime,IntoOrderNo,IsOut,OutPDAUser,OutTime,OutOrderNo,OutWay,IsIntegral,ProductNo,UserName,SupplierId) values (@BigCode,@MiddleCode,@SmallCode,@AntiCode,@CreateTime,@StateID,@IsLinkMid,@IsLinkBig,@LinkMidTime,@LinkBigTime,@LinkMidPDAUser,@LinkBigPDAUser,@LinkMidOrderNo,@LinkBigOrderNo,@IsInto,@IntoPDAUser,@IntoTime,@IntoOrderNo,@IsOut,@OutPDAUser,@OutTime,@OutOrderNo,@OutWay,@IsIntegral,@ProductNo,@UserName,@SupplierId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Scale]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@StateID",_stateid),
                new System.Data.SqlClient.SqlParameter("@IsLinkMid",_islinkmid),
                new System.Data.SqlClient.SqlParameter("@IsLinkBig",_islinkbig),
                new System.Data.SqlClient.SqlParameter("@LinkMidTime",_linkmidtime),
                new System.Data.SqlClient.SqlParameter("@LinkBigTime",_linkbigtime),
                new System.Data.SqlClient.SqlParameter("@LinkMidPDAUser",_linkmidpdauser),
                new System.Data.SqlClient.SqlParameter("@LinkBigPDAUser",_linkbigpdauser),
                new System.Data.SqlClient.SqlParameter("@LinkMidOrderNo",_linkmidorderno),
                new System.Data.SqlClient.SqlParameter("@LinkBigOrderNo",_linkbigorderno),
                new System.Data.SqlClient.SqlParameter("@IsInto",_isinto),
                new System.Data.SqlClient.SqlParameter("@IntoPDAUser",_intopdauser),
                new System.Data.SqlClient.SqlParameter("@IntoTime",_intotime),
                new System.Data.SqlClient.SqlParameter("@IntoOrderNo",_intoorderno),
                new System.Data.SqlClient.SqlParameter("@IsOut",_isout),
                new System.Data.SqlClient.SqlParameter("@OutPDAUser",_outpdauser),
                new System.Data.SqlClient.SqlParameter("@OutTime",_outtime),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@IsIntegral",_isintegral),
                new System.Data.SqlClient.SqlParameter("@ProductNo",_productno),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@SupplierId",_supplierid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [Scale] (BigCode,MiddleCode,SmallCode,AntiCode,CreateTime,StateID,IsLinkMid,IsLinkBig,LinkMidTime,LinkBigTime,LinkMidPDAUser,LinkBigPDAUser,LinkMidOrderNo,LinkBigOrderNo,IsInto,IntoPDAUser,IntoTime,IntoOrderNo,IsOut,OutPDAUser,OutTime,OutOrderNo,OutWay,IsIntegral,ProductNo,UserName,SupplierId) values (@BigCode,@MiddleCode,@SmallCode,@AntiCode,@CreateTime,@StateID,@IsLinkMid,@IsLinkBig,@LinkMidTime,@LinkBigTime,@LinkMidPDAUser,@LinkBigPDAUser,@LinkMidOrderNo,@LinkBigOrderNo,@IsInto,@IntoPDAUser,@IntoTime,@IntoOrderNo,@IsOut,@OutPDAUser,@OutTime,@OutOrderNo,@OutWay,@IsIntegral,@ProductNo,@UserName,@SupplierId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Scale]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@StateID",_stateid),
                new System.Data.SqlClient.SqlParameter("@IsLinkMid",_islinkmid),
                new System.Data.SqlClient.SqlParameter("@IsLinkBig",_islinkbig),
                new System.Data.SqlClient.SqlParameter("@LinkMidTime",_linkmidtime),
                new System.Data.SqlClient.SqlParameter("@LinkBigTime",_linkbigtime),
                new System.Data.SqlClient.SqlParameter("@LinkMidPDAUser",_linkmidpdauser),
                new System.Data.SqlClient.SqlParameter("@LinkBigPDAUser",_linkbigpdauser),
                new System.Data.SqlClient.SqlParameter("@LinkMidOrderNo",_linkmidorderno),
                new System.Data.SqlClient.SqlParameter("@LinkBigOrderNo",_linkbigorderno),
                new System.Data.SqlClient.SqlParameter("@IsInto",_isinto),
                new System.Data.SqlClient.SqlParameter("@IntoPDAUser",_intopdauser),
                new System.Data.SqlClient.SqlParameter("@IntoTime",_intotime),
                new System.Data.SqlClient.SqlParameter("@IntoOrderNo",_intoorderno),
                new System.Data.SqlClient.SqlParameter("@IsOut",_isout),
                new System.Data.SqlClient.SqlParameter("@OutPDAUser",_outpdauser),
                new System.Data.SqlClient.SqlParameter("@OutTime",_outtime),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@IsIntegral",_isintegral),
                new System.Data.SqlClient.SqlParameter("@ProductNo",_productno),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@SupplierId",_supplierid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [Scale] SET BigCode=@BigCode,MiddleCode=@MiddleCode,SmallCode=@SmallCode,AntiCode=@AntiCode,CreateTime=@CreateTime,StateID=@StateID,IsLinkMid=@IsLinkMid,IsLinkBig=@IsLinkBig,LinkMidTime=@LinkMidTime,LinkBigTime=@LinkBigTime,LinkMidPDAUser=@LinkMidPDAUser,LinkBigPDAUser=@LinkBigPDAUser,LinkMidOrderNo=@LinkMidOrderNo,LinkBigOrderNo=@LinkBigOrderNo,IsInto=@IsInto,IntoPDAUser=@IntoPDAUser,IntoTime=@IntoTime,IntoOrderNo=@IntoOrderNo,IsOut=@IsOut,OutPDAUser=@OutPDAUser,OutTime=@OutTime,OutOrderNo=@OutOrderNo,OutWay=@OutWay,IsIntegral=@IsIntegral,ProductNo=@ProductNo,UserName=@UserName,SupplierId=@SupplierId WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@StateID",_stateid),
                new System.Data.SqlClient.SqlParameter("@IsLinkMid",_islinkmid),
                new System.Data.SqlClient.SqlParameter("@IsLinkBig",_islinkbig),
                new System.Data.SqlClient.SqlParameter("@LinkMidTime",_linkmidtime),
                new System.Data.SqlClient.SqlParameter("@LinkBigTime",_linkbigtime),
                new System.Data.SqlClient.SqlParameter("@LinkMidPDAUser",_linkmidpdauser),
                new System.Data.SqlClient.SqlParameter("@LinkBigPDAUser",_linkbigpdauser),
                new System.Data.SqlClient.SqlParameter("@LinkMidOrderNo",_linkmidorderno),
                new System.Data.SqlClient.SqlParameter("@LinkBigOrderNo",_linkbigorderno),
                new System.Data.SqlClient.SqlParameter("@IsInto",_isinto),
                new System.Data.SqlClient.SqlParameter("@IntoPDAUser",_intopdauser),
                new System.Data.SqlClient.SqlParameter("@IntoTime",_intotime),
                new System.Data.SqlClient.SqlParameter("@IntoOrderNo",_intoorderno),
                new System.Data.SqlClient.SqlParameter("@IsOut",_isout),
                new System.Data.SqlClient.SqlParameter("@OutPDAUser",_outpdauser),
                new System.Data.SqlClient.SqlParameter("@OutTime",_outtime),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@IsIntegral",_isintegral),
                new System.Data.SqlClient.SqlParameter("@ProductNo",_productno),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@SupplierId",_supplierid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [Scale] SET BigCode=@BigCode,MiddleCode=@MiddleCode,SmallCode=@SmallCode,AntiCode=@AntiCode,CreateTime=@CreateTime,StateID=@StateID,IsLinkMid=@IsLinkMid,IsLinkBig=@IsLinkBig,LinkMidTime=@LinkMidTime,LinkBigTime=@LinkBigTime,LinkMidPDAUser=@LinkMidPDAUser,LinkBigPDAUser=@LinkBigPDAUser,LinkMidOrderNo=@LinkMidOrderNo,LinkBigOrderNo=@LinkBigOrderNo,IsInto=@IsInto,IntoPDAUser=@IntoPDAUser,IntoTime=@IntoTime,IntoOrderNo=@IntoOrderNo,IsOut=@IsOut,OutPDAUser=@OutPDAUser,OutTime=@OutTime,OutOrderNo=@OutOrderNo,OutWay=@OutWay,IsIntegral=@IsIntegral,ProductNo=@ProductNo,UserName=@UserName,SupplierId=@SupplierId WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@StateID",_stateid),
                new System.Data.SqlClient.SqlParameter("@IsLinkMid",_islinkmid),
                new System.Data.SqlClient.SqlParameter("@IsLinkBig",_islinkbig),
                new System.Data.SqlClient.SqlParameter("@LinkMidTime",_linkmidtime),
                new System.Data.SqlClient.SqlParameter("@LinkBigTime",_linkbigtime),
                new System.Data.SqlClient.SqlParameter("@LinkMidPDAUser",_linkmidpdauser),
                new System.Data.SqlClient.SqlParameter("@LinkBigPDAUser",_linkbigpdauser),
                new System.Data.SqlClient.SqlParameter("@LinkMidOrderNo",_linkmidorderno),
                new System.Data.SqlClient.SqlParameter("@LinkBigOrderNo",_linkbigorderno),
                new System.Data.SqlClient.SqlParameter("@IsInto",_isinto),
                new System.Data.SqlClient.SqlParameter("@IntoPDAUser",_intopdauser),
                new System.Data.SqlClient.SqlParameter("@IntoTime",_intotime),
                new System.Data.SqlClient.SqlParameter("@IntoOrderNo",_intoorderno),
                new System.Data.SqlClient.SqlParameter("@IsOut",_isout),
                new System.Data.SqlClient.SqlParameter("@OutPDAUser",_outpdauser),
                new System.Data.SqlClient.SqlParameter("@OutTime",_outtime),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@IsIntegral",_isintegral),
                new System.Data.SqlClient.SqlParameter("@ProductNo",_productno),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@SupplierId",_supplierid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static Scale GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,BigCode,MiddleCode,SmallCode,AntiCode,CreateTime,StateID,IsLinkMid,IsLinkBig,LinkMidTime,LinkBigTime,LinkMidPDAUser,LinkBigPDAUser,LinkMidOrderNo,LinkBigOrderNo,IsInto,IntoPDAUser,IntoTime,IntoOrderNo,IsOut,OutPDAUser,OutTime,OutOrderNo,OutWay,IsIntegral,ProductNo,UserName,SupplierId FROM [Scale] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<Scale>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,BigCode,MiddleCode,SmallCode,AntiCode,CreateTime,StateID,IsLinkMid,IsLinkBig,LinkMidTime,LinkBigTime,LinkMidPDAUser,LinkBigPDAUser,LinkMidOrderNo,LinkBigOrderNo,IsInto,IntoPDAUser,IntoTime,IntoOrderNo,IsOut,OutPDAUser,OutTime,OutOrderNo,OutWay,IsIntegral,ProductNo,UserName,SupplierId FROM [Scale] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [Scale] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [Scale] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Scale> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,BigCode,MiddleCode,SmallCode,AntiCode,CreateTime,StateID,IsLinkMid,IsLinkBig,LinkMidTime,LinkBigTime,LinkMidPDAUser,LinkBigPDAUser,LinkMidOrderNo,LinkBigOrderNo,IsInto,IntoPDAUser,IntoTime,IntoOrderNo,IsOut,OutPDAUser,OutTime,OutOrderNo,OutWay,IsIntegral,ProductNo,UserName,SupplierId,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [Scale] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Scale> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,BigCode,MiddleCode,SmallCode,AntiCode,CreateTime,StateID,IsLinkMid,IsLinkBig,LinkMidTime,LinkBigTime,LinkMidPDAUser,LinkBigPDAUser,LinkMidOrderNo,LinkBigOrderNo,IsInto,IntoPDAUser,IntoTime,IntoOrderNo,IsOut,OutPDAUser,OutTime,OutOrderNo,OutWay,IsIntegral,ProductNo,UserName,SupplierId FROM [Scale] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<Scale> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,BigCode,MiddleCode,SmallCode,AntiCode,CreateTime,StateID,IsLinkMid,IsLinkBig,LinkMidTime,LinkBigTime,LinkMidPDAUser,LinkBigPDAUser,LinkMidOrderNo,LinkBigOrderNo,IsInto,IntoPDAUser,IntoTime,IntoOrderNo,IsOut,OutPDAUser,OutTime,OutOrderNo,OutWay,IsIntegral,ProductNo,UserName,SupplierId FROM [Scale]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class PDAFuntion 
    {
        #region Fields
        //public string str = "FunCode:20|ParentCode:20|FunName:30";
        private int _id;
        private string _funcode = string.Empty;
        private string _parentcode = string.Empty;
        private string _funname = string.Empty;
        private bool _disabled;
        private DateTime _creatdate = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FunCode
        {
            get { return _funcode; }
            set { _funcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ParentCode
        {
            get { return _parentcode; }
            set { _parentcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FunName
        {
            get { return _funname; }
            set { _funname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Disabled
        {
            get { return _disabled; }
            set { _disabled = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime CreatDate
        {
            get { return _creatdate; }
            set { _creatdate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [PDAFuntion] (FunCode,ParentCode,FunName,Disabled,CreatDate) values (@FunCode,@ParentCode,@FunName,@Disabled,@CreatDate);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAFuntion]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@FunCode",_funcode),
                new System.Data.SqlClient.SqlParameter("@ParentCode",_parentcode),
                new System.Data.SqlClient.SqlParameter("@FunName",_funname),
                new System.Data.SqlClient.SqlParameter("@Disabled",_disabled),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [PDAFuntion] (FunCode,ParentCode,FunName,Disabled,CreatDate) values (@FunCode,@ParentCode,@FunName,@Disabled,@CreatDate);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAFuntion]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@FunCode",_funcode),
                new System.Data.SqlClient.SqlParameter("@ParentCode",_parentcode),
                new System.Data.SqlClient.SqlParameter("@FunName",_funname),
                new System.Data.SqlClient.SqlParameter("@Disabled",_disabled),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [PDAFuntion] SET FunCode=@FunCode,ParentCode=@ParentCode,FunName=@FunName,Disabled=@Disabled,CreatDate=@CreatDate WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@FunCode",_funcode),
                new System.Data.SqlClient.SqlParameter("@ParentCode",_parentcode),
                new System.Data.SqlClient.SqlParameter("@FunName",_funname),
                new System.Data.SqlClient.SqlParameter("@Disabled",_disabled),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [PDAFuntion] SET FunCode=@FunCode,ParentCode=@ParentCode,FunName=@FunName,Disabled=@Disabled,CreatDate=@CreatDate WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@FunCode",_funcode),
                new System.Data.SqlClient.SqlParameter("@ParentCode",_parentcode),
                new System.Data.SqlClient.SqlParameter("@FunName",_funname),
                new System.Data.SqlClient.SqlParameter("@Disabled",_disabled),
                new System.Data.SqlClient.SqlParameter("@CreatDate",_creatdate),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static PDAFuntion GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,FunCode,ParentCode,FunName,Disabled,CreatDate FROM [PDAFuntion] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<PDAFuntion>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,FunCode,ParentCode,FunName,Disabled,CreatDate FROM [PDAFuntion] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [PDAFuntion] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [PDAFuntion] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAFuntion> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,FunCode,ParentCode,FunName,Disabled,CreatDate,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [PDAFuntion] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAFuntion>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAFuntion> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,FunCode,ParentCode,FunName,Disabled,CreatDate FROM [PDAFuntion] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAFuntion>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<PDAFuntion> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,FunCode,ParentCode,FunName,Disabled,CreatDate FROM [PDAFuntion]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAFuntion>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class j_OrderPost 
    {
        #region Fields
        //public string str = "OrderNo:2147483647|PostName:50|PostNo:50";
        private int _id;
        private string _orderno = string.Empty;
        private int _codeid;
        private string _postname = string.Empty;
        private string _postno = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 订单号
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 快递基础表ID
        /// </summary>
        public int CodeID
        {
            get { return _codeid; }
            set { _codeid = value; }
        }

        /// <summary>
        /// 快递名称
        /// </summary>
        public string PostName
        {
            get { return _postname; }
            set { _postname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 快递单号
        /// </summary>
        public string PostNo
        {
            get { return _postno; }
            set { _postno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 发货时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [j_OrderPost] (OrderNo,CodeID,PostName,PostNo,Dat) values (@OrderNo,@CodeID,@PostName,@PostNo,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [j_OrderPost]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@CodeID",_codeid),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostNo",_postno),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [j_OrderPost] (OrderNo,CodeID,PostName,PostNo,Dat) values (@OrderNo,@CodeID,@PostName,@PostNo,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [j_OrderPost]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@CodeID",_codeid),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostNo",_postno),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [j_OrderPost] SET OrderNo=@OrderNo,CodeID=@CodeID,PostName=@PostName,PostNo=@PostNo,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@CodeID",_codeid),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostNo",_postno),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [j_OrderPost] SET OrderNo=@OrderNo,CodeID=@CodeID,PostName=@PostName,PostNo=@PostNo,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@CodeID",_codeid),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostNo",_postno),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static j_OrderPost GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,OrderNo,CodeID,PostName,PostNo,Dat FROM [j_OrderPost] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<j_OrderPost>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,OrderNo,CodeID,PostName,PostNo,Dat FROM [j_OrderPost] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [j_OrderPost] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [j_OrderPost] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<j_OrderPost> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,CodeID,PostName,PostNo,Dat,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [j_OrderPost] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<j_OrderPost>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<j_OrderPost> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,CodeID,PostName,PostNo,Dat FROM [j_OrderPost] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<j_OrderPost>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<j_OrderPost> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,OrderNo,CodeID,PostName,PostNo,Dat FROM [j_OrderPost]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<j_OrderPost>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<j_OrderPost> GetEntitysByCodeID(int codeid)
    	{
    		string strSql = "SELECT ID,OrderNo,CodeID,PostName,PostNo,Dat FROM [j_OrderPost] WHERE CodeID=@CodeID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@CodeID",codeid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<j_OrderPost>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class j_jflog 
    {
        #region Fields
        //public string str = "logContents:2147483647|UserName:2147483647|UserType:2147483647|Type:2147483647|Code:2147483647";
        private int _id;
        private DateTime _dat = new DateTime(1900,1,1);
        private string _logcontents = string.Empty;
        private string _username = string.Empty;
        private string _usertype = string.Empty;
        private string _type = string.Empty;
        private string _code = string.Empty;
        private int _jf;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 日志内容
        /// </summary>
        public string logContents
        {
            get { return _logcontents; }
            set { _logcontents = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 用户类型  消费者/促销员
        /// </summary>
        public string UserType
        {
            get { return _usertype; }
            set { _usertype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 类型   兑换/领取
        /// </summary>
        public string Type
        {
            get { return _type; }
            set { _type = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 凭哪个条码领取的
        /// </summary>
        public string Code
        {
            get { return _code; }
            set { _code = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 积分数
        /// </summary>
        public int jf
        {
            get { return _jf; }
            set { _jf = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [j_jflog] (Dat,logContents,UserName,UserType,Type,Code,jf) values (@Dat,@logContents,@UserName,@UserType,@Type,@Code,@jf);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [j_jflog]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@logContents",_logcontents),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@UserType",_usertype),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@jf",_jf),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [j_jflog] (Dat,logContents,UserName,UserType,Type,Code,jf) values (@Dat,@logContents,@UserName,@UserType,@Type,@Code,@jf);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [j_jflog]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@logContents",_logcontents),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@UserType",_usertype),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@jf",_jf),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [j_jflog] SET Dat=@Dat,logContents=@logContents,UserName=@UserName,UserType=@UserType,Type=@Type,Code=@Code,jf=@jf WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@logContents",_logcontents),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@UserType",_usertype),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@jf",_jf),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [j_jflog] SET Dat=@Dat,logContents=@logContents,UserName=@UserName,UserType=@UserType,Type=@Type,Code=@Code,jf=@jf WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@logContents",_logcontents),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@UserType",_usertype),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@jf",_jf),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static j_jflog GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Dat,logContents,UserName,UserType,Type,Code,jf FROM [j_jflog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<j_jflog>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Dat,logContents,UserName,UserType,Type,Code,jf FROM [j_jflog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [j_jflog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [j_jflog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<j_jflog> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Dat,logContents,UserName,UserType,Type,Code,jf,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [j_jflog] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<j_jflog>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<j_jflog> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Dat,logContents,UserName,UserType,Type,Code,jf FROM [j_jflog] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<j_jflog>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<j_jflog> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Dat,logContents,UserName,UserType,Type,Code,jf FROM [j_jflog]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<j_jflog>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class InviteCode 
    {
        #region Fields
        //public string str = "UserName:2147483647|Type:2147483647";
        private int _id;
        private DateTime _validdat = new DateTime(1900,1,1);
        private string _username = string.Empty;
        private string _type = string.Empty;
        private bool _istime;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 有效期
        /// </summary>
        public DateTime ValidDat
        {
            get { return _validdat; }
            set { _validdat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 代理用户ID
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 类型  授权/推荐
        /// </summary>
        public string Type
        {
            get { return _type; }
            set { _type = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsTime
        {
            get { return _istime; }
            set { _istime = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [InviteCode] (ValidDat,UserName,Type,IsTime) values (@ValidDat,@UserName,@Type,@IsTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [InviteCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ValidDat",_validdat),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@IsTime",_istime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [InviteCode] (ValidDat,UserName,Type,IsTime) values (@ValidDat,@UserName,@Type,@IsTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [InviteCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ValidDat",_validdat),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@IsTime",_istime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [InviteCode] SET ValidDat=@ValidDat,UserName=@UserName,Type=@Type,IsTime=@IsTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ValidDat",_validdat),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@IsTime",_istime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [InviteCode] SET ValidDat=@ValidDat,UserName=@UserName,Type=@Type,IsTime=@IsTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ValidDat",_validdat),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@IsTime",_istime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static InviteCode GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ValidDat,UserName,Type,IsTime FROM [InviteCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<InviteCode>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ValidDat,UserName,Type,IsTime FROM [InviteCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [InviteCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [InviteCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<InviteCode> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ValidDat,UserName,Type,IsTime,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [InviteCode] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<InviteCode>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<InviteCode> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ValidDat,UserName,Type,IsTime FROM [InviteCode] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<InviteCode>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<InviteCode> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ValidDat,UserName,Type,IsTime FROM [InviteCode]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<InviteCode>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class GetPrize 
    {
        #region Fields
        //public string str = "Code:50|State:50|PrizeID:50|PrizeName:50";
        private int _id;
        private string _code = string.Empty;
        private string _state = string.Empty;
        private string _prizeid = string.Empty;
        private string _prizename = string.Empty;
        private DateTime _datcreate = new DateTime(1900,1,1);
        private DateTime _datfinish = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Code
        {
            get { return _code; }
            set { _code = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string State
        {
            get { return _state; }
            set { _state = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PrizeID
        {
            get { return _prizeid; }
            set { _prizeid = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PrizeName
        {
            get { return _prizename; }
            set { _prizename = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DatCreate
        {
            get { return _datcreate; }
            set { _datcreate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DatFinish
        {
            get { return _datfinish; }
            set { _datfinish = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [GetPrize] (Code,State,PrizeID,PrizeName,DatCreate,DatFinish) values (@Code,@State,@PrizeID,@PrizeName,@DatCreate,@DatFinish);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [GetPrize]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@PrizeID",_prizeid),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [GetPrize] (Code,State,PrizeID,PrizeName,DatCreate,DatFinish) values (@Code,@State,@PrizeID,@PrizeName,@DatCreate,@DatFinish);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [GetPrize]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@PrizeID",_prizeid),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [GetPrize] SET Code=@Code,State=@State,PrizeID=@PrizeID,PrizeName=@PrizeName,DatCreate=@DatCreate,DatFinish=@DatFinish WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@PrizeID",_prizeid),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [GetPrize] SET Code=@Code,State=@State,PrizeID=@PrizeID,PrizeName=@PrizeName,DatCreate=@DatCreate,DatFinish=@DatFinish WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Code",_code),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@PrizeID",_prizeid),
                new System.Data.SqlClient.SqlParameter("@PrizeName",_prizename),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static GetPrize GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Code,State,PrizeID,PrizeName,DatCreate,DatFinish FROM [GetPrize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<GetPrize>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Code,State,PrizeID,PrizeName,DatCreate,DatFinish FROM [GetPrize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [GetPrize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [GetPrize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<GetPrize> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Code,State,PrizeID,PrizeName,DatCreate,DatFinish,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [GetPrize] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<GetPrize>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<GetPrize> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Code,State,PrizeID,PrizeName,DatCreate,DatFinish FROM [GetPrize] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<GetPrize>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<GetPrize> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Code,State,PrizeID,PrizeName,DatCreate,DatFinish FROM [GetPrize]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<GetPrize>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<GetPrize> GetEntitysByPrizeID(int prizeid)
    	{
    		string strSql = "SELECT ID,Code,State,PrizeID,PrizeName,DatCreate,DatFinish FROM [GetPrize] WHERE PrizeID=@PrizeID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@PrizeID",prizeid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<GetPrize>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SelScale 
    {
        #region Fields
        //public string str = "AntiCode:50|IP:50|Country:50|province:50|city:50|warning:50|Address:50|UserName:50";
        private int _id;
        private int _fid;
        private string _anticode = string.Empty;
        private string _ip = string.Empty;
        private string _country = string.Empty;
        private string _province = string.Empty;
        private string _city = string.Empty;
        private string _warning = string.Empty;
        private string _address = string.Empty;
        private string _username = string.Empty;
        private int _createtime;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int FID
        {
            get { return _fid; }
            set { _fid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string AntiCode
        {
            get { return _anticode; }
            set { _anticode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string IP
        {
            get { return _ip; }
            set { _ip = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Country
        {
            get { return _country; }
            set { _country = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string province
        {
            get { return _province; }
            set { _province = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string city
        {
            get { return _city; }
            set { _city = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string warning
        {
            get { return _warning; }
            set { _warning = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 销售地区
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CreateTime
        {
            get { return _createtime; }
            set { _createtime = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SelScale] (FID,AntiCode,IP,Country,province,city,warning,Address,UserName,CreateTime) values (@FID,@AntiCode,@IP,@Country,@province,@city,@warning,@Address,@UserName,@CreateTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SelScale]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@FID",_fid),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@IP",_ip),
                new System.Data.SqlClient.SqlParameter("@Country",_country),
                new System.Data.SqlClient.SqlParameter("@province",_province),
                new System.Data.SqlClient.SqlParameter("@city",_city),
                new System.Data.SqlClient.SqlParameter("@warning",_warning),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SelScale] (FID,AntiCode,IP,Country,province,city,warning,Address,UserName,CreateTime) values (@FID,@AntiCode,@IP,@Country,@province,@city,@warning,@Address,@UserName,@CreateTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SelScale]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@FID",_fid),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@IP",_ip),
                new System.Data.SqlClient.SqlParameter("@Country",_country),
                new System.Data.SqlClient.SqlParameter("@province",_province),
                new System.Data.SqlClient.SqlParameter("@city",_city),
                new System.Data.SqlClient.SqlParameter("@warning",_warning),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SelScale] SET FID=@FID,AntiCode=@AntiCode,IP=@IP,Country=@Country,province=@province,city=@city,warning=@warning,Address=@Address,UserName=@UserName,CreateTime=@CreateTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@FID",_fid),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@IP",_ip),
                new System.Data.SqlClient.SqlParameter("@Country",_country),
                new System.Data.SqlClient.SqlParameter("@province",_province),
                new System.Data.SqlClient.SqlParameter("@city",_city),
                new System.Data.SqlClient.SqlParameter("@warning",_warning),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SelScale] SET FID=@FID,AntiCode=@AntiCode,IP=@IP,Country=@Country,province=@province,city=@city,warning=@warning,Address=@Address,UserName=@UserName,CreateTime=@CreateTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@FID",_fid),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@IP",_ip),
                new System.Data.SqlClient.SqlParameter("@Country",_country),
                new System.Data.SqlClient.SqlParameter("@province",_province),
                new System.Data.SqlClient.SqlParameter("@city",_city),
                new System.Data.SqlClient.SqlParameter("@warning",_warning),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SelScale GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,FID,AntiCode,IP,Country,province,city,warning,Address,UserName,CreateTime FROM [SelScale] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SelScale>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,FID,AntiCode,IP,Country,province,city,warning,Address,UserName,CreateTime FROM [SelScale] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SelScale] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SelScale] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SelScale> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,FID,AntiCode,IP,Country,province,city,warning,Address,UserName,CreateTime,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SelScale] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SelScale>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SelScale> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,FID,AntiCode,IP,Country,province,city,warning,Address,UserName,CreateTime FROM [SelScale] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SelScale>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SelScale> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,FID,AntiCode,IP,Country,province,city,warning,Address,UserName,CreateTime FROM [SelScale]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SelScale>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<SelScale> GetEntitysByFID(int fid)
    	{
    		string strSql = "SELECT ID,FID,AntiCode,IP,Country,province,city,warning,Address,UserName,CreateTime FROM [SelScale] WHERE FID=@FID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@FID",fid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<SelScale>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserWxInfo 
    {
        #region Fields
        //public string str = "C_UserName:2147483647|C_ConsumerUserName:2147483647|openid:1000|unionid:1000|nickname:50|sex:50|headimgurl:2147483647|remark:50|groupid:50|accesstoken:2147483647|country:50|language:50";
        private int _id;
        private string _c_username = string.Empty;
        private string _c_consumerusername = string.Empty;
        private string _openid = string.Empty;
        private string _unionid = string.Empty;
        private string _nickname = string.Empty;
        private string _sex = string.Empty;
        private string _headimgurl = string.Empty;
        private string _remark = string.Empty;
        private string _groupid = string.Empty;
        private string _accesstoken = string.Empty;
        private bool _subscribe;
        private DateTime _subscribe_time = new DateTime(1900,1,1);
        private string _country = string.Empty;
        private string _language = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 对应的用户表主键
        /// </summary>
        public string C_UserName
        {
            get { return _c_username; }
            set { _c_username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 积分系统账号
        /// </summary>
        public string C_ConsumerUserName
        {
            get { return _c_consumerusername; }
            set { _c_consumerusername = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 微信openid
        /// </summary>
        public string openid
        {
            get { return _openid; }
            set { _openid = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 1000); }
        }

        /// <summary>
        /// 微信unionid
        /// </summary>
        public string unionid
        {
            get { return _unionid; }
            set { _unionid = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 1000); }
        }

        /// <summary>
        /// 微信昵称
        /// </summary>
        public string nickname
        {
            get { return _nickname; }
            set { _nickname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
        /// </summary>
        public string sex
        {
            get { return _sex; }
            set { _sex = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 微信头像Url
        /// </summary>
        public string headimgurl
        {
            get { return _headimgurl; }
            set { _headimgurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 公众号运营者对粉丝的备注，公众号运营者可在微信公众平台用户管理界面对粉丝添加备注
        /// </summary>
        public string remark
        {
            get { return _remark; }
            set { _remark = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 公众号用户所在的分组ID
        /// </summary>
        public string groupid
        {
            get { return _groupid; }
            set { _groupid = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string accesstoken
        {
            get { return _accesstoken; }
            set { _accesstoken = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 用户是否订阅该公众号
        /// </summary>
        public bool subscribe
        {
            get { return _subscribe; }
            set { _subscribe = value; }
        }

        /// <summary>
        /// 关注时间,如果用户曾多次关注，则取最后关注时间
        /// </summary>
        public DateTime subscribe_time
        {
            get { return _subscribe_time; }
            set { _subscribe_time = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 用户所在国家
        /// </summary>
        public string country
        {
            get { return _country; }
            set { _country = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 用户语言
        /// </summary>
        public string language
        {
            get { return _language; }
            set { _language = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserWxInfo] (C_UserName,C_ConsumerUserName,openid,unionid,nickname,sex,headimgurl,remark,groupid,accesstoken,subscribe,subscribe_time,country,language) values (@C_UserName,@C_ConsumerUserName,@openid,@unionid,@nickname,@sex,@headimgurl,@remark,@groupid,@accesstoken,@subscribe,@subscribe_time,@country,@language);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserWxInfo]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@C_ConsumerUserName",_c_consumerusername),
                new System.Data.SqlClient.SqlParameter("@openid",_openid),
                new System.Data.SqlClient.SqlParameter("@unionid",_unionid),
                new System.Data.SqlClient.SqlParameter("@nickname",_nickname),
                new System.Data.SqlClient.SqlParameter("@sex",_sex),
                new System.Data.SqlClient.SqlParameter("@headimgurl",_headimgurl),
                new System.Data.SqlClient.SqlParameter("@remark",_remark),
                new System.Data.SqlClient.SqlParameter("@groupid",_groupid),
                new System.Data.SqlClient.SqlParameter("@accesstoken",_accesstoken),
                new System.Data.SqlClient.SqlParameter("@subscribe",_subscribe),
                new System.Data.SqlClient.SqlParameter("@subscribe_time",_subscribe_time),
                new System.Data.SqlClient.SqlParameter("@country",_country),
                new System.Data.SqlClient.SqlParameter("@language",_language),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserWxInfo] (C_UserName,C_ConsumerUserName,openid,unionid,nickname,sex,headimgurl,remark,groupid,accesstoken,subscribe,subscribe_time,country,language) values (@C_UserName,@C_ConsumerUserName,@openid,@unionid,@nickname,@sex,@headimgurl,@remark,@groupid,@accesstoken,@subscribe,@subscribe_time,@country,@language);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserWxInfo]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@C_ConsumerUserName",_c_consumerusername),
                new System.Data.SqlClient.SqlParameter("@openid",_openid),
                new System.Data.SqlClient.SqlParameter("@unionid",_unionid),
                new System.Data.SqlClient.SqlParameter("@nickname",_nickname),
                new System.Data.SqlClient.SqlParameter("@sex",_sex),
                new System.Data.SqlClient.SqlParameter("@headimgurl",_headimgurl),
                new System.Data.SqlClient.SqlParameter("@remark",_remark),
                new System.Data.SqlClient.SqlParameter("@groupid",_groupid),
                new System.Data.SqlClient.SqlParameter("@accesstoken",_accesstoken),
                new System.Data.SqlClient.SqlParameter("@subscribe",_subscribe),
                new System.Data.SqlClient.SqlParameter("@subscribe_time",_subscribe_time),
                new System.Data.SqlClient.SqlParameter("@country",_country),
                new System.Data.SqlClient.SqlParameter("@language",_language),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserWxInfo] SET C_UserName=@C_UserName,C_ConsumerUserName=@C_ConsumerUserName,openid=@openid,unionid=@unionid,nickname=@nickname,sex=@sex,headimgurl=@headimgurl,remark=@remark,groupid=@groupid,accesstoken=@accesstoken,subscribe=@subscribe,subscribe_time=@subscribe_time,country=@country,language=@language WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@C_ConsumerUserName",_c_consumerusername),
                new System.Data.SqlClient.SqlParameter("@openid",_openid),
                new System.Data.SqlClient.SqlParameter("@unionid",_unionid),
                new System.Data.SqlClient.SqlParameter("@nickname",_nickname),
                new System.Data.SqlClient.SqlParameter("@sex",_sex),
                new System.Data.SqlClient.SqlParameter("@headimgurl",_headimgurl),
                new System.Data.SqlClient.SqlParameter("@remark",_remark),
                new System.Data.SqlClient.SqlParameter("@groupid",_groupid),
                new System.Data.SqlClient.SqlParameter("@accesstoken",_accesstoken),
                new System.Data.SqlClient.SqlParameter("@subscribe",_subscribe),
                new System.Data.SqlClient.SqlParameter("@subscribe_time",_subscribe_time),
                new System.Data.SqlClient.SqlParameter("@country",_country),
                new System.Data.SqlClient.SqlParameter("@language",_language),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserWxInfo] SET C_UserName=@C_UserName,C_ConsumerUserName=@C_ConsumerUserName,openid=@openid,unionid=@unionid,nickname=@nickname,sex=@sex,headimgurl=@headimgurl,remark=@remark,groupid=@groupid,accesstoken=@accesstoken,subscribe=@subscribe,subscribe_time=@subscribe_time,country=@country,language=@language WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@C_ConsumerUserName",_c_consumerusername),
                new System.Data.SqlClient.SqlParameter("@openid",_openid),
                new System.Data.SqlClient.SqlParameter("@unionid",_unionid),
                new System.Data.SqlClient.SqlParameter("@nickname",_nickname),
                new System.Data.SqlClient.SqlParameter("@sex",_sex),
                new System.Data.SqlClient.SqlParameter("@headimgurl",_headimgurl),
                new System.Data.SqlClient.SqlParameter("@remark",_remark),
                new System.Data.SqlClient.SqlParameter("@groupid",_groupid),
                new System.Data.SqlClient.SqlParameter("@accesstoken",_accesstoken),
                new System.Data.SqlClient.SqlParameter("@subscribe",_subscribe),
                new System.Data.SqlClient.SqlParameter("@subscribe_time",_subscribe_time),
                new System.Data.SqlClient.SqlParameter("@country",_country),
                new System.Data.SqlClient.SqlParameter("@language",_language),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserWxInfo GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,C_UserName,C_ConsumerUserName,openid,unionid,nickname,sex,headimgurl,remark,groupid,accesstoken,subscribe,subscribe_time,country,language FROM [C_UserWxInfo] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserWxInfo>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,C_UserName,C_ConsumerUserName,openid,unionid,nickname,sex,headimgurl,remark,groupid,accesstoken,subscribe,subscribe_time,country,language FROM [C_UserWxInfo] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserWxInfo] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserWxInfo] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserWxInfo> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,C_UserName,C_ConsumerUserName,openid,unionid,nickname,sex,headimgurl,remark,groupid,accesstoken,subscribe,subscribe_time,country,language,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserWxInfo] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserWxInfo>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserWxInfo> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,C_UserName,C_ConsumerUserName,openid,unionid,nickname,sex,headimgurl,remark,groupid,accesstoken,subscribe,subscribe_time,country,language FROM [C_UserWxInfo] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserWxInfo>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserWxInfo> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,C_UserName,C_ConsumerUserName,openid,unionid,nickname,sex,headimgurl,remark,groupid,accesstoken,subscribe,subscribe_time,country,language FROM [C_UserWxInfo]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserWxInfo>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<C_UserWxInfo> GetEntitysByopenid(int openid)
    	{
    		string strSql = "SELECT ID,C_UserName,C_ConsumerUserName,openid,unionid,nickname,sex,headimgurl,remark,groupid,accesstoken,subscribe,subscribe_time,country,language FROM [C_UserWxInfo] WHERE openid=@openid";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@openid",openid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserWxInfo>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class Scale_Anti 
    {
        #region Fields
        //public string str = "AntiCode:50";
        private string _anticode = string.Empty;
        private int _scaleid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public string AntiCode
        {
            get { return _anticode; }
            set { _anticode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ScaleId
        {
            get { return _scaleid; }
            set { _scaleid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [Scale_Anti] (AntiCode,ScaleId) values (@AntiCode,@ScaleId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Scale_Anti]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [Scale_Anti] (AntiCode,ScaleId) values (@AntiCode,@ScaleId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Scale_Anti]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<Scale_Anti> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 AntiCode,ScaleId FROM [Scale_Anti]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Anti>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<Scale_Anti> GetEntitysByScaleId(int scaleid)
    	{
    		string strSql = "SELECT AntiCode,ScaleId FROM [Scale_Anti] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId",scaleid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Anti>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class Scale_Big 
    {
        #region Fields
        //public string str = "BigCode:50";
        private string _bigcode = string.Empty;
        private int _scaleid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public string BigCode
        {
            get { return _bigcode; }
            set { _bigcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ScaleId
        {
            get { return _scaleid; }
            set { _scaleid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [Scale_Big] (BigCode,ScaleId) values (@BigCode,@ScaleId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Scale_Big]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [Scale_Big] (BigCode,ScaleId) values (@BigCode,@ScaleId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Scale_Big]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [Scale_Big] SET BigCode=@BigCode,ScaleId=@ScaleId WHERE ScaleId=@ScaleId;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [Scale_Big] SET BigCode=@BigCode,ScaleId=@ScaleId WHERE ScaleId=@ScaleId;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static Scale_Big GetEntityByID(int id)
    	{
    		string strSql = "SELECT BigCode,ScaleId FROM [Scale_Big] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<Scale_Big>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT BigCode,ScaleId FROM [Scale_Big] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId", pk > 0 ? pk : _scaleid) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [Scale_Big] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [Scale_Big] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Scale_Big> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT BigCode,ScaleId,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [Scale_Big] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Big>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Scale_Big> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT BigCode,ScaleId FROM [Scale_Big] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Big>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<Scale_Big> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 BigCode,ScaleId FROM [Scale_Big]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Big>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<Scale_Big> GetEntitysByScaleId(int scaleid)
    	{
    		string strSql = "SELECT BigCode,ScaleId FROM [Scale_Big] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId",scaleid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Big>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserUpGrade 
    {
        #region Fields
        //public string str = "UserName:2147483647|AuditStat:2147483647|ParentUser:2147483647|OldParentUser:2147483647";
        private int _id;
        private string _username = string.Empty;
        private string _auditstat = string.Empty;
        private int _oldusertypeid;
        private int _newusertypeid;
        private DateTime _datapply = new DateTime(1900,1,1);
        private DateTime _dataudit = new DateTime(1900,1,1);
        private string _parentuser = string.Empty;
        private string _oldparentuser = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 客户名
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 审核状态  未审核/已审核
        /// </summary>
        public string AuditStat
        {
            get { return _auditstat; }
            set { _auditstat = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 原代理级别
        /// </summary>
        public int OldUserTypeID
        {
            get { return _oldusertypeid; }
            set { _oldusertypeid = value; }
        }

        /// <summary>
        /// 申请升级的代理级别
        /// </summary>
        public int NewUserTypeID
        {
            get { return _newusertypeid; }
            set { _newusertypeid = value; }
        }

        /// <summary>
        /// 申请时间
        /// </summary>
        public DateTime DatApply
        {
            get { return _datapply; }
            set { _datapply = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 审核时间
        /// </summary>
        public DateTime DatAudit
        {
            get { return _dataudit; }
            set { _dataudit = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 上级代理
        /// </summary>
        public string ParentUser
        {
            get { return _parentuser; }
            set { _parentuser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OldParentUser
        {
            get { return _oldparentuser; }
            set { _oldparentuser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserUpGrade] (UserName,AuditStat,OldUserTypeID,NewUserTypeID,DatApply,DatAudit,ParentUser,OldParentUser) values (@UserName,@AuditStat,@OldUserTypeID,@NewUserTypeID,@DatApply,@DatAudit,@ParentUser,@OldParentUser);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserUpGrade]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@AuditStat",_auditstat),
                new System.Data.SqlClient.SqlParameter("@OldUserTypeID",_oldusertypeid),
                new System.Data.SqlClient.SqlParameter("@NewUserTypeID",_newusertypeid),
                new System.Data.SqlClient.SqlParameter("@DatApply",_datapply),
                new System.Data.SqlClient.SqlParameter("@DatAudit",_dataudit),
                new System.Data.SqlClient.SqlParameter("@ParentUser",_parentuser),
                new System.Data.SqlClient.SqlParameter("@OldParentUser",_oldparentuser),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserUpGrade] (UserName,AuditStat,OldUserTypeID,NewUserTypeID,DatApply,DatAudit,ParentUser,OldParentUser) values (@UserName,@AuditStat,@OldUserTypeID,@NewUserTypeID,@DatApply,@DatAudit,@ParentUser,@OldParentUser);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserUpGrade]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@AuditStat",_auditstat),
                new System.Data.SqlClient.SqlParameter("@OldUserTypeID",_oldusertypeid),
                new System.Data.SqlClient.SqlParameter("@NewUserTypeID",_newusertypeid),
                new System.Data.SqlClient.SqlParameter("@DatApply",_datapply),
                new System.Data.SqlClient.SqlParameter("@DatAudit",_dataudit),
                new System.Data.SqlClient.SqlParameter("@ParentUser",_parentuser),
                new System.Data.SqlClient.SqlParameter("@OldParentUser",_oldparentuser),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserUpGrade] SET UserName=@UserName,AuditStat=@AuditStat,OldUserTypeID=@OldUserTypeID,NewUserTypeID=@NewUserTypeID,DatApply=@DatApply,DatAudit=@DatAudit,ParentUser=@ParentUser,OldParentUser=@OldParentUser WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@AuditStat",_auditstat),
                new System.Data.SqlClient.SqlParameter("@OldUserTypeID",_oldusertypeid),
                new System.Data.SqlClient.SqlParameter("@NewUserTypeID",_newusertypeid),
                new System.Data.SqlClient.SqlParameter("@DatApply",_datapply),
                new System.Data.SqlClient.SqlParameter("@DatAudit",_dataudit),
                new System.Data.SqlClient.SqlParameter("@ParentUser",_parentuser),
                new System.Data.SqlClient.SqlParameter("@OldParentUser",_oldparentuser),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserUpGrade] SET UserName=@UserName,AuditStat=@AuditStat,OldUserTypeID=@OldUserTypeID,NewUserTypeID=@NewUserTypeID,DatApply=@DatApply,DatAudit=@DatAudit,ParentUser=@ParentUser,OldParentUser=@OldParentUser WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@AuditStat",_auditstat),
                new System.Data.SqlClient.SqlParameter("@OldUserTypeID",_oldusertypeid),
                new System.Data.SqlClient.SqlParameter("@NewUserTypeID",_newusertypeid),
                new System.Data.SqlClient.SqlParameter("@DatApply",_datapply),
                new System.Data.SqlClient.SqlParameter("@DatAudit",_dataudit),
                new System.Data.SqlClient.SqlParameter("@ParentUser",_parentuser),
                new System.Data.SqlClient.SqlParameter("@OldParentUser",_oldparentuser),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserUpGrade GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,UserName,AuditStat,OldUserTypeID,NewUserTypeID,DatApply,DatAudit,ParentUser,OldParentUser FROM [C_UserUpGrade] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserUpGrade>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,UserName,AuditStat,OldUserTypeID,NewUserTypeID,DatApply,DatAudit,ParentUser,OldParentUser FROM [C_UserUpGrade] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserUpGrade] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserUpGrade] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserUpGrade> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,AuditStat,OldUserTypeID,NewUserTypeID,DatApply,DatAudit,ParentUser,OldParentUser,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserUpGrade] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserUpGrade>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserUpGrade> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,AuditStat,OldUserTypeID,NewUserTypeID,DatApply,DatAudit,ParentUser,OldParentUser FROM [C_UserUpGrade] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserUpGrade>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserUpGrade> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,UserName,AuditStat,OldUserTypeID,NewUserTypeID,DatApply,DatAudit,ParentUser,OldParentUser FROM [C_UserUpGrade]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserUpGrade>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<C_UserUpGrade> GetEntitysByOldUserTypeID(int oldusertypeid)
    	{
    		string strSql = "SELECT ID,UserName,AuditStat,OldUserTypeID,NewUserTypeID,DatApply,DatAudit,ParentUser,OldParentUser FROM [C_UserUpGrade] WHERE OldUserTypeID=@OldUserTypeID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@OldUserTypeID",oldusertypeid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserUpGrade>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class ScaleOutStoke 
    {
        #region Fields
        //public string str = "Shipper:50|BigCode:50|MiddleCode:50|SmallCode:50|AntiCode:50|ProductNo:50|Consignee:50|State:50|OutOrderNo:50";
        private int _id;
        private string _shipper = string.Empty;
        private string _bigcode = string.Empty;
        private string _middlecode = string.Empty;
        private string _smallcode = string.Empty;
        private string _anticode = string.Empty;
        private string _productno = string.Empty;
        private string _consignee = string.Empty;
        private string _state = string.Empty;
        private int _createtime;
        private string _outorderno = string.Empty;
        private int _outway;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 出货人
        /// </summary>
        public string Shipper
        {
            get { return _shipper; }
            set { _shipper = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 大标
        /// </summary>
        public string BigCode
        {
            get { return _bigcode; }
            set { _bigcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string MiddleCode
        {
            get { return _middlecode; }
            set { _middlecode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 小标
        /// </summary>
        public string SmallCode
        {
            get { return _smallcode; }
            set { _smallcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 防伪标
        /// </summary>
        public string AntiCode
        {
            get { return _anticode; }
            set { _anticode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 出货产品
        /// </summary>
        public string ProductNo
        {
            get { return _productno; }
            set { _productno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 出货人
        /// </summary>
        public string Consignee
        {
            get { return _consignee; }
            set { _consignee = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 状态
        /// </summary>
        public string State
        {
            get { return _state; }
            set { _state = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 出货时间
        /// </summary>
        public int CreateTime
        {
            get { return _createtime; }
            set { _createtime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OutOrderNo
        {
            get { return _outorderno; }
            set { _outorderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int OutWay
        {
            get { return _outway; }
            set { _outway = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [ScaleOutStoke] (Shipper,BigCode,MiddleCode,SmallCode,AntiCode,ProductNo,Consignee,State,CreateTime,OutOrderNo,OutWay) values (@Shipper,@BigCode,@MiddleCode,@SmallCode,@AntiCode,@ProductNo,@Consignee,@State,@CreateTime,@OutOrderNo,@OutWay);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleOutStoke]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@ProductNo",_productno),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [ScaleOutStoke] (Shipper,BigCode,MiddleCode,SmallCode,AntiCode,ProductNo,Consignee,State,CreateTime,OutOrderNo,OutWay) values (@Shipper,@BigCode,@MiddleCode,@SmallCode,@AntiCode,@ProductNo,@Consignee,@State,@CreateTime,@OutOrderNo,@OutWay);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleOutStoke]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@ProductNo",_productno),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [ScaleOutStoke] SET Shipper=@Shipper,BigCode=@BigCode,MiddleCode=@MiddleCode,SmallCode=@SmallCode,AntiCode=@AntiCode,ProductNo=@ProductNo,Consignee=@Consignee,State=@State,CreateTime=@CreateTime,OutOrderNo=@OutOrderNo,OutWay=@OutWay WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@ProductNo",_productno),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [ScaleOutStoke] SET Shipper=@Shipper,BigCode=@BigCode,MiddleCode=@MiddleCode,SmallCode=@SmallCode,AntiCode=@AntiCode,ProductNo=@ProductNo,Consignee=@Consignee,State=@State,CreateTime=@CreateTime,OutOrderNo=@OutOrderNo,OutWay=@OutWay WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@ProductNo",_productno),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@CreateTime",_createtime),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static ScaleOutStoke GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Shipper,BigCode,MiddleCode,SmallCode,AntiCode,ProductNo,Consignee,State,CreateTime,OutOrderNo,OutWay FROM [ScaleOutStoke] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<ScaleOutStoke>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Shipper,BigCode,MiddleCode,SmallCode,AntiCode,ProductNo,Consignee,State,CreateTime,OutOrderNo,OutWay FROM [ScaleOutStoke] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [ScaleOutStoke] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [ScaleOutStoke] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<ScaleOutStoke> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Shipper,BigCode,MiddleCode,SmallCode,AntiCode,ProductNo,Consignee,State,CreateTime,OutOrderNo,OutWay,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [ScaleOutStoke] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleOutStoke>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<ScaleOutStoke> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Shipper,BigCode,MiddleCode,SmallCode,AntiCode,ProductNo,Consignee,State,CreateTime,OutOrderNo,OutWay FROM [ScaleOutStoke] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleOutStoke>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<ScaleOutStoke> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Shipper,BigCode,MiddleCode,SmallCode,AntiCode,ProductNo,Consignee,State,CreateTime,OutOrderNo,OutWay FROM [ScaleOutStoke]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleOutStoke>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class Scale_Middle 
    {
        #region Fields
        //public string str = "MiddleCode:50";
        private string _middlecode = string.Empty;
        private int _scaleid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public string MiddleCode
        {
            get { return _middlecode; }
            set { _middlecode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ScaleId
        {
            get { return _scaleid; }
            set { _scaleid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [Scale_Middle] (MiddleCode,ScaleId) values (@MiddleCode,@ScaleId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Scale_Middle]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [Scale_Middle] (MiddleCode,ScaleId) values (@MiddleCode,@ScaleId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Scale_Middle]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [Scale_Middle] SET MiddleCode=@MiddleCode,ScaleId=@ScaleId WHERE ScaleId=@ScaleId;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [Scale_Middle] SET MiddleCode=@MiddleCode,ScaleId=@ScaleId WHERE ScaleId=@ScaleId;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static Scale_Middle GetEntityByID(int id)
    	{
    		string strSql = "SELECT MiddleCode,ScaleId FROM [Scale_Middle] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<Scale_Middle>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT MiddleCode,ScaleId FROM [Scale_Middle] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId", pk > 0 ? pk : _scaleid) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [Scale_Middle] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [Scale_Middle] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Scale_Middle> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT MiddleCode,ScaleId,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [Scale_Middle] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Middle>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Scale_Middle> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT MiddleCode,ScaleId FROM [Scale_Middle] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Middle>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<Scale_Middle> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 MiddleCode,ScaleId FROM [Scale_Middle]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Middle>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<Scale_Middle> GetEntitysByScaleId(int scaleid)
    	{
    		string strSql = "SELECT MiddleCode,ScaleId FROM [Scale_Middle] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId",scaleid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Middle>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class Scale_Small 
    {
        #region Fields
        //public string str = "SmallCode:50";
        private string _smallcode = string.Empty;
        private int _scaleid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public string SmallCode
        {
            get { return _smallcode; }
            set { _smallcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ScaleId
        {
            get { return _scaleid; }
            set { _scaleid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [Scale_Small] (SmallCode,ScaleId) values (@SmallCode,@ScaleId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Scale_Small]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [Scale_Small] (SmallCode,ScaleId) values (@SmallCode,@ScaleId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Scale_Small]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@ScaleId",_scaleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<Scale_Small> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 SmallCode,ScaleId FROM [Scale_Small]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Small>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<Scale_Small> GetEntitysByScaleId(int scaleid)
    	{
    		string strSql = "SELECT SmallCode,ScaleId FROM [Scale_Small] WHERE ScaleId=@ScaleId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ScaleId",scaleid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<Scale_Small>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserRebate 
    {
        #region Fields
        //public string str = "Issuer:50|Cat:2147483647|Type:50|State:50|R_People:50|B_User:50|Rate:50|OrderNo:2147483647";
        private int _id;
        private string _issuer = string.Empty;
        private string _cat = string.Empty;
        private string _type = string.Empty;
        private string _state = string.Empty;
        private decimal _money;
        private decimal _ordermoney;
        private DateTime _datcreat = new DateTime(1900,1,1);
        private DateTime _datverity = new DateTime(1900,1,1);
        private string _r_people = string.Empty;
        private string _b_user = string.Empty;
        private string _rate = string.Empty;
        private int _tjtype;
        private string _orderno = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 返利发放人   总部为“总部”两字
        /// </summary>
        public string Issuer
        {
            get { return _issuer; }
            set { _issuer = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 拿货返利/推荐返利
        /// </summary>
        public string Cat
        {
            get { return _cat; }
            set { _cat = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 类型
        /// </summary>
        public string Type
        {
            get { return _type; }
            set { _type = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// (未发放/已发放)
        /// </summary>
        public string State
        {
            get { return _state; }
            set { _state = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 返利金额
        /// </summary>
        public decimal Money
        {
            get { return _money; }
            set { _money = value; }
        }

        /// <summary>
        /// 订单总价
        /// </summary>
        public decimal OrderMoney
        {
            get { return _ordermoney; }
            set { _ordermoney = value; }
        }

        /// <summary>
        /// 申请时间
        /// </summary>
        public DateTime DatCreat
        {
            get { return _datcreat; }
            set { _datcreat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 审核时间
        /// </summary>
        public DateTime DatVerity
        {
            get { return _datverity; }
            set { _datverity = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 返利人
        /// </summary>
        public string R_People
        {
            get { return _r_people; }
            set { _r_people = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string B_User
        {
            get { return _b_user; }
            set { _b_user = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Rate
        {
            get { return _rate; }
            set { _rate = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 推荐级别  推荐一代/推荐二代等
        /// </summary>
        public int tjType
        {
            get { return _tjtype; }
            set { _tjtype = value; }
        }

        /// <summary>
        /// 订单号
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserRebate] (Issuer,Cat,Type,State,Money,OrderMoney,DatCreat,DatVerity,R_People,B_User,Rate,tjType,OrderNo) values (@Issuer,@Cat,@Type,@State,@Money,@OrderMoney,@DatCreat,@DatVerity,@R_People,@B_User,@Rate,@tjType,@OrderNo);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserRebate]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Issuer",_issuer),
                new System.Data.SqlClient.SqlParameter("@Cat",_cat),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@OrderMoney",_ordermoney),
                new System.Data.SqlClient.SqlParameter("@DatCreat",_datcreat),
                new System.Data.SqlClient.SqlParameter("@DatVerity",_datverity),
                new System.Data.SqlClient.SqlParameter("@R_People",_r_people),
                new System.Data.SqlClient.SqlParameter("@B_User",_b_user),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@tjType",_tjtype),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserRebate] (Issuer,Cat,Type,State,Money,OrderMoney,DatCreat,DatVerity,R_People,B_User,Rate,tjType,OrderNo) values (@Issuer,@Cat,@Type,@State,@Money,@OrderMoney,@DatCreat,@DatVerity,@R_People,@B_User,@Rate,@tjType,@OrderNo);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserRebate]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Issuer",_issuer),
                new System.Data.SqlClient.SqlParameter("@Cat",_cat),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@OrderMoney",_ordermoney),
                new System.Data.SqlClient.SqlParameter("@DatCreat",_datcreat),
                new System.Data.SqlClient.SqlParameter("@DatVerity",_datverity),
                new System.Data.SqlClient.SqlParameter("@R_People",_r_people),
                new System.Data.SqlClient.SqlParameter("@B_User",_b_user),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@tjType",_tjtype),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserRebate] SET Issuer=@Issuer,Cat=@Cat,Type=@Type,State=@State,Money=@Money,OrderMoney=@OrderMoney,DatCreat=@DatCreat,DatVerity=@DatVerity,R_People=@R_People,B_User=@B_User,Rate=@Rate,tjType=@tjType,OrderNo=@OrderNo WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Issuer",_issuer),
                new System.Data.SqlClient.SqlParameter("@Cat",_cat),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@OrderMoney",_ordermoney),
                new System.Data.SqlClient.SqlParameter("@DatCreat",_datcreat),
                new System.Data.SqlClient.SqlParameter("@DatVerity",_datverity),
                new System.Data.SqlClient.SqlParameter("@R_People",_r_people),
                new System.Data.SqlClient.SqlParameter("@B_User",_b_user),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@tjType",_tjtype),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserRebate] SET Issuer=@Issuer,Cat=@Cat,Type=@Type,State=@State,Money=@Money,OrderMoney=@OrderMoney,DatCreat=@DatCreat,DatVerity=@DatVerity,R_People=@R_People,B_User=@B_User,Rate=@Rate,tjType=@tjType,OrderNo=@OrderNo WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@Issuer",_issuer),
                new System.Data.SqlClient.SqlParameter("@Cat",_cat),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Money",_money),
                new System.Data.SqlClient.SqlParameter("@OrderMoney",_ordermoney),
                new System.Data.SqlClient.SqlParameter("@DatCreat",_datcreat),
                new System.Data.SqlClient.SqlParameter("@DatVerity",_datverity),
                new System.Data.SqlClient.SqlParameter("@R_People",_r_people),
                new System.Data.SqlClient.SqlParameter("@B_User",_b_user),
                new System.Data.SqlClient.SqlParameter("@Rate",_rate),
                new System.Data.SqlClient.SqlParameter("@tjType",_tjtype),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserRebate GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,Issuer,Cat,Type,State,Money,OrderMoney,DatCreat,DatVerity,R_People,B_User,Rate,tjType,OrderNo FROM [C_UserRebate] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserRebate>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,Issuer,Cat,Type,State,Money,OrderMoney,DatCreat,DatVerity,R_People,B_User,Rate,tjType,OrderNo FROM [C_UserRebate] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserRebate] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserRebate] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserRebate> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Issuer,Cat,Type,State,Money,OrderMoney,DatCreat,DatVerity,R_People,B_User,Rate,tjType,OrderNo,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserRebate] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserRebate>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserRebate> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,Issuer,Cat,Type,State,Money,OrderMoney,DatCreat,DatVerity,R_People,B_User,Rate,tjType,OrderNo FROM [C_UserRebate] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserRebate>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserRebate> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,Issuer,Cat,Type,State,Money,OrderMoney,DatCreat,DatVerity,R_People,B_User,Rate,tjType,OrderNo FROM [C_UserRebate]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserRebate>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class jf_Goods 
    {
        #region Fields
        //public string str = "GoodsName:100|Main_img:200|Detail:2147483647|DetailTemp:2147483647|PublishStat:2147483647";
        private int _id;
        private string _goodsname = string.Empty;
        private string _main_img = string.Empty;
        private string _detail = string.Empty;
        private string _detailtemp = string.Empty;
        private int _saleintegral;
        private string _publishstat = string.Empty;
        private int _quantity;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 礼品名称
        /// </summary>
        public string GoodsName
        {
            get { return _goodsname; }
            set { _goodsname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 100); }
        }

        /// <summary>
        /// 主图
        /// </summary>
        public string Main_img
        {
            get { return _main_img; }
            set { _main_img = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Detail
        {
            get { return _detail; }
            set { _detail = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string DetailTemp
        {
            get { return _detailtemp; }
            set { _detailtemp = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 销售积分
        /// </summary>
        public int SaleIntegral
        {
            get { return _saleintegral; }
            set { _saleintegral = value; }
        }

        /// <summary>
        /// 礼品状态   未上架/已上架
        /// </summary>
        public string PublishStat
        {
            get { return _publishstat; }
            set { _publishstat = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 库存
        /// </summary>
        public int Quantity
        {
            get { return _quantity; }
            set { _quantity = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [jf_Goods] (GoodsName,Main_img,Detail,DetailTemp,SaleIntegral,PublishStat,Quantity) values (@GoodsName,@Main_img,@Detail,@DetailTemp,@SaleIntegral,@PublishStat,@Quantity);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_Goods]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@GoodsName",_goodsname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@DetailTemp",_detailtemp),
                new System.Data.SqlClient.SqlParameter("@SaleIntegral",_saleintegral),
                new System.Data.SqlClient.SqlParameter("@PublishStat",_publishstat),
                new System.Data.SqlClient.SqlParameter("@Quantity",_quantity),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [jf_Goods] (GoodsName,Main_img,Detail,DetailTemp,SaleIntegral,PublishStat,Quantity) values (@GoodsName,@Main_img,@Detail,@DetailTemp,@SaleIntegral,@PublishStat,@Quantity);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_Goods]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@GoodsName",_goodsname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@DetailTemp",_detailtemp),
                new System.Data.SqlClient.SqlParameter("@SaleIntegral",_saleintegral),
                new System.Data.SqlClient.SqlParameter("@PublishStat",_publishstat),
                new System.Data.SqlClient.SqlParameter("@Quantity",_quantity),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [jf_Goods] SET GoodsName=@GoodsName,Main_img=@Main_img,Detail=@Detail,DetailTemp=@DetailTemp,SaleIntegral=@SaleIntegral,PublishStat=@PublishStat,Quantity=@Quantity WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@GoodsName",_goodsname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@DetailTemp",_detailtemp),
                new System.Data.SqlClient.SqlParameter("@SaleIntegral",_saleintegral),
                new System.Data.SqlClient.SqlParameter("@PublishStat",_publishstat),
                new System.Data.SqlClient.SqlParameter("@Quantity",_quantity),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [jf_Goods] SET GoodsName=@GoodsName,Main_img=@Main_img,Detail=@Detail,DetailTemp=@DetailTemp,SaleIntegral=@SaleIntegral,PublishStat=@PublishStat,Quantity=@Quantity WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@GoodsName",_goodsname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@DetailTemp",_detailtemp),
                new System.Data.SqlClient.SqlParameter("@SaleIntegral",_saleintegral),
                new System.Data.SqlClient.SqlParameter("@PublishStat",_publishstat),
                new System.Data.SqlClient.SqlParameter("@Quantity",_quantity),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static jf_Goods GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,GoodsName,Main_img,Detail,DetailTemp,SaleIntegral,PublishStat,Quantity FROM [jf_Goods] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<jf_Goods>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,GoodsName,Main_img,Detail,DetailTemp,SaleIntegral,PublishStat,Quantity FROM [jf_Goods] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [jf_Goods] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [jf_Goods] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_Goods> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,GoodsName,Main_img,Detail,DetailTemp,SaleIntegral,PublishStat,Quantity,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [jf_Goods] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_Goods>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_Goods> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,GoodsName,Main_img,Detail,DetailTemp,SaleIntegral,PublishStat,Quantity FROM [jf_Goods] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_Goods>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<jf_Goods> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,GoodsName,Main_img,Detail,DetailTemp,SaleIntegral,PublishStat,Quantity FROM [jf_Goods]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_Goods>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserPrize 
    {
        #region Fields
        //public string str = "AntiCode:100|Name:50|Phone:50|Address:50|State:50|Prize:50";
        private int _id;
        private string _anticode = string.Empty;
        private string _name = string.Empty;
        private string _phone = string.Empty;
        private DateTime _datcreate = new DateTime(1900,1,1);
        private DateTime _datverify = new DateTime(1900,1,1);
        private string _address = string.Empty;
        private string _state = string.Empty;
        private string _prize = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string AntiCode
        {
            get { return _anticode; }
            set { _anticode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 100); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Phone
        {
            get { return _phone; }
            set { _phone = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DatCreate
        {
            get { return _datcreate; }
            set { _datcreate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DatVerify
        {
            get { return _datverify; }
            set { _datverify = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string State
        {
            get { return _state; }
            set { _state = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Prize
        {
            get { return _prize; }
            set { _prize = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserPrize] (AntiCode,Name,Phone,DatCreate,DatVerify,Address,State,Prize) values (@AntiCode,@Name,@Phone,@DatCreate,@DatVerify,@Address,@State,@Prize);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserPrize]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Prize",_prize),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserPrize] (AntiCode,Name,Phone,DatCreate,DatVerify,Address,State,Prize) values (@AntiCode,@Name,@Phone,@DatCreate,@DatVerify,@Address,@State,@Prize);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserPrize]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Prize",_prize),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserPrize] SET AntiCode=@AntiCode,Name=@Name,Phone=@Phone,DatCreate=@DatCreate,DatVerify=@DatVerify,Address=@Address,State=@State,Prize=@Prize WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Prize",_prize),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserPrize] SET AntiCode=@AntiCode,Name=@Name,Phone=@Phone,DatCreate=@DatCreate,DatVerify=@DatVerify,Address=@Address,State=@State,Prize=@Prize WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@Phone",_phone),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatVerify",_datverify),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Prize",_prize),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserPrize GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,AntiCode,Name,Phone,DatCreate,DatVerify,Address,State,Prize FROM [C_UserPrize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserPrize>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,AntiCode,Name,Phone,DatCreate,DatVerify,Address,State,Prize FROM [C_UserPrize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserPrize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserPrize] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserPrize> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,AntiCode,Name,Phone,DatCreate,DatVerify,Address,State,Prize,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserPrize] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserPrize>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserPrize> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,AntiCode,Name,Phone,DatCreate,DatVerify,Address,State,Prize FROM [C_UserPrize] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserPrize>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserPrize> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,AntiCode,Name,Phone,DatCreate,DatVerify,Address,State,Prize FROM [C_UserPrize]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserPrize>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class PDALog 
    {
        #region Fields
        //public string str = "EventName:50|TypeName:50|BarCode:500|PDAUser:50|OtherInfo:300|Result:50";
        private int _id;
        private string _eventname = string.Empty;
        private string _typename = string.Empty;
        private string _barcode = string.Empty;
        private string _pdauser = string.Empty;
        private string _otherinfo = string.Empty;
        private string _result = string.Empty;
        private int _opeartime;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string EventName
        {
            get { return _eventname; }
            set { _eventname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string TypeName
        {
            get { return _typename; }
            set { _typename = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BarCode
        {
            get { return _barcode; }
            set { _barcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PDAUser
        {
            get { return _pdauser; }
            set { _pdauser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OtherInfo
        {
            get { return _otherinfo; }
            set { _otherinfo = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 300); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Result
        {
            get { return _result; }
            set { _result = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int OpearTime
        {
            get { return _opeartime; }
            set { _opeartime = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [PDALog] (EventName,TypeName,BarCode,PDAUser,OtherInfo,Result,OpearTime) values (@EventName,@TypeName,@BarCode,@PDAUser,@OtherInfo,@Result,@OpearTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDALog]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@EventName",_eventname),
                new System.Data.SqlClient.SqlParameter("@TypeName",_typename),
                new System.Data.SqlClient.SqlParameter("@BarCode",_barcode),
                new System.Data.SqlClient.SqlParameter("@PDAUser",_pdauser),
                new System.Data.SqlClient.SqlParameter("@OtherInfo",_otherinfo),
                new System.Data.SqlClient.SqlParameter("@Result",_result),
                new System.Data.SqlClient.SqlParameter("@OpearTime",_opeartime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [PDALog] (EventName,TypeName,BarCode,PDAUser,OtherInfo,Result,OpearTime) values (@EventName,@TypeName,@BarCode,@PDAUser,@OtherInfo,@Result,@OpearTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDALog]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@EventName",_eventname),
                new System.Data.SqlClient.SqlParameter("@TypeName",_typename),
                new System.Data.SqlClient.SqlParameter("@BarCode",_barcode),
                new System.Data.SqlClient.SqlParameter("@PDAUser",_pdauser),
                new System.Data.SqlClient.SqlParameter("@OtherInfo",_otherinfo),
                new System.Data.SqlClient.SqlParameter("@Result",_result),
                new System.Data.SqlClient.SqlParameter("@OpearTime",_opeartime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [PDALog] SET EventName=@EventName,TypeName=@TypeName,BarCode=@BarCode,PDAUser=@PDAUser,OtherInfo=@OtherInfo,Result=@Result,OpearTime=@OpearTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@EventName",_eventname),
                new System.Data.SqlClient.SqlParameter("@TypeName",_typename),
                new System.Data.SqlClient.SqlParameter("@BarCode",_barcode),
                new System.Data.SqlClient.SqlParameter("@PDAUser",_pdauser),
                new System.Data.SqlClient.SqlParameter("@OtherInfo",_otherinfo),
                new System.Data.SqlClient.SqlParameter("@Result",_result),
                new System.Data.SqlClient.SqlParameter("@OpearTime",_opeartime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [PDALog] SET EventName=@EventName,TypeName=@TypeName,BarCode=@BarCode,PDAUser=@PDAUser,OtherInfo=@OtherInfo,Result=@Result,OpearTime=@OpearTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@EventName",_eventname),
                new System.Data.SqlClient.SqlParameter("@TypeName",_typename),
                new System.Data.SqlClient.SqlParameter("@BarCode",_barcode),
                new System.Data.SqlClient.SqlParameter("@PDAUser",_pdauser),
                new System.Data.SqlClient.SqlParameter("@OtherInfo",_otherinfo),
                new System.Data.SqlClient.SqlParameter("@Result",_result),
                new System.Data.SqlClient.SqlParameter("@OpearTime",_opeartime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static PDALog GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,EventName,TypeName,BarCode,PDAUser,OtherInfo,Result,OpearTime FROM [PDALog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<PDALog>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,EventName,TypeName,BarCode,PDAUser,OtherInfo,Result,OpearTime FROM [PDALog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [PDALog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [PDALog] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDALog> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,EventName,TypeName,BarCode,PDAUser,OtherInfo,Result,OpearTime,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [PDALog] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDALog>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDALog> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,EventName,TypeName,BarCode,PDAUser,OtherInfo,Result,OpearTime FROM [PDALog] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDALog>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<PDALog> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,EventName,TypeName,BarCode,PDAUser,OtherInfo,Result,OpearTime FROM [PDALog]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<PDALog>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserMater 
    {
        #region Fields
        //public string str = "MaterType:2147483647|MaterUrl:2147483647|C_UserName:50";
        private int _id;
        private string _matertype = string.Empty;
        private string _materurl = string.Empty;
        private string _c_username = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 资源类型   img/video
        /// </summary>
        public string MaterType
        {
            get { return _matertype; }
            set { _matertype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 素材路径
        /// </summary>
        public string MaterUrl
        {
            get { return _materurl; }
            set { _materurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// C_User表的 UserName
        /// </summary>
        public string C_UserName
        {
            get { return _c_username; }
            set { _c_username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 添加时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserMater] (MaterType,MaterUrl,C_UserName,Dat) values (@MaterType,@MaterUrl,@C_UserName,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserMater]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MaterType",_matertype),
                new System.Data.SqlClient.SqlParameter("@MaterUrl",_materurl),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserMater] (MaterType,MaterUrl,C_UserName,Dat) values (@MaterType,@MaterUrl,@C_UserName,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserMater]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MaterType",_matertype),
                new System.Data.SqlClient.SqlParameter("@MaterUrl",_materurl),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserMater] SET MaterType=@MaterType,MaterUrl=@MaterUrl,C_UserName=@C_UserName,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MaterType",_matertype),
                new System.Data.SqlClient.SqlParameter("@MaterUrl",_materurl),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserMater] SET MaterType=@MaterType,MaterUrl=@MaterUrl,C_UserName=@C_UserName,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MaterType",_matertype),
                new System.Data.SqlClient.SqlParameter("@MaterUrl",_materurl),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserMater GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,MaterType,MaterUrl,C_UserName,Dat FROM [C_UserMater] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserMater>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,MaterType,MaterUrl,C_UserName,Dat FROM [C_UserMater] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserMater] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserMater] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserMater> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MaterType,MaterUrl,C_UserName,Dat,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserMater] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserMater>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserMater> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MaterType,MaterUrl,C_UserName,Dat FROM [C_UserMater] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserMater>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserMater> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,MaterType,MaterUrl,C_UserName,Dat FROM [C_UserMater]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserMater>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_WxUser 
    {
        #region Fields
        //public string str = "UserName:2147483647|PassWord:50|NickName:50|Mobile:50|TrueName:50|WxNo:50|Email:50|PortraitUrl:2147483647|GrandpaUser:2147483647|PaterUser:2147483647|WxInviteQCode:2147483647|TooGrandpaUser:2147483647";
        private int _id;
        private string _username = string.Empty;
        private string _password = string.Empty;
        private string _nickname = string.Empty;
        private string _mobile = string.Empty;
        private bool _isvalid;
        private string _truename = string.Empty;
        private string _wxno = string.Empty;
        private DateTime _datregister = new DateTime(1900,1,1);
        private string _email = string.Empty;
        private string _portraiturl = string.Empty;
        private int _grade;
        private string _grandpauser = string.Empty;
        private string _pateruser = string.Empty;
        private string _wxinviteqcode = string.Empty;
        private string _toograndpauser = string.Empty;
        private DateTime _datlastprizedraw = new DateTime(1900,1,1);
        private int _prizedrawcnt;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PassWord
        {
            get { return _password; }
            set { _password = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string NickName
        {
            get { return _nickname; }
            set { _nickname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Mobile
        {
            get { return _mobile; }
            set { _mobile = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsValid
        {
            get { return _isvalid; }
            set { _isvalid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string TrueName
        {
            get { return _truename; }
            set { _truename = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WxNo
        {
            get { return _wxno; }
            set { _wxno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DatRegister
        {
            get { return _datregister; }
            set { _datregister = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Email
        {
            get { return _email; }
            set { _email = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PortraitUrl
        {
            get { return _portraiturl; }
            set { _portraiturl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Grade
        {
            get { return _grade; }
            set { _grade = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string GrandpaUser
        {
            get { return _grandpauser; }
            set { _grandpauser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PaterUser
        {
            get { return _pateruser; }
            set { _pateruser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WxInviteQCode
        {
            get { return _wxinviteqcode; }
            set { _wxinviteqcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string TooGrandpaUser
        {
            get { return _toograndpauser; }
            set { _toograndpauser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DatLastPrizeDraw
        {
            get { return _datlastprizedraw; }
            set { _datlastprizedraw = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int PrizeDrawCnt
        {
            get { return _prizedrawcnt; }
            set { _prizedrawcnt = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_WxUser] (UserName,PassWord,NickName,Mobile,IsValid,TrueName,WxNo,DatRegister,Email,PortraitUrl,Grade,GrandpaUser,PaterUser,WxInviteQCode,TooGrandpaUser,DatLastPrizeDraw,PrizeDrawCnt) values (@UserName,@PassWord,@NickName,@Mobile,@IsValid,@TrueName,@WxNo,@DatRegister,@Email,@PortraitUrl,@Grade,@GrandpaUser,@PaterUser,@WxInviteQCode,@TooGrandpaUser,@DatLastPrizeDraw,@PrizeDrawCnt);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_WxUser]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@NickName",_nickname),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@TrueName",_truename),
                new System.Data.SqlClient.SqlParameter("@WxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@DatRegister",_datregister),
                new System.Data.SqlClient.SqlParameter("@Email",_email),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@Grade",_grade),
                new System.Data.SqlClient.SqlParameter("@GrandpaUser",_grandpauser),
                new System.Data.SqlClient.SqlParameter("@PaterUser",_pateruser),
                new System.Data.SqlClient.SqlParameter("@WxInviteQCode",_wxinviteqcode),
                new System.Data.SqlClient.SqlParameter("@TooGrandpaUser",_toograndpauser),
                new System.Data.SqlClient.SqlParameter("@DatLastPrizeDraw",_datlastprizedraw),
                new System.Data.SqlClient.SqlParameter("@PrizeDrawCnt",_prizedrawcnt),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_WxUser] (UserName,PassWord,NickName,Mobile,IsValid,TrueName,WxNo,DatRegister,Email,PortraitUrl,Grade,GrandpaUser,PaterUser,WxInviteQCode,TooGrandpaUser,DatLastPrizeDraw,PrizeDrawCnt) values (@UserName,@PassWord,@NickName,@Mobile,@IsValid,@TrueName,@WxNo,@DatRegister,@Email,@PortraitUrl,@Grade,@GrandpaUser,@PaterUser,@WxInviteQCode,@TooGrandpaUser,@DatLastPrizeDraw,@PrizeDrawCnt);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_WxUser]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@NickName",_nickname),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@TrueName",_truename),
                new System.Data.SqlClient.SqlParameter("@WxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@DatRegister",_datregister),
                new System.Data.SqlClient.SqlParameter("@Email",_email),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@Grade",_grade),
                new System.Data.SqlClient.SqlParameter("@GrandpaUser",_grandpauser),
                new System.Data.SqlClient.SqlParameter("@PaterUser",_pateruser),
                new System.Data.SqlClient.SqlParameter("@WxInviteQCode",_wxinviteqcode),
                new System.Data.SqlClient.SqlParameter("@TooGrandpaUser",_toograndpauser),
                new System.Data.SqlClient.SqlParameter("@DatLastPrizeDraw",_datlastprizedraw),
                new System.Data.SqlClient.SqlParameter("@PrizeDrawCnt",_prizedrawcnt),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_WxUser] SET UserName=@UserName,PassWord=@PassWord,NickName=@NickName,Mobile=@Mobile,IsValid=@IsValid,TrueName=@TrueName,WxNo=@WxNo,DatRegister=@DatRegister,Email=@Email,PortraitUrl=@PortraitUrl,Grade=@Grade,GrandpaUser=@GrandpaUser,PaterUser=@PaterUser,WxInviteQCode=@WxInviteQCode,TooGrandpaUser=@TooGrandpaUser,DatLastPrizeDraw=@DatLastPrizeDraw,PrizeDrawCnt=@PrizeDrawCnt WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@NickName",_nickname),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@TrueName",_truename),
                new System.Data.SqlClient.SqlParameter("@WxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@DatRegister",_datregister),
                new System.Data.SqlClient.SqlParameter("@Email",_email),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@Grade",_grade),
                new System.Data.SqlClient.SqlParameter("@GrandpaUser",_grandpauser),
                new System.Data.SqlClient.SqlParameter("@PaterUser",_pateruser),
                new System.Data.SqlClient.SqlParameter("@WxInviteQCode",_wxinviteqcode),
                new System.Data.SqlClient.SqlParameter("@TooGrandpaUser",_toograndpauser),
                new System.Data.SqlClient.SqlParameter("@DatLastPrizeDraw",_datlastprizedraw),
                new System.Data.SqlClient.SqlParameter("@PrizeDrawCnt",_prizedrawcnt),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_WxUser] SET UserName=@UserName,PassWord=@PassWord,NickName=@NickName,Mobile=@Mobile,IsValid=@IsValid,TrueName=@TrueName,WxNo=@WxNo,DatRegister=@DatRegister,Email=@Email,PortraitUrl=@PortraitUrl,Grade=@Grade,GrandpaUser=@GrandpaUser,PaterUser=@PaterUser,WxInviteQCode=@WxInviteQCode,TooGrandpaUser=@TooGrandpaUser,DatLastPrizeDraw=@DatLastPrizeDraw,PrizeDrawCnt=@PrizeDrawCnt WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@NickName",_nickname),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@TrueName",_truename),
                new System.Data.SqlClient.SqlParameter("@WxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@DatRegister",_datregister),
                new System.Data.SqlClient.SqlParameter("@Email",_email),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@Grade",_grade),
                new System.Data.SqlClient.SqlParameter("@GrandpaUser",_grandpauser),
                new System.Data.SqlClient.SqlParameter("@PaterUser",_pateruser),
                new System.Data.SqlClient.SqlParameter("@WxInviteQCode",_wxinviteqcode),
                new System.Data.SqlClient.SqlParameter("@TooGrandpaUser",_toograndpauser),
                new System.Data.SqlClient.SqlParameter("@DatLastPrizeDraw",_datlastprizedraw),
                new System.Data.SqlClient.SqlParameter("@PrizeDrawCnt",_prizedrawcnt),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_WxUser GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,UserName,PassWord,NickName,Mobile,IsValid,TrueName,WxNo,DatRegister,Email,PortraitUrl,Grade,GrandpaUser,PaterUser,WxInviteQCode,TooGrandpaUser,DatLastPrizeDraw,PrizeDrawCnt FROM [C_WxUser] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_WxUser>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,UserName,PassWord,NickName,Mobile,IsValid,TrueName,WxNo,DatRegister,Email,PortraitUrl,Grade,GrandpaUser,PaterUser,WxInviteQCode,TooGrandpaUser,DatLastPrizeDraw,PrizeDrawCnt FROM [C_WxUser] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_WxUser] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_WxUser] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_WxUser> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,PassWord,NickName,Mobile,IsValid,TrueName,WxNo,DatRegister,Email,PortraitUrl,Grade,GrandpaUser,PaterUser,WxInviteQCode,TooGrandpaUser,DatLastPrizeDraw,PrizeDrawCnt,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_WxUser] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_WxUser>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_WxUser> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,PassWord,NickName,Mobile,IsValid,TrueName,WxNo,DatRegister,Email,PortraitUrl,Grade,GrandpaUser,PaterUser,WxInviteQCode,TooGrandpaUser,DatLastPrizeDraw,PrizeDrawCnt FROM [C_WxUser] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_WxUser>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_WxUser> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,UserName,PassWord,NickName,Mobile,IsValid,TrueName,WxNo,DatRegister,Email,PortraitUrl,Grade,GrandpaUser,PaterUser,WxInviteQCode,TooGrandpaUser,DatLastPrizeDraw,PrizeDrawCnt FROM [C_WxUser]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_WxUser>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserMail 
    {
        #region Fields
        //public string str = "UserName:2147483647|ContactName:50|ContactMobile:50|Province:2147483647|City:2147483647|Area:2147483647|Address:3000";
        private int _id;
        private string _username = string.Empty;
        private string _contactname = string.Empty;
        private string _contactmobile = string.Empty;
        private string _province = string.Empty;
        private int _provinceid;
        private string _city = string.Empty;
        private int _cityid;
        private string _area = string.Empty;
        private int _areaid;
        private string _address = string.Empty;
        private bool _isdefault;
        private bool _isnow;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 用户名
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 联系人姓名
        /// </summary>
        public string ContactName
        {
            get { return _contactname; }
            set { _contactname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 联系人电话
        /// </summary>
        public string ContactMobile
        {
            get { return _contactmobile; }
            set { _contactmobile = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 省份
        /// </summary>
        public string Province
        {
            get { return _province; }
            set { _province = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ProvinceID
        {
            get { return _provinceid; }
            set { _provinceid = value; }
        }

        /// <summary>
        /// 城市
        /// </summary>
        public string City
        {
            get { return _city; }
            set { _city = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CityID
        {
            get { return _cityid; }
            set { _cityid = value; }
        }

        /// <summary>
        /// 区
        /// </summary>
        public string Area
        {
            get { return _area; }
            set { _area = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int AreaID
        {
            get { return _areaid; }
            set { _areaid = value; }
        }

        /// <summary>
        /// 收货地址
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 3000); }
        }

        /// <summary>
        /// 是否默认
        /// </summary>
        public bool IsDefault
        {
            get { return _isdefault; }
            set { _isdefault = value; }
        }

        /// <summary>
        /// 是否当前选择
        /// </summary>
        public bool IsNow
        {
            get { return _isnow; }
            set { _isnow = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserMail] (UserName,ContactName,ContactMobile,Province,ProvinceID,City,CityID,Area,AreaID,Address,IsDefault,IsNow) values (@UserName,@ContactName,@ContactMobile,@Province,@ProvinceID,@City,@CityID,@Area,@AreaID,@Address,@IsDefault,@IsNow);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserMail]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ContactName",_contactname),
                new System.Data.SqlClient.SqlParameter("@ContactMobile",_contactmobile),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@ProvinceID",_provinceid),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@CityID",_cityid),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@IsDefault",_isdefault),
                new System.Data.SqlClient.SqlParameter("@IsNow",_isnow),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserMail] (UserName,ContactName,ContactMobile,Province,ProvinceID,City,CityID,Area,AreaID,Address,IsDefault,IsNow) values (@UserName,@ContactName,@ContactMobile,@Province,@ProvinceID,@City,@CityID,@Area,@AreaID,@Address,@IsDefault,@IsNow);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserMail]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ContactName",_contactname),
                new System.Data.SqlClient.SqlParameter("@ContactMobile",_contactmobile),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@ProvinceID",_provinceid),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@CityID",_cityid),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@IsDefault",_isdefault),
                new System.Data.SqlClient.SqlParameter("@IsNow",_isnow),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserMail] SET UserName=@UserName,ContactName=@ContactName,ContactMobile=@ContactMobile,Province=@Province,ProvinceID=@ProvinceID,City=@City,CityID=@CityID,Area=@Area,AreaID=@AreaID,Address=@Address,IsDefault=@IsDefault,IsNow=@IsNow WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ContactName",_contactname),
                new System.Data.SqlClient.SqlParameter("@ContactMobile",_contactmobile),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@ProvinceID",_provinceid),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@CityID",_cityid),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@IsDefault",_isdefault),
                new System.Data.SqlClient.SqlParameter("@IsNow",_isnow),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserMail] SET UserName=@UserName,ContactName=@ContactName,ContactMobile=@ContactMobile,Province=@Province,ProvinceID=@ProvinceID,City=@City,CityID=@CityID,Area=@Area,AreaID=@AreaID,Address=@Address,IsDefault=@IsDefault,IsNow=@IsNow WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@ContactName",_contactname),
                new System.Data.SqlClient.SqlParameter("@ContactMobile",_contactmobile),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@ProvinceID",_provinceid),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@CityID",_cityid),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@IsDefault",_isdefault),
                new System.Data.SqlClient.SqlParameter("@IsNow",_isnow),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserMail GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,UserName,ContactName,ContactMobile,Province,ProvinceID,City,CityID,Area,AreaID,Address,IsDefault,IsNow FROM [C_UserMail] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserMail>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,UserName,ContactName,ContactMobile,Province,ProvinceID,City,CityID,Area,AreaID,Address,IsDefault,IsNow FROM [C_UserMail] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserMail] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserMail] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserMail> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,ContactName,ContactMobile,Province,ProvinceID,City,CityID,Area,AreaID,Address,IsDefault,IsNow,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserMail] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserMail>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserMail> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,ContactName,ContactMobile,Province,ProvinceID,City,CityID,Area,AreaID,Address,IsDefault,IsNow FROM [C_UserMail] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserMail>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserMail> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,UserName,ContactName,ContactMobile,Province,ProvinceID,City,CityID,Area,AreaID,Address,IsDefault,IsNow FROM [C_UserMail]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserMail>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class PDAAgentApp 
    {
        #region Fields
        //public string str = "Ver:50|AppName:50|Size:50|AppPath:200";
        private int _id;
        private bool _isok;
        private string _ver = string.Empty;
        private string _appname = string.Empty;
        private string _size = string.Empty;
        private string _apppath = string.Empty;
        private int _creattime;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsOK
        {
            get { return _isok; }
            set { _isok = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Ver
        {
            get { return _ver; }
            set { _ver = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string AppName
        {
            get { return _appname; }
            set { _appname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Size
        {
            get { return _size; }
            set { _size = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string AppPath
        {
            get { return _apppath; }
            set { _apppath = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CreatTime
        {
            get { return _creattime; }
            set { _creattime = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [PDAAgentApp] (IsOK,Ver,AppName,Size,AppPath,CreatTime) values (@IsOK,@Ver,@AppName,@Size,@AppPath,@CreatTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAAgentApp]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@IsOK",_isok),
                new System.Data.SqlClient.SqlParameter("@Ver",_ver),
                new System.Data.SqlClient.SqlParameter("@AppName",_appname),
                new System.Data.SqlClient.SqlParameter("@Size",_size),
                new System.Data.SqlClient.SqlParameter("@AppPath",_apppath),
                new System.Data.SqlClient.SqlParameter("@CreatTime",_creattime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [PDAAgentApp] (IsOK,Ver,AppName,Size,AppPath,CreatTime) values (@IsOK,@Ver,@AppName,@Size,@AppPath,@CreatTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [PDAAgentApp]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@IsOK",_isok),
                new System.Data.SqlClient.SqlParameter("@Ver",_ver),
                new System.Data.SqlClient.SqlParameter("@AppName",_appname),
                new System.Data.SqlClient.SqlParameter("@Size",_size),
                new System.Data.SqlClient.SqlParameter("@AppPath",_apppath),
                new System.Data.SqlClient.SqlParameter("@CreatTime",_creattime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [PDAAgentApp] SET IsOK=@IsOK,Ver=@Ver,AppName=@AppName,Size=@Size,AppPath=@AppPath,CreatTime=@CreatTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@IsOK",_isok),
                new System.Data.SqlClient.SqlParameter("@Ver",_ver),
                new System.Data.SqlClient.SqlParameter("@AppName",_appname),
                new System.Data.SqlClient.SqlParameter("@Size",_size),
                new System.Data.SqlClient.SqlParameter("@AppPath",_apppath),
                new System.Data.SqlClient.SqlParameter("@CreatTime",_creattime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [PDAAgentApp] SET IsOK=@IsOK,Ver=@Ver,AppName=@AppName,Size=@Size,AppPath=@AppPath,CreatTime=@CreatTime WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@IsOK",_isok),
                new System.Data.SqlClient.SqlParameter("@Ver",_ver),
                new System.Data.SqlClient.SqlParameter("@AppName",_appname),
                new System.Data.SqlClient.SqlParameter("@Size",_size),
                new System.Data.SqlClient.SqlParameter("@AppPath",_apppath),
                new System.Data.SqlClient.SqlParameter("@CreatTime",_creattime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static PDAAgentApp GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,IsOK,Ver,AppName,Size,AppPath,CreatTime FROM [PDAAgentApp] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<PDAAgentApp>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,IsOK,Ver,AppName,Size,AppPath,CreatTime FROM [PDAAgentApp] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [PDAAgentApp] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [PDAAgentApp] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAAgentApp> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,IsOK,Ver,AppName,Size,AppPath,CreatTime,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [PDAAgentApp] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAAgentApp>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<PDAAgentApp> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,IsOK,Ver,AppName,Size,AppPath,CreatTime FROM [PDAAgentApp] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAAgentApp>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<PDAAgentApp> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,IsOK,Ver,AppName,Size,AppPath,CreatTime FROM [PDAAgentApp]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<PDAAgentApp>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserIntegralCode 
    {
        #region Fields
        //public string str = "UserName:2147483647|WaterCode:2147483647|IntegralCode:2147483647|IntegralType:50";
        private int _id;
        private string _username = string.Empty;
        private int _integralcodeid;
        private string _watercode = string.Empty;
        private string _integralcode = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        private int _thisintegral;
        private int _oldintegral;
        private int _newintegral;
        private string _integraltype = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 客户ID
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// SYSIntegralCode的ID
        /// </summary>
        public int IntegralCodeID
        {
            get { return _integralcodeid; }
            set { _integralcodeid = value; }
        }

        /// <summary>
        /// 流水码
        /// </summary>
        public string WaterCode
        {
            get { return _watercode; }
            set { _watercode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 积分码
        /// </summary>
        public string IntegralCode
        {
            get { return _integralcode; }
            set { _integralcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 领取时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 本次获得积分
        /// </summary>
        public int ThisIntegral
        {
            get { return _thisintegral; }
            set { _thisintegral = value; }
        }

        /// <summary>
        /// 原积分
        /// </summary>
        public int OldIntegral
        {
            get { return _oldintegral; }
            set { _oldintegral = value; }
        }

        /// <summary>
        /// 新积分
        /// </summary>
        public int NewIntegral
        {
            get { return _newintegral; }
            set { _newintegral = value; }
        }

        /// <summary>
        /// 获取类型   扫码/手输
        /// </summary>
        public string IntegralType
        {
            get { return _integraltype; }
            set { _integraltype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserIntegralCode] (UserName,IntegralCodeID,WaterCode,IntegralCode,Dat,ThisIntegral,OldIntegral,NewIntegral,IntegralType) values (@UserName,@IntegralCodeID,@WaterCode,@IntegralCode,@Dat,@ThisIntegral,@OldIntegral,@NewIntegral,@IntegralType);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserIntegralCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@IntegralCodeID",_integralcodeid),
                new System.Data.SqlClient.SqlParameter("@WaterCode",_watercode),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@ThisIntegral",_thisintegral),
                new System.Data.SqlClient.SqlParameter("@OldIntegral",_oldintegral),
                new System.Data.SqlClient.SqlParameter("@NewIntegral",_newintegral),
                new System.Data.SqlClient.SqlParameter("@IntegralType",_integraltype),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserIntegralCode] (UserName,IntegralCodeID,WaterCode,IntegralCode,Dat,ThisIntegral,OldIntegral,NewIntegral,IntegralType) values (@UserName,@IntegralCodeID,@WaterCode,@IntegralCode,@Dat,@ThisIntegral,@OldIntegral,@NewIntegral,@IntegralType);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserIntegralCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@IntegralCodeID",_integralcodeid),
                new System.Data.SqlClient.SqlParameter("@WaterCode",_watercode),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@ThisIntegral",_thisintegral),
                new System.Data.SqlClient.SqlParameter("@OldIntegral",_oldintegral),
                new System.Data.SqlClient.SqlParameter("@NewIntegral",_newintegral),
                new System.Data.SqlClient.SqlParameter("@IntegralType",_integraltype),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserIntegralCode] SET UserName=@UserName,IntegralCodeID=@IntegralCodeID,WaterCode=@WaterCode,IntegralCode=@IntegralCode,Dat=@Dat,ThisIntegral=@ThisIntegral,OldIntegral=@OldIntegral,NewIntegral=@NewIntegral,IntegralType=@IntegralType WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@IntegralCodeID",_integralcodeid),
                new System.Data.SqlClient.SqlParameter("@WaterCode",_watercode),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@ThisIntegral",_thisintegral),
                new System.Data.SqlClient.SqlParameter("@OldIntegral",_oldintegral),
                new System.Data.SqlClient.SqlParameter("@NewIntegral",_newintegral),
                new System.Data.SqlClient.SqlParameter("@IntegralType",_integraltype),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserIntegralCode] SET UserName=@UserName,IntegralCodeID=@IntegralCodeID,WaterCode=@WaterCode,IntegralCode=@IntegralCode,Dat=@Dat,ThisIntegral=@ThisIntegral,OldIntegral=@OldIntegral,NewIntegral=@NewIntegral,IntegralType=@IntegralType WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@IntegralCodeID",_integralcodeid),
                new System.Data.SqlClient.SqlParameter("@WaterCode",_watercode),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@ThisIntegral",_thisintegral),
                new System.Data.SqlClient.SqlParameter("@OldIntegral",_oldintegral),
                new System.Data.SqlClient.SqlParameter("@NewIntegral",_newintegral),
                new System.Data.SqlClient.SqlParameter("@IntegralType",_integraltype),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserIntegralCode GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,UserName,IntegralCodeID,WaterCode,IntegralCode,Dat,ThisIntegral,OldIntegral,NewIntegral,IntegralType FROM [C_UserIntegralCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserIntegralCode>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,UserName,IntegralCodeID,WaterCode,IntegralCode,Dat,ThisIntegral,OldIntegral,NewIntegral,IntegralType FROM [C_UserIntegralCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserIntegralCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserIntegralCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserIntegralCode> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,IntegralCodeID,WaterCode,IntegralCode,Dat,ThisIntegral,OldIntegral,NewIntegral,IntegralType,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserIntegralCode] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserIntegralCode>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserIntegralCode> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,IntegralCodeID,WaterCode,IntegralCode,Dat,ThisIntegral,OldIntegral,NewIntegral,IntegralType FROM [C_UserIntegralCode] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserIntegralCode>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserIntegralCode> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,UserName,IntegralCodeID,WaterCode,IntegralCode,Dat,ThisIntegral,OldIntegral,NewIntegral,IntegralType FROM [C_UserIntegralCode]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserIntegralCode>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<C_UserIntegralCode> GetEntitysByIntegralCodeID(int integralcodeid)
    	{
    		string strSql = "SELECT ID,UserName,IntegralCodeID,WaterCode,IntegralCode,Dat,ThisIntegral,OldIntegral,NewIntegral,IntegralType FROM [C_UserIntegralCode] WHERE IntegralCodeID=@IntegralCodeID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@IntegralCodeID",integralcodeid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserIntegralCode>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class ScaleOut_Big 
    {
        #region Fields
        //public string str = "BigCode:50";
        private string _bigcode = string.Empty;
        private int _outid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public string BigCode
        {
            get { return _bigcode; }
            set { _bigcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int OutId
        {
            get { return _outid; }
            set { _outid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [ScaleOut_Big] (BigCode,OutId) values (@BigCode,@OutId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleOut_Big]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@OutId",_outid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [ScaleOut_Big] (BigCode,OutId) values (@BigCode,@OutId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleOut_Big]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@OutId",_outid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<ScaleOut_Big> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 BigCode,OutId FROM [ScaleOut_Big]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleOut_Big>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<ScaleOut_Big> GetEntitysByOutId(int outid)
    	{
    		string strSql = "SELECT BigCode,OutId FROM [ScaleOut_Big] WHERE OutId=@OutId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@OutId",outid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleOut_Big>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class jf_GoodsSnap 
    {
        #region Fields
        //public string str = "OrderNo:50|GoodsName:50|Main_img:200|Detail:2147483647";
        private int _id;
        private int _goodsid;
        private string _orderno = string.Empty;
        private string _goodsname = string.Empty;
        private string _main_img = string.Empty;
        private string _detail = string.Empty;
        private int _saleintegral;
        private int _buyintegral;
        private int _getcnt;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 商品ID
        /// </summary>
        public int GoodsID
        {
            get { return _goodsid; }
            set { _goodsid = value; }
        }

        /// <summary>
        /// 订单号
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 商品名称
        /// </summary>
        public string GoodsName
        {
            get { return _goodsname; }
            set { _goodsname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 商品主图
        /// </summary>
        public string Main_img
        {
            get { return _main_img; }
            set { _main_img = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 商品详情
        /// </summary>
        public string Detail
        {
            get { return _detail; }
            set { _detail = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 需积分
        /// </summary>
        public int SaleIntegral
        {
            get { return _saleintegral; }
            set { _saleintegral = value; }
        }

        /// <summary>
        /// 购买所需的积分
        /// </summary>
        public int BuyIntegral
        {
            get { return _buyintegral; }
            set { _buyintegral = value; }
        }

        /// <summary>
        /// 购买数量
        /// </summary>
        public int GetCnt
        {
            get { return _getcnt; }
            set { _getcnt = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [jf_GoodsSnap] (GoodsID,OrderNo,GoodsName,Main_img,Detail,SaleIntegral,BuyIntegral,GetCnt) values (@GoodsID,@OrderNo,@GoodsName,@Main_img,@Detail,@SaleIntegral,@BuyIntegral,@GetCnt);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_GoodsSnap]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@GoodsName",_goodsname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@SaleIntegral",_saleintegral),
                new System.Data.SqlClient.SqlParameter("@BuyIntegral",_buyintegral),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [jf_GoodsSnap] (GoodsID,OrderNo,GoodsName,Main_img,Detail,SaleIntegral,BuyIntegral,GetCnt) values (@GoodsID,@OrderNo,@GoodsName,@Main_img,@Detail,@SaleIntegral,@BuyIntegral,@GetCnt);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_GoodsSnap]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@GoodsName",_goodsname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@SaleIntegral",_saleintegral),
                new System.Data.SqlClient.SqlParameter("@BuyIntegral",_buyintegral),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [jf_GoodsSnap] SET GoodsID=@GoodsID,OrderNo=@OrderNo,GoodsName=@GoodsName,Main_img=@Main_img,Detail=@Detail,SaleIntegral=@SaleIntegral,BuyIntegral=@BuyIntegral,GetCnt=@GetCnt WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@GoodsName",_goodsname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@SaleIntegral",_saleintegral),
                new System.Data.SqlClient.SqlParameter("@BuyIntegral",_buyintegral),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [jf_GoodsSnap] SET GoodsID=@GoodsID,OrderNo=@OrderNo,GoodsName=@GoodsName,Main_img=@Main_img,Detail=@Detail,SaleIntegral=@SaleIntegral,BuyIntegral=@BuyIntegral,GetCnt=@GetCnt WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@GoodsName",_goodsname),
                new System.Data.SqlClient.SqlParameter("@Main_img",_main_img),
                new System.Data.SqlClient.SqlParameter("@Detail",_detail),
                new System.Data.SqlClient.SqlParameter("@SaleIntegral",_saleintegral),
                new System.Data.SqlClient.SqlParameter("@BuyIntegral",_buyintegral),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static jf_GoodsSnap GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,GoodsID,OrderNo,GoodsName,Main_img,Detail,SaleIntegral,BuyIntegral,GetCnt FROM [jf_GoodsSnap] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<jf_GoodsSnap>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,GoodsID,OrderNo,GoodsName,Main_img,Detail,SaleIntegral,BuyIntegral,GetCnt FROM [jf_GoodsSnap] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [jf_GoodsSnap] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [jf_GoodsSnap] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_GoodsSnap> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,GoodsID,OrderNo,GoodsName,Main_img,Detail,SaleIntegral,BuyIntegral,GetCnt,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [jf_GoodsSnap] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_GoodsSnap>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_GoodsSnap> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,GoodsID,OrderNo,GoodsName,Main_img,Detail,SaleIntegral,BuyIntegral,GetCnt FROM [jf_GoodsSnap] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_GoodsSnap>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<jf_GoodsSnap> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,GoodsID,OrderNo,GoodsName,Main_img,Detail,SaleIntegral,BuyIntegral,GetCnt FROM [jf_GoodsSnap]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_GoodsSnap>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<jf_GoodsSnap> GetEntitysByGoodsID(int goodsid)
    	{
    		string strSql = "SELECT ID,GoodsID,OrderNo,GoodsName,Main_img,Detail,SaleIntegral,BuyIntegral,GetCnt FROM [jf_GoodsSnap] WHERE GoodsID=@GoodsID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@GoodsID",goodsid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_GoodsSnap>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class ScaleOut_Middle 
    {
        #region Fields
        //public string str = "MiddleCode:50";
        private string _middlecode = string.Empty;
        private int _outid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public string MiddleCode
        {
            get { return _middlecode; }
            set { _middlecode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int OutId
        {
            get { return _outid; }
            set { _outid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [ScaleOut_Middle] (MiddleCode,OutId) values (@MiddleCode,@OutId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleOut_Middle]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@OutId",_outid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [ScaleOut_Middle] (MiddleCode,OutId) values (@MiddleCode,@OutId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleOut_Middle]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@OutId",_outid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<ScaleOut_Middle> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 MiddleCode,OutId FROM [ScaleOut_Middle]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleOut_Middle>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<ScaleOut_Middle> GetEntitysByOutId(int outid)
    	{
    		string strSql = "SELECT MiddleCode,OutId FROM [ScaleOut_Middle] WHERE OutId=@OutId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@OutId",outid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleOut_Middle>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class TB_BMCode 
    {
        #region Fields
        //public string str = "BarCode:50";
        private int _typeid;
        private string _barcode = string.Empty;
        private int _importtime;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int TypeId
        {
            get { return _typeid; }
            set { _typeid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BarCode
        {
            get { return _barcode; }
            set { _barcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ImportTime
        {
            get { return _importtime; }
            set { _importtime = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [TB_BMCode] (TypeId,BarCode,ImportTime) values (@TypeId,@BarCode,@ImportTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [TB_BMCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@TypeId",_typeid),
                new System.Data.SqlClient.SqlParameter("@BarCode",_barcode),
                new System.Data.SqlClient.SqlParameter("@ImportTime",_importtime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [TB_BMCode] (TypeId,BarCode,ImportTime) values (@TypeId,@BarCode,@ImportTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [TB_BMCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@TypeId",_typeid),
                new System.Data.SqlClient.SqlParameter("@BarCode",_barcode),
                new System.Data.SqlClient.SqlParameter("@ImportTime",_importtime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<TB_BMCode> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 TypeId,BarCode,ImportTime FROM [TB_BMCode]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<TB_BMCode>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserCart 
    {
        #region Fields
        //public string str = "C_UserName:2147483647";
        private int _id;
        private string _c_username = string.Empty;
        private int _goodsid;
        private int _getcnt;
        private bool _ischeck;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 客户ID
        /// </summary>
        public string C_UserName
        {
            get { return _c_username; }
            set { _c_username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 商品编号
        /// </summary>
        public int GoodsID
        {
            get { return _goodsid; }
            set { _goodsid = value; }
        }

        /// <summary>
        /// 数量
        /// </summary>
        public int GetCnt
        {
            get { return _getcnt; }
            set { _getcnt = value; }
        }

        /// <summary>
        /// 是否选中
        /// </summary>
        public bool IsCheck
        {
            get { return _ischeck; }
            set { _ischeck = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserCart] (C_UserName,GoodsID,GetCnt,IsCheck) values (@C_UserName,@GoodsID,@GetCnt,@IsCheck);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserCart]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
                new System.Data.SqlClient.SqlParameter("@IsCheck",_ischeck),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserCart] (C_UserName,GoodsID,GetCnt,IsCheck) values (@C_UserName,@GoodsID,@GetCnt,@IsCheck);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserCart]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
                new System.Data.SqlClient.SqlParameter("@IsCheck",_ischeck),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserCart] SET C_UserName=@C_UserName,GoodsID=@GoodsID,GetCnt=@GetCnt,IsCheck=@IsCheck WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
                new System.Data.SqlClient.SqlParameter("@IsCheck",_ischeck),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserCart] SET C_UserName=@C_UserName,GoodsID=@GoodsID,GetCnt=@GetCnt,IsCheck=@IsCheck WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@GetCnt",_getcnt),
                new System.Data.SqlClient.SqlParameter("@IsCheck",_ischeck),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserCart GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,C_UserName,GoodsID,GetCnt,IsCheck FROM [C_UserCart] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserCart>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,C_UserName,GoodsID,GetCnt,IsCheck FROM [C_UserCart] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserCart] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserCart] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserCart> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,C_UserName,GoodsID,GetCnt,IsCheck,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserCart] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserCart>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserCart> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,C_UserName,GoodsID,GetCnt,IsCheck FROM [C_UserCart] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserCart>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserCart> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,C_UserName,GoodsID,GetCnt,IsCheck FROM [C_UserCart]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserCart>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<C_UserCart> GetEntitysByGoodsID(int goodsid)
    	{
    		string strSql = "SELECT ID,C_UserName,GoodsID,GetCnt,IsCheck FROM [C_UserCart] WHERE GoodsID=@GoodsID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@GoodsID",goodsid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserCart>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class ScaleOut_Small 
    {
        #region Fields
        //public string str = "SmallCode:50";
        private string _smallcode = string.Empty;
        private int _outid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public string SmallCode
        {
            get { return _smallcode; }
            set { _smallcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int OutId
        {
            get { return _outid; }
            set { _outid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [ScaleOut_Small] (SmallCode,OutId) values (@SmallCode,@OutId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleOut_Small]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@OutId",_outid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [ScaleOut_Small] (SmallCode,OutId) values (@SmallCode,@OutId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleOut_Small]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@OutId",_outid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<ScaleOut_Small> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 SmallCode,OutId FROM [ScaleOut_Small]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleOut_Small>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<ScaleOut_Small> GetEntitysByOutId(int outid)
    	{
    		string strSql = "SELECT SmallCode,OutId FROM [ScaleOut_Small] WHERE OutId=@OutId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@OutId",outid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleOut_Small>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserArticleMater 
    {
        #region Fields
        //public string str = "";
        private int _id;
        private int _materid;
        private int _articleid;
        private DateTime _dat = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 素材ID
        /// </summary>
        public int MaterID
        {
            get { return _materid; }
            set { _materid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ArticleID
        {
            get { return _articleid; }
            set { _articleid = value; }
        }

        /// <summary>
        /// 添加时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserArticleMater] (MaterID,ArticleID,Dat) values (@MaterID,@ArticleID,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserArticleMater]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MaterID",_materid),
                new System.Data.SqlClient.SqlParameter("@ArticleID",_articleid),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserArticleMater] (MaterID,ArticleID,Dat) values (@MaterID,@ArticleID,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserArticleMater]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MaterID",_materid),
                new System.Data.SqlClient.SqlParameter("@ArticleID",_articleid),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserArticleMater] SET MaterID=@MaterID,ArticleID=@ArticleID,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MaterID",_materid),
                new System.Data.SqlClient.SqlParameter("@ArticleID",_articleid),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserArticleMater] SET MaterID=@MaterID,ArticleID=@ArticleID,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MaterID",_materid),
                new System.Data.SqlClient.SqlParameter("@ArticleID",_articleid),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserArticleMater GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,MaterID,ArticleID,Dat FROM [C_UserArticleMater] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserArticleMater>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,MaterID,ArticleID,Dat FROM [C_UserArticleMater] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserArticleMater] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserArticleMater] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserArticleMater> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MaterID,ArticleID,Dat,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserArticleMater] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserArticleMater>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserArticleMater> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MaterID,ArticleID,Dat FROM [C_UserArticleMater] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserArticleMater>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserArticleMater> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,MaterID,ArticleID,Dat FROM [C_UserArticleMater]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserArticleMater>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<C_UserArticleMater> GetEntitysByMaterID(int materid)
    	{
    		string strSql = "SELECT ID,MaterID,ArticleID,Dat FROM [C_UserArticleMater] WHERE MaterID=@MaterID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@MaterID",materid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserArticleMater>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<C_UserArticleMater> GetEntitysByArticleID(int articleid)
    	{
    		string strSql = "SELECT ID,MaterID,ArticleID,Dat FROM [C_UserArticleMater] WHERE ArticleID=@ArticleID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ArticleID",articleid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserArticleMater>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class ScaleOut_Anti 
    {
        #region Fields
        //public string str = "AntiCode:50";
        private string _anticode = string.Empty;
        private int _outid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public string AntiCode
        {
            get { return _anticode; }
            set { _anticode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int OutId
        {
            get { return _outid; }
            set { _outid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [ScaleOut_Anti] (AntiCode,OutId) values (@AntiCode,@OutId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleOut_Anti]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@OutId",_outid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [ScaleOut_Anti] (AntiCode,OutId) values (@AntiCode,@OutId);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleOut_Anti]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@OutId",_outid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }



    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<ScaleOut_Anti> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 AntiCode,OutId FROM [ScaleOut_Anti]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleOut_Anti>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<ScaleOut_Anti> GetEntitysByOutId(int outid)
    	{
    		string strSql = "SELECT AntiCode,OutId FROM [ScaleOut_Anti] WHERE OutId=@OutId";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@OutId",outid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleOut_Anti>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_UserArticle 
    {
        #region Fields
        //public string str = "title:2147483647|coverImgUrl:2147483647|Descs:2147483647|contents:2147483647|C_UserName:2147483647";
        private int _id;
        private string _title = string.Empty;
        private string _coverimgurl = string.Empty;
        private string _descs = string.Empty;
        private string _contents = string.Empty;
        private string _c_username = string.Empty;
        private DateTime _datcreate = new DateTime(1900,1,1);
        private DateTime _datedit = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 标题
        /// </summary>
        public string title
        {
            get { return _title; }
            set { _title = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 封面图片地址
        /// </summary>
        public string coverImgUrl
        {
            get { return _coverimgurl; }
            set { _coverimgurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 文章描述
        /// </summary>
        public string Descs
        {
            get { return _descs; }
            set { _descs = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 内容
        /// </summary>
        public string contents
        {
            get { return _contents; }
            set { _contents = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// C_User表的UserName
        /// </summary>
        public string C_UserName
        {
            get { return _c_username; }
            set { _c_username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public DateTime DatCreate
        {
            get { return _datcreate; }
            set { _datcreate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 更新时间
        /// </summary>
        public DateTime DatEdit
        {
            get { return _datedit; }
            set { _datedit = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_UserArticle] (title,coverImgUrl,Descs,contents,C_UserName,DatCreate,DatEdit) values (@title,@coverImgUrl,@Descs,@contents,@C_UserName,@DatCreate,@DatEdit);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserArticle]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@title",_title),
                new System.Data.SqlClient.SqlParameter("@coverImgUrl",_coverimgurl),
                new System.Data.SqlClient.SqlParameter("@Descs",_descs),
                new System.Data.SqlClient.SqlParameter("@contents",_contents),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_UserArticle] (title,coverImgUrl,Descs,contents,C_UserName,DatCreate,DatEdit) values (@title,@coverImgUrl,@Descs,@contents,@C_UserName,@DatCreate,@DatEdit);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_UserArticle]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@title",_title),
                new System.Data.SqlClient.SqlParameter("@coverImgUrl",_coverimgurl),
                new System.Data.SqlClient.SqlParameter("@Descs",_descs),
                new System.Data.SqlClient.SqlParameter("@contents",_contents),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_UserArticle] SET title=@title,coverImgUrl=@coverImgUrl,Descs=@Descs,contents=@contents,C_UserName=@C_UserName,DatCreate=@DatCreate,DatEdit=@DatEdit WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@title",_title),
                new System.Data.SqlClient.SqlParameter("@coverImgUrl",_coverimgurl),
                new System.Data.SqlClient.SqlParameter("@Descs",_descs),
                new System.Data.SqlClient.SqlParameter("@contents",_contents),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_UserArticle] SET title=@title,coverImgUrl=@coverImgUrl,Descs=@Descs,contents=@contents,C_UserName=@C_UserName,DatCreate=@DatCreate,DatEdit=@DatEdit WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@title",_title),
                new System.Data.SqlClient.SqlParameter("@coverImgUrl",_coverimgurl),
                new System.Data.SqlClient.SqlParameter("@Descs",_descs),
                new System.Data.SqlClient.SqlParameter("@contents",_contents),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@DatEdit",_datedit),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_UserArticle GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,title,coverImgUrl,Descs,contents,C_UserName,DatCreate,DatEdit FROM [C_UserArticle] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_UserArticle>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,title,coverImgUrl,Descs,contents,C_UserName,DatCreate,DatEdit FROM [C_UserArticle] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_UserArticle] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_UserArticle] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserArticle> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,title,coverImgUrl,Descs,contents,C_UserName,DatCreate,DatEdit,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_UserArticle] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserArticle>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_UserArticle> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,title,coverImgUrl,Descs,contents,C_UserName,DatCreate,DatEdit FROM [C_UserArticle] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserArticle>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_UserArticle> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,title,coverImgUrl,Descs,contents,C_UserName,DatCreate,DatEdit FROM [C_UserArticle]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_UserArticle>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class jf_GoodsDetailImg 
    {
        #region Fields
        //public string str = "ImgUrl:200|UserName:20";
        private int _id;
        private string _imgurl = string.Empty;
        private int _goodsid;
        private string _username = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 图片链接
        /// </summary>
        public string ImgUrl
        {
            get { return _imgurl; }
            set { _imgurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 商品编号
        /// </summary>
        public int GoodsID
        {
            get { return _goodsid; }
            set { _goodsid = value; }
        }

        /// <summary>
        /// 用户名
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 上传时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [jf_GoodsDetailImg] (ImgUrl,GoodsID,UserName,Dat) values (@ImgUrl,@GoodsID,@UserName,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_GoodsDetailImg]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [jf_GoodsDetailImg] (ImgUrl,GoodsID,UserName,Dat) values (@ImgUrl,@GoodsID,@UserName,@Dat);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_GoodsDetailImg]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [jf_GoodsDetailImg] SET ImgUrl=@ImgUrl,GoodsID=@GoodsID,UserName=@UserName,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [jf_GoodsDetailImg] SET ImgUrl=@ImgUrl,GoodsID=@GoodsID,UserName=@UserName,Dat=@Dat WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ImgUrl",_imgurl),
                new System.Data.SqlClient.SqlParameter("@GoodsID",_goodsid),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static jf_GoodsDetailImg GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ImgUrl,GoodsID,UserName,Dat FROM [jf_GoodsDetailImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<jf_GoodsDetailImg>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ImgUrl,GoodsID,UserName,Dat FROM [jf_GoodsDetailImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [jf_GoodsDetailImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [jf_GoodsDetailImg] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_GoodsDetailImg> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ImgUrl,GoodsID,UserName,Dat,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [jf_GoodsDetailImg] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_GoodsDetailImg>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_GoodsDetailImg> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ImgUrl,GoodsID,UserName,Dat FROM [jf_GoodsDetailImg] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_GoodsDetailImg>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<jf_GoodsDetailImg> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ImgUrl,GoodsID,UserName,Dat FROM [jf_GoodsDetailImg]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_GoodsDetailImg>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<jf_GoodsDetailImg> GetEntitysByGoodsID(int goodsid)
    	{
    		string strSql = "SELECT ID,ImgUrl,GoodsID,UserName,Dat FROM [jf_GoodsDetailImg] WHERE GoodsID=@GoodsID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@GoodsID",goodsid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_GoodsDetailImg>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class jf_lpOrder 
    {
        #region Fields
        //public string str = "OrderNo:50|OrderName:50|OrderImgSrc:200|OrderState:50|PayState:50|UserName:20|PayUserName:20|OrderMan:50|OrderMobile:50|Address:200|Remark:500|UserType:30";
        private int _id;
        private string _orderno = string.Empty;
        private string _ordername = string.Empty;
        private string _orderimgsrc = string.Empty;
        private int _sumintegral;
        private DateTime _datcreate = new DateTime(1900,1,1);
        private string _orderstate = string.Empty;
        private string _paystate = string.Empty;
        private int _payintegral;
        private DateTime _datpay = new DateTime(1900,1,1);
        private DateTime _datsend = new DateTime(1900,1,1);
        private DateTime _datfinish = new DateTime(1900,1,1);
        private string _username = string.Empty;
        private string _payusername = string.Empty;
        private int _mailid;
        private decimal _postage;
        private string _orderman = string.Empty;
        private string _ordermobile = string.Empty;
        private string _address = string.Empty;
        private string _remark = string.Empty;
        private string _usertype = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 订单号，不能重复
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 订单名称
        /// </summary>
        public string OrderName
        {
            get { return _ordername; }
            set { _ordername = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 订单图片src（首个商品主图）
        /// </summary>
        public string OrderImgSrc
        {
            get { return _orderimgsrc; }
            set { _orderimgsrc = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 总需积分
        /// </summary>
        public int SumIntegral
        {
            get { return _sumintegral; }
            set { _sumintegral = value; }
        }

        /// <summary>
        /// 订单创建时间
        /// </summary>
        public DateTime DatCreate
        {
            get { return _datcreate; }
            set { _datcreate = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 订单状态（待支付/待发货/待收货/交易完成/已取消）
        /// </summary>
        public string OrderState
        {
            get { return _orderstate; }
            set { _orderstate = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 支付状态  已支付/未支付/已退款
        /// </summary>
        public string PayState
        {
            get { return _paystate; }
            set { _paystate = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 支付积分
        /// </summary>
        public int PayIntegral
        {
            get { return _payintegral; }
            set { _payintegral = value; }
        }

        /// <summary>
        /// 支付时间
        /// </summary>
        public DateTime DatPay
        {
            get { return _datpay; }
            set { _datpay = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 发货时间
        /// </summary>
        public DateTime DatSend
        {
            get { return _datsend; }
            set { _datsend = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 交易完成时间
        /// </summary>
        public DateTime DatFinish
        {
            get { return _datfinish; }
            set { _datfinish = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 用户名
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 支付人用户名
        /// </summary>
        public string PayUserName
        {
            get { return _payusername; }
            set { _payusername = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 20); }
        }

        /// <summary>
        /// 邮寄ID，不是邮寄则为0
        /// </summary>
        public int MailID
        {
            get { return _mailid; }
            set { _mailid = value; }
        }

        /// <summary>
        /// 邮费（元）
        /// </summary>
        public decimal Postage
        {
            get { return _postage; }
            set { _postage = value; }
        }

        /// <summary>
        /// 订单联系人姓名
        /// </summary>
        public string OrderMan
        {
            get { return _orderman; }
            set { _orderman = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 订单联系人手机号
        /// </summary>
        public string OrderMobile
        {
            get { return _ordermobile; }
            set { _ordermobile = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 配送地址
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 200); }
        }

        /// <summary>
        /// 订单备注
        /// </summary>
        public string Remark
        {
            get { return _remark; }
            set { _remark = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 消费者/促销员
        /// </summary>
        public string UserType
        {
            get { return _usertype; }
            set { _usertype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 30); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [jf_lpOrder] (OrderNo,OrderName,OrderImgSrc,SumIntegral,DatCreate,OrderState,PayState,PayIntegral,DatPay,DatSend,DatFinish,UserName,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,UserType) values (@OrderNo,@OrderName,@OrderImgSrc,@SumIntegral,@DatCreate,@OrderState,@PayState,@PayIntegral,@DatPay,@DatSend,@DatFinish,@UserName,@PayUserName,@MailID,@Postage,@OrderMan,@OrderMobile,@Address,@Remark,@UserType);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_lpOrder]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@OrderName",_ordername),
                new System.Data.SqlClient.SqlParameter("@OrderImgSrc",_orderimgsrc),
                new System.Data.SqlClient.SqlParameter("@SumIntegral",_sumintegral),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@OrderState",_orderstate),
                new System.Data.SqlClient.SqlParameter("@PayState",_paystate),
                new System.Data.SqlClient.SqlParameter("@PayIntegral",_payintegral),
                new System.Data.SqlClient.SqlParameter("@DatPay",_datpay),
                new System.Data.SqlClient.SqlParameter("@DatSend",_datsend),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@PayUserName",_payusername),
                new System.Data.SqlClient.SqlParameter("@MailID",_mailid),
                new System.Data.SqlClient.SqlParameter("@Postage",_postage),
                new System.Data.SqlClient.SqlParameter("@OrderMan",_orderman),
                new System.Data.SqlClient.SqlParameter("@OrderMobile",_ordermobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@UserType",_usertype),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [jf_lpOrder] (OrderNo,OrderName,OrderImgSrc,SumIntegral,DatCreate,OrderState,PayState,PayIntegral,DatPay,DatSend,DatFinish,UserName,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,UserType) values (@OrderNo,@OrderName,@OrderImgSrc,@SumIntegral,@DatCreate,@OrderState,@PayState,@PayIntegral,@DatPay,@DatSend,@DatFinish,@UserName,@PayUserName,@MailID,@Postage,@OrderMan,@OrderMobile,@Address,@Remark,@UserType);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [jf_lpOrder]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@OrderName",_ordername),
                new System.Data.SqlClient.SqlParameter("@OrderImgSrc",_orderimgsrc),
                new System.Data.SqlClient.SqlParameter("@SumIntegral",_sumintegral),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@OrderState",_orderstate),
                new System.Data.SqlClient.SqlParameter("@PayState",_paystate),
                new System.Data.SqlClient.SqlParameter("@PayIntegral",_payintegral),
                new System.Data.SqlClient.SqlParameter("@DatPay",_datpay),
                new System.Data.SqlClient.SqlParameter("@DatSend",_datsend),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@PayUserName",_payusername),
                new System.Data.SqlClient.SqlParameter("@MailID",_mailid),
                new System.Data.SqlClient.SqlParameter("@Postage",_postage),
                new System.Data.SqlClient.SqlParameter("@OrderMan",_orderman),
                new System.Data.SqlClient.SqlParameter("@OrderMobile",_ordermobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@UserType",_usertype),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [jf_lpOrder] SET OrderNo=@OrderNo,OrderName=@OrderName,OrderImgSrc=@OrderImgSrc,SumIntegral=@SumIntegral,DatCreate=@DatCreate,OrderState=@OrderState,PayState=@PayState,PayIntegral=@PayIntegral,DatPay=@DatPay,DatSend=@DatSend,DatFinish=@DatFinish,UserName=@UserName,PayUserName=@PayUserName,MailID=@MailID,Postage=@Postage,OrderMan=@OrderMan,OrderMobile=@OrderMobile,Address=@Address,Remark=@Remark,UserType=@UserType WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@OrderName",_ordername),
                new System.Data.SqlClient.SqlParameter("@OrderImgSrc",_orderimgsrc),
                new System.Data.SqlClient.SqlParameter("@SumIntegral",_sumintegral),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@OrderState",_orderstate),
                new System.Data.SqlClient.SqlParameter("@PayState",_paystate),
                new System.Data.SqlClient.SqlParameter("@PayIntegral",_payintegral),
                new System.Data.SqlClient.SqlParameter("@DatPay",_datpay),
                new System.Data.SqlClient.SqlParameter("@DatSend",_datsend),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@PayUserName",_payusername),
                new System.Data.SqlClient.SqlParameter("@MailID",_mailid),
                new System.Data.SqlClient.SqlParameter("@Postage",_postage),
                new System.Data.SqlClient.SqlParameter("@OrderMan",_orderman),
                new System.Data.SqlClient.SqlParameter("@OrderMobile",_ordermobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@UserType",_usertype),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [jf_lpOrder] SET OrderNo=@OrderNo,OrderName=@OrderName,OrderImgSrc=@OrderImgSrc,SumIntegral=@SumIntegral,DatCreate=@DatCreate,OrderState=@OrderState,PayState=@PayState,PayIntegral=@PayIntegral,DatPay=@DatPay,DatSend=@DatSend,DatFinish=@DatFinish,UserName=@UserName,PayUserName=@PayUserName,MailID=@MailID,Postage=@Postage,OrderMan=@OrderMan,OrderMobile=@OrderMobile,Address=@Address,Remark=@Remark,UserType=@UserType WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@OrderName",_ordername),
                new System.Data.SqlClient.SqlParameter("@OrderImgSrc",_orderimgsrc),
                new System.Data.SqlClient.SqlParameter("@SumIntegral",_sumintegral),
                new System.Data.SqlClient.SqlParameter("@DatCreate",_datcreate),
                new System.Data.SqlClient.SqlParameter("@OrderState",_orderstate),
                new System.Data.SqlClient.SqlParameter("@PayState",_paystate),
                new System.Data.SqlClient.SqlParameter("@PayIntegral",_payintegral),
                new System.Data.SqlClient.SqlParameter("@DatPay",_datpay),
                new System.Data.SqlClient.SqlParameter("@DatSend",_datsend),
                new System.Data.SqlClient.SqlParameter("@DatFinish",_datfinish),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@PayUserName",_payusername),
                new System.Data.SqlClient.SqlParameter("@MailID",_mailid),
                new System.Data.SqlClient.SqlParameter("@Postage",_postage),
                new System.Data.SqlClient.SqlParameter("@OrderMan",_orderman),
                new System.Data.SqlClient.SqlParameter("@OrderMobile",_ordermobile),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@UserType",_usertype),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static jf_lpOrder GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,OrderNo,OrderName,OrderImgSrc,SumIntegral,DatCreate,OrderState,PayState,PayIntegral,DatPay,DatSend,DatFinish,UserName,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,UserType FROM [jf_lpOrder] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<jf_lpOrder>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,OrderNo,OrderName,OrderImgSrc,SumIntegral,DatCreate,OrderState,PayState,PayIntegral,DatPay,DatSend,DatFinish,UserName,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,UserType FROM [jf_lpOrder] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [jf_lpOrder] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [jf_lpOrder] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_lpOrder> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,OrderName,OrderImgSrc,SumIntegral,DatCreate,OrderState,PayState,PayIntegral,DatPay,DatSend,DatFinish,UserName,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,UserType,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [jf_lpOrder] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_lpOrder>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<jf_lpOrder> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,OrderName,OrderImgSrc,SumIntegral,DatCreate,OrderState,PayState,PayIntegral,DatPay,DatSend,DatFinish,UserName,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,UserType FROM [jf_lpOrder] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_lpOrder>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<jf_lpOrder> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,OrderNo,OrderName,OrderImgSrc,SumIntegral,DatCreate,OrderState,PayState,PayIntegral,DatPay,DatSend,DatFinish,UserName,PayUserName,MailID,Postage,OrderMan,OrderMobile,Address,Remark,UserType FROM [jf_lpOrder]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<jf_lpOrder>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class C_Consumer 
    {
        #region Fields
        //public string str = "UserName:2147483647|Pwd:2147483647|Mobile:2147483647|Type:2147483647|Stat:2147483647|Name:2147483647|IDCard:2147483647|Province:2147483647|City:2147483647|Area:2147483647|Address:2147483647|Sex:2147483647|SalesMan:2147483647";
        private int _id;
        private string _username = string.Empty;
        private string _pwd = string.Empty;
        private DateTime _datreg = new DateTime(1900,1,1);
        private string _mobile = string.Empty;
        private string _type = string.Empty;
        private int _jf;
        private int _jf_used;
        private string _stat = string.Empty;
        private string _name = string.Empty;
        private string _idcard = string.Empty;
        private string _province = string.Empty;
        private string _city = string.Empty;
        private string _area = string.Empty;
        private string _address = string.Empty;
        private string _sex = string.Empty;
        private string _salesman = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 登录密码
        /// </summary>
        public string Pwd
        {
            get { return _pwd; }
            set { _pwd = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 注册时间
        /// </summary>
        public DateTime DatReg
        {
            get { return _datreg; }
            set { _datreg = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 手机号
        /// </summary>
        public string Mobile
        {
            get { return _mobile; }
            set { _mobile = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 会员类型      消费者/促销员
        /// </summary>
        public string Type
        {
            get { return _type; }
            set { _type = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 积分
        /// </summary>
        public int jf
        {
            get { return _jf; }
            set { _jf = value; }
        }

        /// <summary>
        /// 已用积分
        /// </summary>
        public int jf_used
        {
            get { return _jf_used; }
            set { _jf_used = value; }
        }

        /// <summary>
        /// 已审核/未审核
        /// </summary>
        public string Stat
        {
            get { return _stat; }
            set { _stat = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 姓名
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string IDCard
        {
            get { return _idcard; }
            set { _idcard = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Province
        {
            get { return _province; }
            set { _province = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 城市
        /// </summary>
        public string City
        {
            get { return _city; }
            set { _city = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Area
        {
            get { return _area; }
            set { _area = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 地址
        /// </summary>
        public string Address
        {
            get { return _address; }
            set { _address = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 性别
        /// </summary>
        public string Sex
        {
            get { return _sex; }
            set { _sex = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 负责业务员
        /// </summary>
        public string SalesMan
        {
            get { return _salesman; }
            set { _salesman = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [C_Consumer] (UserName,Pwd,DatReg,Mobile,Type,jf,jf_used,Stat,Name,IDCard,Province,City,Area,Address,Sex,SalesMan) values (@UserName,@Pwd,@DatReg,@Mobile,@Type,@jf,@jf_used,@Stat,@Name,@IDCard,@Province,@City,@Area,@Address,@Sex,@SalesMan);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_Consumer]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Pwd",_pwd),
                new System.Data.SqlClient.SqlParameter("@DatReg",_datreg),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@jf",_jf),
                new System.Data.SqlClient.SqlParameter("@jf_used",_jf_used),
                new System.Data.SqlClient.SqlParameter("@Stat",_stat),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@IDCard",_idcard),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Sex",_sex),
                new System.Data.SqlClient.SqlParameter("@SalesMan",_salesman),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [C_Consumer] (UserName,Pwd,DatReg,Mobile,Type,jf,jf_used,Stat,Name,IDCard,Province,City,Area,Address,Sex,SalesMan) values (@UserName,@Pwd,@DatReg,@Mobile,@Type,@jf,@jf_used,@Stat,@Name,@IDCard,@Province,@City,@Area,@Address,@Sex,@SalesMan);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [C_Consumer]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Pwd",_pwd),
                new System.Data.SqlClient.SqlParameter("@DatReg",_datreg),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@jf",_jf),
                new System.Data.SqlClient.SqlParameter("@jf_used",_jf_used),
                new System.Data.SqlClient.SqlParameter("@Stat",_stat),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@IDCard",_idcard),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Sex",_sex),
                new System.Data.SqlClient.SqlParameter("@SalesMan",_salesman),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [C_Consumer] SET UserName=@UserName,Pwd=@Pwd,DatReg=@DatReg,Mobile=@Mobile,Type=@Type,jf=@jf,jf_used=@jf_used,Stat=@Stat,Name=@Name,IDCard=@IDCard,Province=@Province,City=@City,Area=@Area,Address=@Address,Sex=@Sex,SalesMan=@SalesMan WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Pwd",_pwd),
                new System.Data.SqlClient.SqlParameter("@DatReg",_datreg),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@jf",_jf),
                new System.Data.SqlClient.SqlParameter("@jf_used",_jf_used),
                new System.Data.SqlClient.SqlParameter("@Stat",_stat),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@IDCard",_idcard),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Sex",_sex),
                new System.Data.SqlClient.SqlParameter("@SalesMan",_salesman),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [C_Consumer] SET UserName=@UserName,Pwd=@Pwd,DatReg=@DatReg,Mobile=@Mobile,Type=@Type,jf=@jf,jf_used=@jf_used,Stat=@Stat,Name=@Name,IDCard=@IDCard,Province=@Province,City=@City,Area=@Area,Address=@Address,Sex=@Sex,SalesMan=@SalesMan WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Pwd",_pwd),
                new System.Data.SqlClient.SqlParameter("@DatReg",_datreg),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@jf",_jf),
                new System.Data.SqlClient.SqlParameter("@jf_used",_jf_used),
                new System.Data.SqlClient.SqlParameter("@Stat",_stat),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@IDCard",_idcard),
                new System.Data.SqlClient.SqlParameter("@Province",_province),
                new System.Data.SqlClient.SqlParameter("@City",_city),
                new System.Data.SqlClient.SqlParameter("@Area",_area),
                new System.Data.SqlClient.SqlParameter("@Address",_address),
                new System.Data.SqlClient.SqlParameter("@Sex",_sex),
                new System.Data.SqlClient.SqlParameter("@SalesMan",_salesman),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static C_Consumer GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,UserName,Pwd,DatReg,Mobile,Type,jf,jf_used,Stat,Name,IDCard,Province,City,Area,Address,Sex,SalesMan FROM [C_Consumer] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<C_Consumer>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,UserName,Pwd,DatReg,Mobile,Type,jf,jf_used,Stat,Name,IDCard,Province,City,Area,Address,Sex,SalesMan FROM [C_Consumer] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [C_Consumer] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [C_Consumer] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_Consumer> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,Pwd,DatReg,Mobile,Type,jf,jf_used,Stat,Name,IDCard,Province,City,Area,Address,Sex,SalesMan,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [C_Consumer] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_Consumer>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<C_Consumer> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,Pwd,DatReg,Mobile,Type,jf,jf_used,Stat,Name,IDCard,Province,City,Area,Address,Sex,SalesMan FROM [C_Consumer] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<C_Consumer>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<C_Consumer> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,UserName,Pwd,DatReg,Mobile,Type,jf,jf_used,Stat,Name,IDCard,Province,City,Area,Address,Sex,SalesMan FROM [C_Consumer]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<C_Consumer>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class BaseWxConfig 
    {
        #region Fields
        //public string str = "ConfigName:50|APPID:2147483647|APPSECRET:2147483647|MchID:2147483647|PayKey:2147483647|ACCESS_TOKEN:2147483647|JSApiTicket:2147483647|NotifyUrl:2147483647";
        private int _id;
        private string _configname = string.Empty;
        private string _appid = string.Empty;
        private string _appsecret = string.Empty;
        private string _mchid = string.Empty;
        private string _paykey = string.Empty;
        private string _access_token = string.Empty;
        private double _token_expires_in;
        private DateTime _token_dat_now = new DateTime(1900,1,1);
        private string _jsapiticket = string.Empty;
        private string _notifyurl = string.Empty;
        private bool _isactive;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 配置名称
        /// </summary>
        public string ConfigName
        {
            get { return _configname; }
            set { _configname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// APPID
        /// </summary>
        public string APPID
        {
            get { return _appid; }
            set { _appid = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// APPSECRET
        /// </summary>
        public string APPSECRET
        {
            get { return _appsecret; }
            set { _appsecret = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 商户号
        /// </summary>
        public string MchID
        {
            get { return _mchid; }
            set { _mchid = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 商户微信支付key
        /// </summary>
        public string PayKey
        {
            get { return _paykey; }
            set { _paykey = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// ACCESS_TOKEN
        /// </summary>
        public string ACCESS_TOKEN
        {
            get { return _access_token; }
            set { _access_token = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// ACCESS_TOKEN的有效时间(单位:秒)
        /// </summary>
        public double token_expires_in
        {
            get { return _token_expires_in; }
            set { _token_expires_in = value; }
        }

        /// <summary>
        /// 获取或更新ACCESS_TOKEN的时间
        /// </summary>
        public DateTime token_dat_now
        {
            get { return _token_dat_now; }
            set { _token_dat_now = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        ///  微信jsapi凭证
        /// </summary>
        public string JSApiTicket
        {
            get { return _jsapiticket; }
            set { _jsapiticket = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 微信支付通知地址
        /// </summary>
        public string NotifyUrl
        {
            get { return _notifyurl; }
            set { _notifyurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 是否活动
        /// </summary>
        public bool IsActive
        {
            get { return _isactive; }
            set { _isactive = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [BaseWxConfig] (ConfigName,APPID,APPSECRET,MchID,PayKey,ACCESS_TOKEN,token_expires_in,token_dat_now,JSApiTicket,NotifyUrl,IsActive) values (@ConfigName,@APPID,@APPSECRET,@MchID,@PayKey,@ACCESS_TOKEN,@token_expires_in,@token_dat_now,@JSApiTicket,@NotifyUrl,@IsActive);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [BaseWxConfig]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ConfigName",_configname),
                new System.Data.SqlClient.SqlParameter("@APPID",_appid),
                new System.Data.SqlClient.SqlParameter("@APPSECRET",_appsecret),
                new System.Data.SqlClient.SqlParameter("@MchID",_mchid),
                new System.Data.SqlClient.SqlParameter("@PayKey",_paykey),
                new System.Data.SqlClient.SqlParameter("@ACCESS_TOKEN",_access_token),
                new System.Data.SqlClient.SqlParameter("@token_expires_in",_token_expires_in),
                new System.Data.SqlClient.SqlParameter("@token_dat_now",_token_dat_now),
                new System.Data.SqlClient.SqlParameter("@JSApiTicket",_jsapiticket),
                new System.Data.SqlClient.SqlParameter("@NotifyUrl",_notifyurl),
                new System.Data.SqlClient.SqlParameter("@IsActive",_isactive),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [BaseWxConfig] (ConfigName,APPID,APPSECRET,MchID,PayKey,ACCESS_TOKEN,token_expires_in,token_dat_now,JSApiTicket,NotifyUrl,IsActive) values (@ConfigName,@APPID,@APPSECRET,@MchID,@PayKey,@ACCESS_TOKEN,@token_expires_in,@token_dat_now,@JSApiTicket,@NotifyUrl,@IsActive);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [BaseWxConfig]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ConfigName",_configname),
                new System.Data.SqlClient.SqlParameter("@APPID",_appid),
                new System.Data.SqlClient.SqlParameter("@APPSECRET",_appsecret),
                new System.Data.SqlClient.SqlParameter("@MchID",_mchid),
                new System.Data.SqlClient.SqlParameter("@PayKey",_paykey),
                new System.Data.SqlClient.SqlParameter("@ACCESS_TOKEN",_access_token),
                new System.Data.SqlClient.SqlParameter("@token_expires_in",_token_expires_in),
                new System.Data.SqlClient.SqlParameter("@token_dat_now",_token_dat_now),
                new System.Data.SqlClient.SqlParameter("@JSApiTicket",_jsapiticket),
                new System.Data.SqlClient.SqlParameter("@NotifyUrl",_notifyurl),
                new System.Data.SqlClient.SqlParameter("@IsActive",_isactive),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [BaseWxConfig] SET ConfigName=@ConfigName,APPID=@APPID,APPSECRET=@APPSECRET,MchID=@MchID,PayKey=@PayKey,ACCESS_TOKEN=@ACCESS_TOKEN,token_expires_in=@token_expires_in,token_dat_now=@token_dat_now,JSApiTicket=@JSApiTicket,NotifyUrl=@NotifyUrl,IsActive=@IsActive WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ConfigName",_configname),
                new System.Data.SqlClient.SqlParameter("@APPID",_appid),
                new System.Data.SqlClient.SqlParameter("@APPSECRET",_appsecret),
                new System.Data.SqlClient.SqlParameter("@MchID",_mchid),
                new System.Data.SqlClient.SqlParameter("@PayKey",_paykey),
                new System.Data.SqlClient.SqlParameter("@ACCESS_TOKEN",_access_token),
                new System.Data.SqlClient.SqlParameter("@token_expires_in",_token_expires_in),
                new System.Data.SqlClient.SqlParameter("@token_dat_now",_token_dat_now),
                new System.Data.SqlClient.SqlParameter("@JSApiTicket",_jsapiticket),
                new System.Data.SqlClient.SqlParameter("@NotifyUrl",_notifyurl),
                new System.Data.SqlClient.SqlParameter("@IsActive",_isactive),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [BaseWxConfig] SET ConfigName=@ConfigName,APPID=@APPID,APPSECRET=@APPSECRET,MchID=@MchID,PayKey=@PayKey,ACCESS_TOKEN=@ACCESS_TOKEN,token_expires_in=@token_expires_in,token_dat_now=@token_dat_now,JSApiTicket=@JSApiTicket,NotifyUrl=@NotifyUrl,IsActive=@IsActive WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ConfigName",_configname),
                new System.Data.SqlClient.SqlParameter("@APPID",_appid),
                new System.Data.SqlClient.SqlParameter("@APPSECRET",_appsecret),
                new System.Data.SqlClient.SqlParameter("@MchID",_mchid),
                new System.Data.SqlClient.SqlParameter("@PayKey",_paykey),
                new System.Data.SqlClient.SqlParameter("@ACCESS_TOKEN",_access_token),
                new System.Data.SqlClient.SqlParameter("@token_expires_in",_token_expires_in),
                new System.Data.SqlClient.SqlParameter("@token_dat_now",_token_dat_now),
                new System.Data.SqlClient.SqlParameter("@JSApiTicket",_jsapiticket),
                new System.Data.SqlClient.SqlParameter("@NotifyUrl",_notifyurl),
                new System.Data.SqlClient.SqlParameter("@IsActive",_isactive),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static BaseWxConfig GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ConfigName,APPID,APPSECRET,MchID,PayKey,ACCESS_TOKEN,token_expires_in,token_dat_now,JSApiTicket,NotifyUrl,IsActive FROM [BaseWxConfig] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<BaseWxConfig>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ConfigName,APPID,APPSECRET,MchID,PayKey,ACCESS_TOKEN,token_expires_in,token_dat_now,JSApiTicket,NotifyUrl,IsActive FROM [BaseWxConfig] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [BaseWxConfig] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [BaseWxConfig] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<BaseWxConfig> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ConfigName,APPID,APPSECRET,MchID,PayKey,ACCESS_TOKEN,token_expires_in,token_dat_now,JSApiTicket,NotifyUrl,IsActive,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [BaseWxConfig] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<BaseWxConfig>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<BaseWxConfig> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ConfigName,APPID,APPSECRET,MchID,PayKey,ACCESS_TOKEN,token_expires_in,token_dat_now,JSApiTicket,NotifyUrl,IsActive FROM [BaseWxConfig] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<BaseWxConfig>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<BaseWxConfig> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ConfigName,APPID,APPSECRET,MchID,PayKey,ACCESS_TOKEN,token_expires_in,token_dat_now,JSApiTicket,NotifyUrl,IsActive FROM [BaseWxConfig]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<BaseWxConfig>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<BaseWxConfig> GetEntitysByAPPID(int appid)
    	{
    		string strSql = "SELECT ID,ConfigName,APPID,APPSECRET,MchID,PayKey,ACCESS_TOKEN,token_expires_in,token_dat_now,JSApiTicket,NotifyUrl,IsActive FROM [BaseWxConfig] WHERE APPID=@APPID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@APPID",appid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<BaseWxConfig>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class RedPackOrder 
    {
        #region Fields
        //public string str = "OrderNo:2147483647|wishing:2147483647|act_name:2147483647|remark:2147483647|scene_id:2147483647|send_listid:2147483647|Stat:2147483647|username:50|shiwu:50";
        private int _id;
        private string _orderno = string.Empty;
        private decimal _total_amount;
        private int _total_num;
        private string _wishing = string.Empty;
        private string _act_name = string.Empty;
        private string _remark = string.Empty;
        private string _scene_id = string.Empty;
        private string _send_listid = string.Empty;
        private string _stat = string.Empty;
        private string _username = string.Empty;
        private DateTime _time = new DateTime(1900,1,1);
        private string _shiwu = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 红包订单号
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 付款金额
        /// </summary>
        public decimal total_amount
        {
            get { return _total_amount; }
            set { _total_amount = value; }
        }

        /// <summary>
        /// 红包发放总人数
        /// </summary>
        public int total_num
        {
            get { return _total_num; }
            set { _total_num = value; }
        }

        /// <summary>
        /// 红包祝福语
        /// </summary>
        public string wishing
        {
            get { return _wishing; }
            set { _wishing = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 活动名称
        /// </summary>
        public string act_name
        {
            get { return _act_name; }
            set { _act_name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string remark
        {
            get { return _remark; }
            set { _remark = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// PRODUCT_1:商品促销/PRODUCT_2:抽奖/PRODUCT_3:虚拟物品兑奖/PRODUCT_4:企业内部福利/PRODUCT_5:渠道分润/PRODUCT_6:保险回馈/PRODUCT_7:彩票派/PRODUCT_8:税务刮奖
        /// </summary>
        public string scene_id
        {
            get { return _scene_id; }
            set { _scene_id = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 红包订单的微信单号  红包发放后产生
        /// </summary>
        public string send_listid
        {
            get { return _send_listid; }
            set { _send_listid = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 未完成/已完成
        /// </summary>
        public string Stat
        {
            get { return _stat; }
            set { _stat = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string username
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime time
        {
            get { return _time; }
            set { _time = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string shiwu
        {
            get { return _shiwu; }
            set { _shiwu = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [RedPackOrder] (OrderNo,total_amount,total_num,wishing,act_name,remark,scene_id,send_listid,Stat,username,time,shiwu) values (@OrderNo,@total_amount,@total_num,@wishing,@act_name,@remark,@scene_id,@send_listid,@Stat,@username,@time,@shiwu);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [RedPackOrder]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@total_amount",_total_amount),
                new System.Data.SqlClient.SqlParameter("@total_num",_total_num),
                new System.Data.SqlClient.SqlParameter("@wishing",_wishing),
                new System.Data.SqlClient.SqlParameter("@act_name",_act_name),
                new System.Data.SqlClient.SqlParameter("@remark",_remark),
                new System.Data.SqlClient.SqlParameter("@scene_id",_scene_id),
                new System.Data.SqlClient.SqlParameter("@send_listid",_send_listid),
                new System.Data.SqlClient.SqlParameter("@Stat",_stat),
                new System.Data.SqlClient.SqlParameter("@username",_username),
                new System.Data.SqlClient.SqlParameter("@time",_time),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [RedPackOrder] (OrderNo,total_amount,total_num,wishing,act_name,remark,scene_id,send_listid,Stat,username,time,shiwu) values (@OrderNo,@total_amount,@total_num,@wishing,@act_name,@remark,@scene_id,@send_listid,@Stat,@username,@time,@shiwu);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [RedPackOrder]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@total_amount",_total_amount),
                new System.Data.SqlClient.SqlParameter("@total_num",_total_num),
                new System.Data.SqlClient.SqlParameter("@wishing",_wishing),
                new System.Data.SqlClient.SqlParameter("@act_name",_act_name),
                new System.Data.SqlClient.SqlParameter("@remark",_remark),
                new System.Data.SqlClient.SqlParameter("@scene_id",_scene_id),
                new System.Data.SqlClient.SqlParameter("@send_listid",_send_listid),
                new System.Data.SqlClient.SqlParameter("@Stat",_stat),
                new System.Data.SqlClient.SqlParameter("@username",_username),
                new System.Data.SqlClient.SqlParameter("@time",_time),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [RedPackOrder] SET OrderNo=@OrderNo,total_amount=@total_amount,total_num=@total_num,wishing=@wishing,act_name=@act_name,remark=@remark,scene_id=@scene_id,send_listid=@send_listid,Stat=@Stat,username=@username,time=@time,shiwu=@shiwu WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@total_amount",_total_amount),
                new System.Data.SqlClient.SqlParameter("@total_num",_total_num),
                new System.Data.SqlClient.SqlParameter("@wishing",_wishing),
                new System.Data.SqlClient.SqlParameter("@act_name",_act_name),
                new System.Data.SqlClient.SqlParameter("@remark",_remark),
                new System.Data.SqlClient.SqlParameter("@scene_id",_scene_id),
                new System.Data.SqlClient.SqlParameter("@send_listid",_send_listid),
                new System.Data.SqlClient.SqlParameter("@Stat",_stat),
                new System.Data.SqlClient.SqlParameter("@username",_username),
                new System.Data.SqlClient.SqlParameter("@time",_time),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [RedPackOrder] SET OrderNo=@OrderNo,total_amount=@total_amount,total_num=@total_num,wishing=@wishing,act_name=@act_name,remark=@remark,scene_id=@scene_id,send_listid=@send_listid,Stat=@Stat,username=@username,time=@time,shiwu=@shiwu WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@total_amount",_total_amount),
                new System.Data.SqlClient.SqlParameter("@total_num",_total_num),
                new System.Data.SqlClient.SqlParameter("@wishing",_wishing),
                new System.Data.SqlClient.SqlParameter("@act_name",_act_name),
                new System.Data.SqlClient.SqlParameter("@remark",_remark),
                new System.Data.SqlClient.SqlParameter("@scene_id",_scene_id),
                new System.Data.SqlClient.SqlParameter("@send_listid",_send_listid),
                new System.Data.SqlClient.SqlParameter("@Stat",_stat),
                new System.Data.SqlClient.SqlParameter("@username",_username),
                new System.Data.SqlClient.SqlParameter("@time",_time),
                new System.Data.SqlClient.SqlParameter("@shiwu",_shiwu),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static RedPackOrder GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,OrderNo,total_amount,total_num,wishing,act_name,remark,scene_id,send_listid,Stat,username,time,shiwu FROM [RedPackOrder] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<RedPackOrder>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,OrderNo,total_amount,total_num,wishing,act_name,remark,scene_id,send_listid,Stat,username,time,shiwu FROM [RedPackOrder] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [RedPackOrder] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [RedPackOrder] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<RedPackOrder> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,total_amount,total_num,wishing,act_name,remark,scene_id,send_listid,Stat,username,time,shiwu,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [RedPackOrder] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackOrder>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<RedPackOrder> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,total_amount,total_num,wishing,act_name,remark,scene_id,send_listid,Stat,username,time,shiwu FROM [RedPackOrder] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackOrder>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<RedPackOrder> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,OrderNo,total_amount,total_num,wishing,act_name,remark,scene_id,send_listid,Stat,username,time,shiwu FROM [RedPackOrder]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<RedPackOrder>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class BasePostCode 
    {
        #region Fields
        //public string str = "PostName:2147483647|PostCode:2147483647";
        private int _id;
        private string _postname = string.Empty;
        private string _postcode = string.Empty;
        private int _sort;
        private bool _ishave;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 快递公司名
        /// </summary>
        public string PostName
        {
            get { return _postname; }
            set { _postname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 快递公司代号
        /// </summary>
        public string PostCode
        {
            get { return _postcode; }
            set { _postcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 排序
        /// </summary>
        public int Sort
        {
            get { return _sort; }
            set { _sort = value; }
        }

        /// <summary>
        /// 是否收录
        /// </summary>
        public bool IsHave
        {
            get { return _ishave; }
            set { _ishave = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [BasePostCode] (PostName,PostCode,Sort,IsHave) values (@PostName,@PostCode,@Sort,@IsHave);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [BasePostCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostCode",_postcode),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsHave",_ishave),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [BasePostCode] (PostName,PostCode,Sort,IsHave) values (@PostName,@PostCode,@Sort,@IsHave);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [BasePostCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostCode",_postcode),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsHave",_ishave),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [BasePostCode] SET PostName=@PostName,PostCode=@PostCode,Sort=@Sort,IsHave=@IsHave WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostCode",_postcode),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsHave",_ishave),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [BasePostCode] SET PostName=@PostName,PostCode=@PostCode,Sort=@Sort,IsHave=@IsHave WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@PostName",_postname),
                new System.Data.SqlClient.SqlParameter("@PostCode",_postcode),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@IsHave",_ishave),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static BasePostCode GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,PostName,PostCode,Sort,IsHave FROM [BasePostCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<BasePostCode>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,PostName,PostCode,Sort,IsHave FROM [BasePostCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [BasePostCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [BasePostCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<BasePostCode> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,PostName,PostCode,Sort,IsHave,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [BasePostCode] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<BasePostCode>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<BasePostCode> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,PostName,PostCode,Sort,IsHave FROM [BasePostCode] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<BasePostCode>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<BasePostCode> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,PostName,PostCode,Sort,IsHave FROM [BasePostCode]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<BasePostCode>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class BaseParameters 
    {
        #region Fields
        //public string str = "ParametersKey:50|NickName:2147483647|ParametersVal:2147483647|Remark:2147483647|Type:500|valType:2147483647";
        private int _id;
        private string _parameterskey = string.Empty;
        private string _nickname = string.Empty;
        private string _parametersval = string.Empty;
        private int _sort;
        private string _remark = string.Empty;
        private string _type = string.Empty;
        private bool _isvalid;
        private string _valtype = string.Empty;
        private bool _isshow;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 唯一标识  英文、下划线
        /// </summary>
        public string ParametersKey
        {
            get { return _parameterskey; }
            set { _parameterskey = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 名称
        /// </summary>
        public string NickName
        {
            get { return _nickname; }
            set { _nickname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 参数值
        /// </summary>
        public string ParametersVal
        {
            get { return _parametersval; }
            set { _parametersval = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 排序
        /// </summary>
        public int Sort
        {
            get { return _sort; }
            set { _sort = value; }
        }

        /// <summary>
        /// 备注
        /// </summary>
        public string Remark
        {
            get { return _remark; }
            set { _remark = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 类别  分类
        /// </summary>
        public string Type
        {
            get { return _type; }
            set { _type = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 是否有效
        /// </summary>
        public bool IsValid
        {
            get { return _isvalid; }
            set { _isvalid = value; }
        }

        /// <summary>
        /// 值类型     text/image/password
        /// </summary>
        public string valType
        {
            get { return _valtype; }
            set { _valtype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 是否有效
        /// </summary>
        public bool IsShow
        {
            get { return _isshow; }
            set { _isshow = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [BaseParameters] (ParametersKey,NickName,ParametersVal,Sort,Remark,Type,IsValid,valType,IsShow) values (@ParametersKey,@NickName,@ParametersVal,@Sort,@Remark,@Type,@IsValid,@valType,@IsShow);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [BaseParameters]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ParametersKey",_parameterskey),
                new System.Data.SqlClient.SqlParameter("@NickName",_nickname),
                new System.Data.SqlClient.SqlParameter("@ParametersVal",_parametersval),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@valType",_valtype),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [BaseParameters] (ParametersKey,NickName,ParametersVal,Sort,Remark,Type,IsValid,valType,IsShow) values (@ParametersKey,@NickName,@ParametersVal,@Sort,@Remark,@Type,@IsValid,@valType,@IsShow);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [BaseParameters]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ParametersKey",_parameterskey),
                new System.Data.SqlClient.SqlParameter("@NickName",_nickname),
                new System.Data.SqlClient.SqlParameter("@ParametersVal",_parametersval),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@valType",_valtype),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [BaseParameters] SET ParametersKey=@ParametersKey,NickName=@NickName,ParametersVal=@ParametersVal,Sort=@Sort,Remark=@Remark,Type=@Type,IsValid=@IsValid,valType=@valType,IsShow=@IsShow WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ParametersKey",_parameterskey),
                new System.Data.SqlClient.SqlParameter("@NickName",_nickname),
                new System.Data.SqlClient.SqlParameter("@ParametersVal",_parametersval),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@valType",_valtype),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [BaseParameters] SET ParametersKey=@ParametersKey,NickName=@NickName,ParametersVal=@ParametersVal,Sort=@Sort,Remark=@Remark,Type=@Type,IsValid=@IsValid,valType=@valType,IsShow=@IsShow WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@ParametersKey",_parameterskey),
                new System.Data.SqlClient.SqlParameter("@NickName",_nickname),
                new System.Data.SqlClient.SqlParameter("@ParametersVal",_parametersval),
                new System.Data.SqlClient.SqlParameter("@Sort",_sort),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
                new System.Data.SqlClient.SqlParameter("@Type",_type),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@valType",_valtype),
                new System.Data.SqlClient.SqlParameter("@IsShow",_isshow),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static BaseParameters GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,ParametersKey,NickName,ParametersVal,Sort,Remark,Type,IsValid,valType,IsShow FROM [BaseParameters] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<BaseParameters>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,ParametersKey,NickName,ParametersVal,Sort,Remark,Type,IsValid,valType,IsShow FROM [BaseParameters] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [BaseParameters] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [BaseParameters] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<BaseParameters> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ParametersKey,NickName,ParametersVal,Sort,Remark,Type,IsValid,valType,IsShow,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [BaseParameters] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<BaseParameters>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<BaseParameters> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,ParametersKey,NickName,ParametersVal,Sort,Remark,Type,IsValid,valType,IsShow FROM [BaseParameters] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<BaseParameters>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<BaseParameters> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,ParametersKey,NickName,ParametersVal,Sort,Remark,Type,IsValid,valType,IsShow FROM [BaseParameters]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<BaseParameters>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class Product 
    {
        #region Fields
        //public string str = "ProductNumber:50|ProductName:50|ProductImg:2147483647|States:50|ImgTxtContent:2147483647|ImgTxtTmp:2147483647|bianma:2147483647";
        private int _productid;
        private string _productnumber = string.Empty;
        private string _productname = string.Empty;
        private string _productimg = string.Empty;
        private DateTime _addtime = new DateTime(1900,1,1);
        private string _states = string.Empty;
        private string _imgtxtcontent = string.Empty;
        private string _imgtxttmp = string.Empty;
        private string _bianma = string.Empty;
        private decimal _kw;
        private int _updatetime;
        #endregion

        #region Attributes
        /// <summary>
        /// ID自增
        /// </summary>
        public int ProductID
        {
            get { return _productid; }
            set { _productid = value; }
        }

        /// <summary>
        /// 产品编号
        /// </summary>
        public string ProductNumber
        {
            get { return _productnumber; }
            set { _productnumber = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 产品名称
        /// </summary>
        public string ProductName
        {
            get { return _productname; }
            set { _productname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 产品图片路径
        /// </summary>
        public string ProductImg
        {
            get { return _productimg; }
            set { _productimg = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 添加时间
        /// </summary>
        public DateTime AddTime
        {
            get { return _addtime; }
            set { _addtime = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 状态  已上架/未上架
        /// </summary>
        public string States
        {
            get { return _states; }
            set { _states = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 图文详情
        /// </summary>
        public string ImgTxtContent
        {
            get { return _imgtxtcontent; }
            set { _imgtxtcontent = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 草稿箱
        /// </summary>
        public string ImgTxtTmp
        {
            get { return _imgtxttmp; }
            set { _imgtxttmp = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string bianma
        {
            get { return _bianma; }
            set { _bianma = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal kw
        {
            get { return _kw; }
            set { _kw = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int UpdateTime
        {
            get { return _updatetime; }
            set { _updatetime = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [Product] (ProductNumber,ProductName,ProductImg,AddTime,States,ImgTxtContent,ImgTxtTmp,bianma,kw,UpdateTime) values (@ProductNumber,@ProductName,@ProductImg,@AddTime,@States,@ImgTxtContent,@ImgTxtTmp,@bianma,@kw,@UpdateTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Product]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@ProductImg",_productimg),
                new System.Data.SqlClient.SqlParameter("@AddTime",_addtime),
                new System.Data.SqlClient.SqlParameter("@States",_states),
                new System.Data.SqlClient.SqlParameter("@ImgTxtContent",_imgtxtcontent),
                new System.Data.SqlClient.SqlParameter("@ImgTxtTmp",_imgtxttmp),
                new System.Data.SqlClient.SqlParameter("@bianma",_bianma),
                new System.Data.SqlClient.SqlParameter("@kw",_kw),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [Product] (ProductNumber,ProductName,ProductImg,AddTime,States,ImgTxtContent,ImgTxtTmp,bianma,kw,UpdateTime) values (@ProductNumber,@ProductName,@ProductImg,@AddTime,@States,@ImgTxtContent,@ImgTxtTmp,@bianma,@kw,@UpdateTime);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [Product]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@ProductImg",_productimg),
                new System.Data.SqlClient.SqlParameter("@AddTime",_addtime),
                new System.Data.SqlClient.SqlParameter("@States",_states),
                new System.Data.SqlClient.SqlParameter("@ImgTxtContent",_imgtxtcontent),
                new System.Data.SqlClient.SqlParameter("@ImgTxtTmp",_imgtxttmp),
                new System.Data.SqlClient.SqlParameter("@bianma",_bianma),
                new System.Data.SqlClient.SqlParameter("@kw",_kw),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [Product] SET ProductNumber=@ProductNumber,ProductName=@ProductName,ProductImg=@ProductImg,AddTime=@AddTime,States=@States,ImgTxtContent=@ImgTxtContent,ImgTxtTmp=@ImgTxtTmp,bianma=@bianma,kw=@kw,UpdateTime=@UpdateTime WHERE ProductID=@ProductID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@ProductImg",_productimg),
                new System.Data.SqlClient.SqlParameter("@AddTime",_addtime),
                new System.Data.SqlClient.SqlParameter("@States",_states),
                new System.Data.SqlClient.SqlParameter("@ImgTxtContent",_imgtxtcontent),
                new System.Data.SqlClient.SqlParameter("@ImgTxtTmp",_imgtxttmp),
                new System.Data.SqlClient.SqlParameter("@bianma",_bianma),
                new System.Data.SqlClient.SqlParameter("@kw",_kw),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [Product] SET ProductNumber=@ProductNumber,ProductName=@ProductName,ProductImg=@ProductImg,AddTime=@AddTime,States=@States,ImgTxtContent=@ImgTxtContent,ImgTxtTmp=@ImgTxtTmp,bianma=@bianma,kw=@kw,UpdateTime=@UpdateTime WHERE ProductID=@ProductID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ProductID",_productid),
                new System.Data.SqlClient.SqlParameter("@ProductNumber",_productnumber),
                new System.Data.SqlClient.SqlParameter("@ProductName",_productname),
                new System.Data.SqlClient.SqlParameter("@ProductImg",_productimg),
                new System.Data.SqlClient.SqlParameter("@AddTime",_addtime),
                new System.Data.SqlClient.SqlParameter("@States",_states),
                new System.Data.SqlClient.SqlParameter("@ImgTxtContent",_imgtxtcontent),
                new System.Data.SqlClient.SqlParameter("@ImgTxtTmp",_imgtxttmp),
                new System.Data.SqlClient.SqlParameter("@bianma",_bianma),
                new System.Data.SqlClient.SqlParameter("@kw",_kw),
                new System.Data.SqlClient.SqlParameter("@UpdateTime",_updatetime),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static Product GetEntityByID(int id)
    	{
    		string strSql = "SELECT ProductID,ProductNumber,ProductName,ProductImg,AddTime,States,ImgTxtContent,ImgTxtTmp,bianma,kw,UpdateTime FROM [Product] WHERE ProductID=@ProductID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ProductID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<Product>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ProductID,ProductNumber,ProductName,ProductImg,AddTime,States,ImgTxtContent,ImgTxtTmp,bianma,kw,UpdateTime FROM [Product] WHERE ProductID=@ProductID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ProductID", pk > 0 ? pk : _productid) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [Product] WHERE ProductID=@ProductID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ProductID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [Product] WHERE ProductID=@ProductID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ProductID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Product> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ProductID,ProductNumber,ProductName,ProductImg,AddTime,States,ImgTxtContent,ImgTxtTmp,bianma,kw,UpdateTime,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [Product] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Product>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<Product> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ProductID,ProductNumber,ProductName,ProductImg,AddTime,States,ImgTxtContent,ImgTxtTmp,bianma,kw,UpdateTime FROM [Product] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<Product>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<Product> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ProductID,ProductNumber,ProductName,ProductImg,AddTime,States,ImgTxtContent,ImgTxtTmp,bianma,kw,UpdateTime FROM [Product]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<Product>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class B_UserRoles 
    {
        #region Fields
        //public string str = "UserName:2147483647";
        private int _id;
        private string _username = string.Empty;
        private int _roleid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 后台用户名
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 角色编号
        /// </summary>
        public int RoleID
        {
            get { return _roleid; }
            set { _roleid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [B_UserRoles] (UserName,RoleID) values (@UserName,@RoleID);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_UserRoles]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [B_UserRoles] (UserName,RoleID) values (@UserName,@RoleID);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_UserRoles]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [B_UserRoles] SET UserName=@UserName,RoleID=@RoleID WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [B_UserRoles] SET UserName=@UserName,RoleID=@RoleID WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static B_UserRoles GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,UserName,RoleID FROM [B_UserRoles] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<B_UserRoles>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,UserName,RoleID FROM [B_UserRoles] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [B_UserRoles] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [B_UserRoles] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_UserRoles> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,RoleID,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [B_UserRoles] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_UserRoles>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_UserRoles> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,RoleID FROM [B_UserRoles] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_UserRoles>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<B_UserRoles> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,UserName,RoleID FROM [B_UserRoles]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<B_UserRoles>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<B_UserRoles> GetEntitysByRoleID(int roleid)
    	{
    		string strSql = "SELECT ID,UserName,RoleID FROM [B_UserRoles] WHERE RoleID=@RoleID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@RoleID",roleid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<B_UserRoles>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class B_User 
    {
        #region Fields
        //public string str = "UserName:2147483647|Name:2147483647|PassWord:50|Mobile:50|WxNo:50|Email:50|PortraitUrl:2147483647|LoginLastIp:500|GuidCode:50|C_UserName:2147483647";
        private int _id;
        private string _username = string.Empty;
        private string _name = string.Empty;
        private string _password = string.Empty;
        private string _mobile = string.Empty;
        private string _wxno = string.Empty;
        private string _email = string.Empty;
        private string _portraiturl = string.Empty;
        private DateTime _birthday = new DateTime(1900,1,1);
        private bool _isvalid;
        private int _logintimes;
        private DateTime _loginlastdat = new DateTime(1900,1,1);
        private string _loginlastip = string.Empty;
        private string _guidcode = string.Empty;
        private DateTime _datadd = new DateTime(1900,1,1);
        private string _c_username = string.Empty;
        private int _deptid;
        private int _roleid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 用户名
        /// </summary>
        public string UserName
        {
            get { return _username; }
            set { _username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 姓名
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 密码
        /// </summary>
        public string PassWord
        {
            get { return _password; }
            set { _password = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 手机号
        /// </summary>
        public string Mobile
        {
            get { return _mobile; }
            set { _mobile = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 用户微信号
        /// </summary>
        public string WxNo
        {
            get { return _wxno; }
            set { _wxno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 邮箱
        /// </summary>
        public string Email
        {
            get { return _email; }
            set { _email = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 头像Url
        /// </summary>
        public string PortraitUrl
        {
            get { return _portraiturl; }
            set { _portraiturl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 生日
        /// </summary>
        public DateTime BirthDay
        {
            get { return _birthday; }
            set { _birthday = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 是否可用
        /// </summary>
        public bool IsValid
        {
            get { return _isvalid; }
            set { _isvalid = value; }
        }

        /// <summary>
        /// 登录次数
        /// </summary>
        public int LoginTimes
        {
            get { return _logintimes; }
            set { _logintimes = value; }
        }

        /// <summary>
        /// 最后登陆时间
        /// </summary>
        public DateTime LoginLastDat
        {
            get { return _loginlastdat; }
            set { _loginlastdat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 最后登陆ip
        /// </summary>
        public string LoginLastIp
        {
            get { return _loginlastip; }
            set { _loginlastip = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        /// <summary>
        /// 唯一标识码
        /// </summary>
        public string GuidCode
        {
            get { return _guidcode; }
            set { _guidcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 添加时间
        /// </summary>
        public DateTime DatAdd
        {
            get { return _datadd; }
            set { _datadd = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 绑定的前端客户ID
        /// </summary>
        public string C_UserName
        {
            get { return _c_username; }
            set { _c_username = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public int DeptID
        {
            get { return _deptid; }
            set { _deptid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int RoleID
        {
            get { return _roleid; }
            set { _roleid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [B_User] (UserName,Name,PassWord,Mobile,WxNo,Email,PortraitUrl,BirthDay,IsValid,LoginTimes,LoginLastDat,LoginLastIp,GuidCode,DatAdd,C_UserName,DeptID,RoleID) values (@UserName,@Name,@PassWord,@Mobile,@WxNo,@Email,@PortraitUrl,@BirthDay,@IsValid,@LoginTimes,@LoginLastDat,@LoginLastIp,@GuidCode,@DatAdd,@C_UserName,@DeptID,@RoleID);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_User]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@WxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@Email",_email),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@BirthDay",_birthday),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@LoginTimes",_logintimes),
                new System.Data.SqlClient.SqlParameter("@LoginLastDat",_loginlastdat),
                new System.Data.SqlClient.SqlParameter("@LoginLastIp",_loginlastip),
                new System.Data.SqlClient.SqlParameter("@GuidCode",_guidcode),
                new System.Data.SqlClient.SqlParameter("@DatAdd",_datadd),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@DeptID",_deptid),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [B_User] (UserName,Name,PassWord,Mobile,WxNo,Email,PortraitUrl,BirthDay,IsValid,LoginTimes,LoginLastDat,LoginLastIp,GuidCode,DatAdd,C_UserName,DeptID,RoleID) values (@UserName,@Name,@PassWord,@Mobile,@WxNo,@Email,@PortraitUrl,@BirthDay,@IsValid,@LoginTimes,@LoginLastDat,@LoginLastIp,@GuidCode,@DatAdd,@C_UserName,@DeptID,@RoleID);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_User]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@WxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@Email",_email),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@BirthDay",_birthday),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@LoginTimes",_logintimes),
                new System.Data.SqlClient.SqlParameter("@LoginLastDat",_loginlastdat),
                new System.Data.SqlClient.SqlParameter("@LoginLastIp",_loginlastip),
                new System.Data.SqlClient.SqlParameter("@GuidCode",_guidcode),
                new System.Data.SqlClient.SqlParameter("@DatAdd",_datadd),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@DeptID",_deptid),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [B_User] SET UserName=@UserName,Name=@Name,PassWord=@PassWord,Mobile=@Mobile,WxNo=@WxNo,Email=@Email,PortraitUrl=@PortraitUrl,BirthDay=@BirthDay,IsValid=@IsValid,LoginTimes=@LoginTimes,LoginLastDat=@LoginLastDat,LoginLastIp=@LoginLastIp,GuidCode=@GuidCode,DatAdd=@DatAdd,C_UserName=@C_UserName,DeptID=@DeptID,RoleID=@RoleID WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@WxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@Email",_email),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@BirthDay",_birthday),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@LoginTimes",_logintimes),
                new System.Data.SqlClient.SqlParameter("@LoginLastDat",_loginlastdat),
                new System.Data.SqlClient.SqlParameter("@LoginLastIp",_loginlastip),
                new System.Data.SqlClient.SqlParameter("@GuidCode",_guidcode),
                new System.Data.SqlClient.SqlParameter("@DatAdd",_datadd),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@DeptID",_deptid),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [B_User] SET UserName=@UserName,Name=@Name,PassWord=@PassWord,Mobile=@Mobile,WxNo=@WxNo,Email=@Email,PortraitUrl=@PortraitUrl,BirthDay=@BirthDay,IsValid=@IsValid,LoginTimes=@LoginTimes,LoginLastDat=@LoginLastDat,LoginLastIp=@LoginLastIp,GuidCode=@GuidCode,DatAdd=@DatAdd,C_UserName=@C_UserName,DeptID=@DeptID,RoleID=@RoleID WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@UserName",_username),
                new System.Data.SqlClient.SqlParameter("@Name",_name),
                new System.Data.SqlClient.SqlParameter("@PassWord",_password),
                new System.Data.SqlClient.SqlParameter("@Mobile",_mobile),
                new System.Data.SqlClient.SqlParameter("@WxNo",_wxno),
                new System.Data.SqlClient.SqlParameter("@Email",_email),
                new System.Data.SqlClient.SqlParameter("@PortraitUrl",_portraiturl),
                new System.Data.SqlClient.SqlParameter("@BirthDay",_birthday),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@LoginTimes",_logintimes),
                new System.Data.SqlClient.SqlParameter("@LoginLastDat",_loginlastdat),
                new System.Data.SqlClient.SqlParameter("@LoginLastIp",_loginlastip),
                new System.Data.SqlClient.SqlParameter("@GuidCode",_guidcode),
                new System.Data.SqlClient.SqlParameter("@DatAdd",_datadd),
                new System.Data.SqlClient.SqlParameter("@C_UserName",_c_username),
                new System.Data.SqlClient.SqlParameter("@DeptID",_deptid),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static B_User GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,UserName,Name,PassWord,Mobile,WxNo,Email,PortraitUrl,BirthDay,IsValid,LoginTimes,LoginLastDat,LoginLastIp,GuidCode,DatAdd,C_UserName,DeptID,RoleID FROM [B_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<B_User>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,UserName,Name,PassWord,Mobile,WxNo,Email,PortraitUrl,BirthDay,IsValid,LoginTimes,LoginLastDat,LoginLastIp,GuidCode,DatAdd,C_UserName,DeptID,RoleID FROM [B_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [B_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [B_User] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_User> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,Name,PassWord,Mobile,WxNo,Email,PortraitUrl,BirthDay,IsValid,LoginTimes,LoginLastDat,LoginLastIp,GuidCode,DatAdd,C_UserName,DeptID,RoleID,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [B_User] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_User>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_User> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,UserName,Name,PassWord,Mobile,WxNo,Email,PortraitUrl,BirthDay,IsValid,LoginTimes,LoginLastDat,LoginLastIp,GuidCode,DatAdd,C_UserName,DeptID,RoleID FROM [B_User] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_User>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<B_User> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,UserName,Name,PassWord,Mobile,WxNo,Email,PortraitUrl,BirthDay,IsValid,LoginTimes,LoginLastDat,LoginLastIp,GuidCode,DatAdd,C_UserName,DeptID,RoleID FROM [B_User]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<B_User>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class B_RoleRights 
    {
        #region Fields
        //public string str = "";
        private int _id;
        private int _roleid;
        private int _rightid;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 角色编号
        /// </summary>
        public int RoleID
        {
            get { return _roleid; }
            set { _roleid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int RightID
        {
            get { return _rightid; }
            set { _rightid = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [B_RoleRights] (RoleID,RightID) values (@RoleID,@RightID);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_RoleRights]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@RightID",_rightid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [B_RoleRights] (RoleID,RightID) values (@RoleID,@RightID);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_RoleRights]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@RightID",_rightid),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [B_RoleRights] SET RoleID=@RoleID,RightID=@RightID WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@RightID",_rightid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [B_RoleRights] SET RoleID=@RoleID,RightID=@RightID WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleID",_roleid),
                new System.Data.SqlClient.SqlParameter("@RightID",_rightid),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static B_RoleRights GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,RoleID,RightID FROM [B_RoleRights] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<B_RoleRights>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,RoleID,RightID FROM [B_RoleRights] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [B_RoleRights] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [B_RoleRights] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_RoleRights> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,RoleID,RightID,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [B_RoleRights] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_RoleRights>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_RoleRights> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,RoleID,RightID FROM [B_RoleRights] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_RoleRights>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<B_RoleRights> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,RoleID,RightID FROM [B_RoleRights]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<B_RoleRights>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<B_RoleRights> GetEntitysByRoleID(int roleid)
    	{
    		string strSql = "SELECT ID,RoleID,RightID FROM [B_RoleRights] WHERE RoleID=@RoleID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@RoleID",roleid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<B_RoleRights>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<B_RoleRights> GetEntitysByRightID(int rightid)
    	{
    		string strSql = "SELECT ID,RoleID,RightID FROM [B_RoleRights] WHERE RightID=@RightID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@RightID",rightid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<B_RoleRights>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class B_Role 
    {
        #region Fields
        //public string str = "RoleName:50|Remark:500";
        private int _id;
        private string _rolename = string.Empty;
        private bool _isvalid;
        private string _remark = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 角色名称
        /// </summary>
        public string RoleName
        {
            get { return _rolename; }
            set { _rolename = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 是否可用
        /// </summary>
        public bool IsValid
        {
            get { return _isvalid; }
            set { _isvalid = value; }
        }

        /// <summary>
        /// 描述
        /// </summary>
        public string Remark
        {
            get { return _remark; }
            set { _remark = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 500); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [B_Role] (RoleName,IsValid,Remark) values (@RoleName,@IsValid,@Remark);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_Role]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleName",_rolename),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [B_Role] (RoleName,IsValid,Remark) values (@RoleName,@IsValid,@Remark);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_Role]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleName",_rolename),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [B_Role] SET RoleName=@RoleName,IsValid=@IsValid,Remark=@Remark WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleName",_rolename),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [B_Role] SET RoleName=@RoleName,IsValid=@IsValid,Remark=@Remark WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@RoleName",_rolename),
                new System.Data.SqlClient.SqlParameter("@IsValid",_isvalid),
                new System.Data.SqlClient.SqlParameter("@Remark",_remark),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static B_Role GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,RoleName,IsValid,Remark FROM [B_Role] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<B_Role>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,RoleName,IsValid,Remark FROM [B_Role] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [B_Role] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [B_Role] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_Role> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,RoleName,IsValid,Remark,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [B_Role] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_Role>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_Role> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,RoleName,IsValid,Remark FROM [B_Role] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_Role>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<B_Role> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,RoleName,IsValid,Remark FROM [B_Role]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<B_Role>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<B_Role> GetEntitysByIsValid(int isvalid)
    	{
    		string strSql = "SELECT ID,RoleName,IsValid,Remark FROM [B_Role] WHERE IsValid=@IsValid";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@IsValid",isvalid) };
    
    		return DAL.EntityDataHelper.FillData2Entities<B_Role>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class WXMenu 
    {
        #region Fields
        //public string str = "MenuName:2147483647|MenuType:2147483647|Menukey:2147483647|MenuUrl:2147483647|Media_id:2147483647|MediaType:2147483647|Text:2147483647";
        private int _id;
        private string _menuname = string.Empty;
        private string _menutype = string.Empty;
        private string _menukey = string.Empty;
        private string _menuurl = string.Empty;
        private string _media_id = string.Empty;
        private string _mediatype = string.Empty;
        private int _parentid;
        private string _text = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 菜单名称
        /// </summary>
        public string MenuName
        {
            get { return _menuname; }
            set { _menuname = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 菜单的响应动作类型
        /// </summary>
        public string MenuType
        {
            get { return _menutype; }
            set { _menutype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 菜单KEY值，用于消息接口推送，不超过128字节
        /// </summary>
        public string Menukey
        {
            get { return _menukey; }
            set { _menukey = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 网页链接，用户点击菜单可打开链接，不超过1024字节
        /// </summary>
        public string MenuUrl
        {
            get { return _menuurl; }
            set { _menuurl = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 调用新增永久素材接口返回的合法media_id
        /// </summary>
        public string Media_id
        {
            get { return _media_id; }
            set { _media_id = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 素材的类型，图片（image）、视频（video）、语音 （voice）、图文（news）
        /// </summary>
        public string MediaType
        {
            get { return _mediatype; }
            set { _mediatype = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 上级菜单ID（默认为0）
        /// </summary>
        public int ParentID
        {
            get { return _parentid; }
            set { _parentid = value; }
        }

        /// <summary>
        /// 文本
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [WXMenu] (MenuName,MenuType,Menukey,MenuUrl,Media_id,MediaType,ParentID,Text) values (@MenuName,@MenuType,@Menukey,@MenuUrl,@Media_id,@MediaType,@ParentID,@Text);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [WXMenu]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuName",_menuname),
                new System.Data.SqlClient.SqlParameter("@MenuType",_menutype),
                new System.Data.SqlClient.SqlParameter("@Menukey",_menukey),
                new System.Data.SqlClient.SqlParameter("@MenuUrl",_menuurl),
                new System.Data.SqlClient.SqlParameter("@Media_id",_media_id),
                new System.Data.SqlClient.SqlParameter("@MediaType",_mediatype),
                new System.Data.SqlClient.SqlParameter("@ParentID",_parentid),
                new System.Data.SqlClient.SqlParameter("@Text",_text),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [WXMenu] (MenuName,MenuType,Menukey,MenuUrl,Media_id,MediaType,ParentID,Text) values (@MenuName,@MenuType,@Menukey,@MenuUrl,@Media_id,@MediaType,@ParentID,@Text);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [WXMenu]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuName",_menuname),
                new System.Data.SqlClient.SqlParameter("@MenuType",_menutype),
                new System.Data.SqlClient.SqlParameter("@Menukey",_menukey),
                new System.Data.SqlClient.SqlParameter("@MenuUrl",_menuurl),
                new System.Data.SqlClient.SqlParameter("@Media_id",_media_id),
                new System.Data.SqlClient.SqlParameter("@MediaType",_mediatype),
                new System.Data.SqlClient.SqlParameter("@ParentID",_parentid),
                new System.Data.SqlClient.SqlParameter("@Text",_text),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [WXMenu] SET MenuName=@MenuName,MenuType=@MenuType,Menukey=@Menukey,MenuUrl=@MenuUrl,Media_id=@Media_id,MediaType=@MediaType,ParentID=@ParentID,Text=@Text WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuName",_menuname),
                new System.Data.SqlClient.SqlParameter("@MenuType",_menutype),
                new System.Data.SqlClient.SqlParameter("@Menukey",_menukey),
                new System.Data.SqlClient.SqlParameter("@MenuUrl",_menuurl),
                new System.Data.SqlClient.SqlParameter("@Media_id",_media_id),
                new System.Data.SqlClient.SqlParameter("@MediaType",_mediatype),
                new System.Data.SqlClient.SqlParameter("@ParentID",_parentid),
                new System.Data.SqlClient.SqlParameter("@Text",_text),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [WXMenu] SET MenuName=@MenuName,MenuType=@MenuType,Menukey=@Menukey,MenuUrl=@MenuUrl,Media_id=@Media_id,MediaType=@MediaType,ParentID=@ParentID,Text=@Text WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@MenuName",_menuname),
                new System.Data.SqlClient.SqlParameter("@MenuType",_menutype),
                new System.Data.SqlClient.SqlParameter("@Menukey",_menukey),
                new System.Data.SqlClient.SqlParameter("@MenuUrl",_menuurl),
                new System.Data.SqlClient.SqlParameter("@Media_id",_media_id),
                new System.Data.SqlClient.SqlParameter("@MediaType",_mediatype),
                new System.Data.SqlClient.SqlParameter("@ParentID",_parentid),
                new System.Data.SqlClient.SqlParameter("@Text",_text),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static WXMenu GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,MenuName,MenuType,Menukey,MenuUrl,Media_id,MediaType,ParentID,Text FROM [WXMenu] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<WXMenu>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,MenuName,MenuType,Menukey,MenuUrl,Media_id,MediaType,ParentID,Text FROM [WXMenu] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [WXMenu] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [WXMenu] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<WXMenu> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MenuName,MenuType,Menukey,MenuUrl,Media_id,MediaType,ParentID,Text,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [WXMenu] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<WXMenu>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<WXMenu> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,MenuName,MenuType,Menukey,MenuUrl,Media_id,MediaType,ParentID,Text FROM [WXMenu] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<WXMenu>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<WXMenu> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,MenuName,MenuType,Menukey,MenuUrl,Media_id,MediaType,ParentID,Text FROM [WXMenu]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<WXMenu>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class SYSIntegralCode 
    {
        #region Fields
        //public string str = "WaterCode:2147483647|IntegralCode:2147483647|State:50";
        private int _id;
        private string _watercode = string.Empty;
        private string _integralcode = string.Empty;
        private string _state = string.Empty;
        private DateTime _dat = new DateTime(1900,1,1);
        private int _prizesid;
        private int _areaid;
        private int _laarpp_id;
        private int _redcnted;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 流水码
        /// </summary>
        public string WaterCode
        {
            get { return _watercode; }
            set { _watercode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 防伪码
        /// </summary>
        public string IntegralCode
        {
            get { return _integralcode; }
            set { _integralcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 积分码状态  已抽奖/未使用
        /// </summary>
        public string State
        {
            get { return _state; }
            set { _state = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 导入时间
        /// </summary>
        public DateTime Dat
        {
            get { return _dat; }
            set { _dat = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 奖品ID
        /// </summary>
        public int PrizesID
        {
            get { return _prizesid; }
            set { _prizesid = value; }
        }

        /// <summary>
        /// 区域编号
        /// </summary>
        public int AreaID
        {
            get { return _areaid; }
            set { _areaid = value; }
        }

        /// <summary>
        /// 概率配置ID
        /// </summary>
        public int LAARPP_ID
        {
            get { return _laarpp_id; }
            set { _laarpp_id = value; }
        }

        /// <summary>
        /// 已抽红包个数
        /// </summary>
        public int RedCnted
        {
            get { return _redcnted; }
            set { _redcnted = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [SYSIntegralCode] (WaterCode,IntegralCode,State,Dat,PrizesID,AreaID,LAARPP_ID,RedCnted) values (@WaterCode,@IntegralCode,@State,@Dat,@PrizesID,@AreaID,@LAARPP_ID,@RedCnted);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSIntegralCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@WaterCode",_watercode),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@PrizesID",_prizesid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@LAARPP_ID",_laarpp_id),
                new System.Data.SqlClient.SqlParameter("@RedCnted",_redcnted),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [SYSIntegralCode] (WaterCode,IntegralCode,State,Dat,PrizesID,AreaID,LAARPP_ID,RedCnted) values (@WaterCode,@IntegralCode,@State,@Dat,@PrizesID,@AreaID,@LAARPP_ID,@RedCnted);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [SYSIntegralCode]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@WaterCode",_watercode),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@PrizesID",_prizesid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@LAARPP_ID",_laarpp_id),
                new System.Data.SqlClient.SqlParameter("@RedCnted",_redcnted),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [SYSIntegralCode] SET WaterCode=@WaterCode,IntegralCode=@IntegralCode,State=@State,Dat=@Dat,PrizesID=@PrizesID,AreaID=@AreaID,LAARPP_ID=@LAARPP_ID,RedCnted=@RedCnted WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@WaterCode",_watercode),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@PrizesID",_prizesid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@LAARPP_ID",_laarpp_id),
                new System.Data.SqlClient.SqlParameter("@RedCnted",_redcnted),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [SYSIntegralCode] SET WaterCode=@WaterCode,IntegralCode=@IntegralCode,State=@State,Dat=@Dat,PrizesID=@PrizesID,AreaID=@AreaID,LAARPP_ID=@LAARPP_ID,RedCnted=@RedCnted WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@WaterCode",_watercode),
                new System.Data.SqlClient.SqlParameter("@IntegralCode",_integralcode),
                new System.Data.SqlClient.SqlParameter("@State",_state),
                new System.Data.SqlClient.SqlParameter("@Dat",_dat),
                new System.Data.SqlClient.SqlParameter("@PrizesID",_prizesid),
                new System.Data.SqlClient.SqlParameter("@AreaID",_areaid),
                new System.Data.SqlClient.SqlParameter("@LAARPP_ID",_laarpp_id),
                new System.Data.SqlClient.SqlParameter("@RedCnted",_redcnted),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static SYSIntegralCode GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,WaterCode,IntegralCode,State,Dat,PrizesID,AreaID,LAARPP_ID,RedCnted FROM [SYSIntegralCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<SYSIntegralCode>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,WaterCode,IntegralCode,State,Dat,PrizesID,AreaID,LAARPP_ID,RedCnted FROM [SYSIntegralCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [SYSIntegralCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [SYSIntegralCode] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSIntegralCode> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,WaterCode,IntegralCode,State,Dat,PrizesID,AreaID,LAARPP_ID,RedCnted,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [SYSIntegralCode] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSIntegralCode>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<SYSIntegralCode> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,WaterCode,IntegralCode,State,Dat,PrizesID,AreaID,LAARPP_ID,RedCnted FROM [SYSIntegralCode] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSIntegralCode>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<SYSIntegralCode> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,WaterCode,IntegralCode,State,Dat,PrizesID,AreaID,LAARPP_ID,RedCnted FROM [SYSIntegralCode]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<SYSIntegralCode>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class ScaleRtnStoke 
    {
        #region Fields
        //public string str = "OrderNo:50|BigCode:50|MiddleCode:50|SmallCode:50|AntiCode:50|ProducctNo:50|OperaUser:50|Shipper:50|Consignee:50|OutOrderNo:50";
        private int _id;
        private string _orderno = string.Empty;
        private string _bigcode = string.Empty;
        private string _middlecode = string.Empty;
        private string _smallcode = string.Empty;
        private string _anticode = string.Empty;
        private string _producctno = string.Empty;
        private string _operauser = string.Empty;
        private string _shipper = string.Empty;
        private string _consignee = string.Empty;
        private string _outorderno = string.Empty;
        private bool _ispdaopera;
        private int _outtime;
        private int _returntime;
        private int _outway;
        private int _rtnway;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OrderNo
        {
            get { return _orderno; }
            set { _orderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BigCode
        {
            get { return _bigcode; }
            set { _bigcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string MiddleCode
        {
            get { return _middlecode; }
            set { _middlecode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string SmallCode
        {
            get { return _smallcode; }
            set { _smallcode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string AntiCode
        {
            get { return _anticode; }
            set { _anticode = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ProducctNo
        {
            get { return _producctno; }
            set { _producctno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OperaUser
        {
            get { return _operauser; }
            set { _operauser = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Shipper
        {
            get { return _shipper; }
            set { _shipper = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Consignee
        {
            get { return _consignee; }
            set { _consignee = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OutOrderNo
        {
            get { return _outorderno; }
            set { _outorderno = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsPDAOpera
        {
            get { return _ispdaopera; }
            set { _ispdaopera = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int OutTime
        {
            get { return _outtime; }
            set { _outtime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ReturnTime
        {
            get { return _returntime; }
            set { _returntime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int OutWay
        {
            get { return _outway; }
            set { _outway = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int RtnWay
        {
            get { return _rtnway; }
            set { _rtnway = value; }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [ScaleRtnStoke] (OrderNo,BigCode,MiddleCode,SmallCode,AntiCode,ProducctNo,OperaUser,Shipper,Consignee,OutOrderNo,IsPDAOpera,OutTime,ReturnTime,OutWay,RtnWay) values (@OrderNo,@BigCode,@MiddleCode,@SmallCode,@AntiCode,@ProducctNo,@OperaUser,@Shipper,@Consignee,@OutOrderNo,@IsPDAOpera,@OutTime,@ReturnTime,@OutWay,@RtnWay);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleRtnStoke]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@ProducctNo",_producctno),
                new System.Data.SqlClient.SqlParameter("@OperaUser",_operauser),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@IsPDAOpera",_ispdaopera),
                new System.Data.SqlClient.SqlParameter("@OutTime",_outtime),
                new System.Data.SqlClient.SqlParameter("@ReturnTime",_returntime),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@RtnWay",_rtnway),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [ScaleRtnStoke] (OrderNo,BigCode,MiddleCode,SmallCode,AntiCode,ProducctNo,OperaUser,Shipper,Consignee,OutOrderNo,IsPDAOpera,OutTime,ReturnTime,OutWay,RtnWay) values (@OrderNo,@BigCode,@MiddleCode,@SmallCode,@AntiCode,@ProducctNo,@OperaUser,@Shipper,@Consignee,@OutOrderNo,@IsPDAOpera,@OutTime,@ReturnTime,@OutWay,@RtnWay);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [ScaleRtnStoke]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@ProducctNo",_producctno),
                new System.Data.SqlClient.SqlParameter("@OperaUser",_operauser),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@IsPDAOpera",_ispdaopera),
                new System.Data.SqlClient.SqlParameter("@OutTime",_outtime),
                new System.Data.SqlClient.SqlParameter("@ReturnTime",_returntime),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@RtnWay",_rtnway),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [ScaleRtnStoke] SET OrderNo=@OrderNo,BigCode=@BigCode,MiddleCode=@MiddleCode,SmallCode=@SmallCode,AntiCode=@AntiCode,ProducctNo=@ProducctNo,OperaUser=@OperaUser,Shipper=@Shipper,Consignee=@Consignee,OutOrderNo=@OutOrderNo,IsPDAOpera=@IsPDAOpera,OutTime=@OutTime,ReturnTime=@ReturnTime,OutWay=@OutWay,RtnWay=@RtnWay WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@ProducctNo",_producctno),
                new System.Data.SqlClient.SqlParameter("@OperaUser",_operauser),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@IsPDAOpera",_ispdaopera),
                new System.Data.SqlClient.SqlParameter("@OutTime",_outtime),
                new System.Data.SqlClient.SqlParameter("@ReturnTime",_returntime),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@RtnWay",_rtnway),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [ScaleRtnStoke] SET OrderNo=@OrderNo,BigCode=@BigCode,MiddleCode=@MiddleCode,SmallCode=@SmallCode,AntiCode=@AntiCode,ProducctNo=@ProducctNo,OperaUser=@OperaUser,Shipper=@Shipper,Consignee=@Consignee,OutOrderNo=@OutOrderNo,IsPDAOpera=@IsPDAOpera,OutTime=@OutTime,ReturnTime=@ReturnTime,OutWay=@OutWay,RtnWay=@RtnWay WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@OrderNo",_orderno),
                new System.Data.SqlClient.SqlParameter("@BigCode",_bigcode),
                new System.Data.SqlClient.SqlParameter("@MiddleCode",_middlecode),
                new System.Data.SqlClient.SqlParameter("@SmallCode",_smallcode),
                new System.Data.SqlClient.SqlParameter("@AntiCode",_anticode),
                new System.Data.SqlClient.SqlParameter("@ProducctNo",_producctno),
                new System.Data.SqlClient.SqlParameter("@OperaUser",_operauser),
                new System.Data.SqlClient.SqlParameter("@Shipper",_shipper),
                new System.Data.SqlClient.SqlParameter("@Consignee",_consignee),
                new System.Data.SqlClient.SqlParameter("@OutOrderNo",_outorderno),
                new System.Data.SqlClient.SqlParameter("@IsPDAOpera",_ispdaopera),
                new System.Data.SqlClient.SqlParameter("@OutTime",_outtime),
                new System.Data.SqlClient.SqlParameter("@ReturnTime",_returntime),
                new System.Data.SqlClient.SqlParameter("@OutWay",_outway),
                new System.Data.SqlClient.SqlParameter("@RtnWay",_rtnway),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static ScaleRtnStoke GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,OrderNo,BigCode,MiddleCode,SmallCode,AntiCode,ProducctNo,OperaUser,Shipper,Consignee,OutOrderNo,IsPDAOpera,OutTime,ReturnTime,OutWay,RtnWay FROM [ScaleRtnStoke] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<ScaleRtnStoke>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,OrderNo,BigCode,MiddleCode,SmallCode,AntiCode,ProducctNo,OperaUser,Shipper,Consignee,OutOrderNo,IsPDAOpera,OutTime,ReturnTime,OutWay,RtnWay FROM [ScaleRtnStoke] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [ScaleRtnStoke] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [ScaleRtnStoke] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<ScaleRtnStoke> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,BigCode,MiddleCode,SmallCode,AntiCode,ProducctNo,OperaUser,Shipper,Consignee,OutOrderNo,IsPDAOpera,OutTime,ReturnTime,OutWay,RtnWay,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [ScaleRtnStoke] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleRtnStoke>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<ScaleRtnStoke> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,OrderNo,BigCode,MiddleCode,SmallCode,AntiCode,ProducctNo,OperaUser,Shipper,Consignee,OutOrderNo,IsPDAOpera,OutTime,ReturnTime,OutWay,RtnWay FROM [ScaleRtnStoke] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleRtnStoke>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<ScaleRtnStoke> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,OrderNo,BigCode,MiddleCode,SmallCode,AntiCode,ProducctNo,OperaUser,Shipper,Consignee,OutOrderNo,IsPDAOpera,OutTime,ReturnTime,OutWay,RtnWay FROM [ScaleRtnStoke]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<ScaleRtnStoke>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class B_problem 
    {
        #region Fields
        //public string str = "problem:2147483647|lag:50";
        private int _id;
        private string _problem = string.Empty;
        private string _lag = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string problem
        {
            get { return _problem; }
            set { _problem = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 
        /// </summary>
        public string lag
        {
            get { return _lag; }
            set { _lag = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 50); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [B_problem] (problem,lag) values (@problem,@lag);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_problem]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@problem",_problem),
                new System.Data.SqlClient.SqlParameter("@lag",_lag),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [B_problem] (problem,lag) values (@problem,@lag);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [B_problem]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@problem",_problem),
                new System.Data.SqlClient.SqlParameter("@lag",_lag),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [B_problem] SET problem=@problem,lag=@lag WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@problem",_problem),
                new System.Data.SqlClient.SqlParameter("@lag",_lag),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [B_problem] SET problem=@problem,lag=@lag WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@problem",_problem),
                new System.Data.SqlClient.SqlParameter("@lag",_lag),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static B_problem GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,problem,lag FROM [B_problem] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<B_problem>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,problem,lag FROM [B_problem] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [B_problem] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [B_problem] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_problem> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,problem,lag,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [B_problem] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_problem>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<B_problem> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,problem,lag FROM [B_problem] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<B_problem>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<B_problem> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,problem,lag FROM [B_problem]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<B_problem>(strSql, paramters);
    	}

        #endregion
        
    }


    public partial class WXMaterial_Media 
    {
        #region Fields
        //public string str = "media_id:2147483647|name:2147483647|wx_url:2147483647|url:2147483647|type:2147483647";
        private int _id;
        private string _media_id = string.Empty;
        private string _name = string.Empty;
        private DateTime _update_time = new DateTime(1900,1,1);
        private string _wx_url = string.Empty;
        private string _url = string.Empty;
        private string _type = string.Empty;
        #endregion

        #region Attributes
        /// <summary>
        /// 
        /// </summary>
        public int ID
        {
            get { return _id; }
            set { _id = value; }
        }

        /// <summary>
        /// 公众平台素材ID
        /// </summary>
        public string media_id
        {
            get { return _media_id; }
            set { _media_id = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 文件名称
        /// </summary>
        public string name
        {
            get { return _name; }
            set { _name = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 更新时间
        /// </summary>
        public DateTime update_time
        {
            get { return _update_time; }
            set { _update_time = (value.Year < 1900 ? DateTime.Parse("1900-01-01") : value); }
        }

        /// <summary>
        /// 微信平台文件Url
        /// </summary>
        public string wx_url
        {
            get { return _wx_url; }
            set { _wx_url = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 我们后台的url
        /// </summary>
        public string url
        {
            get { return _url; }
            set { _url = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        /// <summary>
        /// 素材的类型，图片（image）、视频（video）、语音 （voice）
        /// </summary>
        public string type
        {
            get { return _type; }
            set { _type = DAL.StrHelper.NullAndChineseStrLengthChk(value, 0, 2147483647); }
        }

        #endregion

        #region Methods
		/// <summary>
        /// 插入一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity()
        {
            string strSql = "INSERT INTO [WXMaterial_Media] (media_id,name,update_time,wx_url,url,type) values (@media_id,@name,@update_time,@wx_url,@url,@type);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [WXMaterial_Media]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@media_id",_media_id),
                new System.Data.SqlClient.SqlParameter("@name",_name),
                new System.Data.SqlClient.SqlParameter("@update_time",_update_time),
                new System.Data.SqlClient.SqlParameter("@wx_url",_wx_url),
                new System.Data.SqlClient.SqlParameter("@url",_url),
                new System.Data.SqlClient.SqlParameter("@type",_type),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }

		/// <summary>
        /// 插入一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int InsertAndReturnIdentity(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "INSERT INTO [WXMaterial_Media] (media_id,name,update_time,wx_url,url,type) values (@media_id,@name,@update_time,@wx_url,@url,@type);SELECT CAST(scope_identity() AS int);";
            strSql = strSql.Replace("@Sort", "CASE WHEN @Sort IS NULL OR @Sort='' OR @Sort=0 THEN (SELECT ISNULL(MAX(Sort),0)+10 FROM [WXMaterial_Media]) ELSE @Sort END");
			System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@media_id",_media_id),
                new System.Data.SqlClient.SqlParameter("@name",_name),
                new System.Data.SqlClient.SqlParameter("@update_time",_update_time),
                new System.Data.SqlClient.SqlParameter("@wx_url",_wx_url),
                new System.Data.SqlClient.SqlParameter("@url",_url),
                new System.Data.SqlClient.SqlParameter("@type",_type),
            };
            object obj = DAL.SqlHelper.ExecuteScalar(tran, System.Data.CommandType.Text, strSql, paramters);
            if (string.IsNullOrWhiteSpace(obj.ToString()))
            {
                return 0;
            }
            else
            {
                return Convert.ToInt32(obj);
            }
        }


        /// <summary>
        /// 根据主键更新行
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID()
        {
            string strSql = "UPDATE [WXMaterial_Media] SET media_id=@media_id,name=@name,update_time=@update_time,wx_url=@wx_url,url=@url,type=@type WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@media_id",_media_id),
                new System.Data.SqlClient.SqlParameter("@name",_name),
                new System.Data.SqlClient.SqlParameter("@update_time",_update_time),
                new System.Data.SqlClient.SqlParameter("@wx_url",_wx_url),
                new System.Data.SqlClient.SqlParameter("@url",_url),
                new System.Data.SqlClient.SqlParameter("@type",_type),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
        }

		/// <summary>
        /// 根据主键更新行,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
        public int UpdateByID(System.Data.SqlClient.SqlTransaction tran)
        {
            string strSql = "UPDATE [WXMaterial_Media] SET media_id=@media_id,name=@name,update_time=@update_time,wx_url=@wx_url,url=@url,type=@type WHERE ID=@ID;";
            System.Data.SqlClient.SqlParameter[] paramters ={
                new System.Data.SqlClient.SqlParameter("@ID",_id),
                new System.Data.SqlClient.SqlParameter("@media_id",_media_id),
                new System.Data.SqlClient.SqlParameter("@name",_name),
                new System.Data.SqlClient.SqlParameter("@update_time",_update_time),
                new System.Data.SqlClient.SqlParameter("@wx_url",_wx_url),
                new System.Data.SqlClient.SqlParameter("@url",_url),
                new System.Data.SqlClient.SqlParameter("@type",_type),
            };
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
        }


        /// <summary>
        /// 根据主键获取对象
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static WXMaterial_Media GetEntityByID(int id)
    	{
    		string strSql = "SELECT ID,media_id,name,update_time,wx_url,url,type FROM [WXMaterial_Media] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", id) };
    
    		return DAL.EntityDataHelper.LoadData2Entity<WXMaterial_Media>(strSql, paramters);
    	}


        /// <summary>
        /// 根据主键获取数据并填充到已经实例化的对象中,参数pk如果为0则取实例本身的ID值
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public void LoadData2InstanceByID(int pk)
    	{
    		string strSql = "SELECT ID,media_id,name,update_time,wx_url,url,type FROM [WXMaterial_Media] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID", pk > 0 ? pk : _id) };
    
    		DAL.EntityDataHelper.LoadData2Instance(this, strSql, paramters);
    	}

		/// <summary>
        /// 根据主键删除一条数据
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(int id)
    	{
    		string strSql = "DELETE FROM [WXMaterial_Media] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(strSql, paramters);
    		return cnt;
    	}
		
		/// <summary>
        /// 根据主键删除一条数据,带事务
        /// （当数据库表第一行是int自增主键时生成此方法）
        /// </summary>
    	public static int DeleteByID(System.Data.SqlClient.SqlTransaction tran, int id)
    	{
    		string strSql = "DELETE FROM [WXMaterial_Media] WHERE ID=@ID";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@ID",id) };
    
    		int cnt = DAL.SqlHelper.ExecuteNonQuery(tran, System.Data.CommandType.Text, strSql, paramters);
    		return cnt;
    	}

		/// <summary>
    	/// 分页实例集合行数
    	/// </summary>
    	public int TotalRowsInTable { get; set; }
    
    	/// <summary>
    	/// 读取分页的实例集合 同时返回表中的行数，适用于表中行数比较少的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<WXMaterial_Media> GetEntitysAllPaged(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,media_id,name,update_time,wx_url,url,type,COUNT(1) OVER(PARTITION BY '') AS TotalRowsInTable FROM [WXMaterial_Media] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<WXMaterial_Media>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取分页的实例集合 考虑到性能原因不返回行数，适用于表中行数非常多的情况。
    	/// （当数据库表第一行是int自增主键时生成此方法）
    	/// </summary>
    	public static List<WXMaterial_Media> GetEntitysAllPagedWithoutRowsCnt(int pageIndex, int pageSize)
    	{
    		string strSql = "SELECT ID,media_id,name,update_time,wx_url,url,type FROM [WXMaterial_Media] ORDER BY ID DESC OFFSET (@pageIndex -1) * @pageSize ROWS FETCH NEXT @pageSize ROWS ONLY";
    		System.Data.SqlClient.SqlParameter[] paramters = { 
    			new System.Data.SqlClient.SqlParameter("@pageIndex",pageIndex),
    			new System.Data.SqlClient.SqlParameter("@pageSize",pageSize)
    		};
    
    		return DAL.EntityDataHelper.FillData2Entities<WXMaterial_Media>(strSql, paramters);
    	}


    	/// <summary>
    	/// 读取所有实例，限制10万条。
    	/// </summary>
    	public static List<WXMaterial_Media> GetEntitysAll()
    	{
    		string strSql = "SELECT TOP 100000 ID,media_id,name,update_time,wx_url,url,type FROM [WXMaterial_Media]";
    		System.Data.SqlClient.SqlParameter[] paramters = null;
    
    		return DAL.EntityDataHelper.FillData2Entities<WXMaterial_Media>(strSql, paramters);
    	}



    	/// <summary>
    	/// 读取所有实例，以“外键”为条件。
    	/// （当表的第2 3 4列以ID或PK结尾时自动生成此方法）
    	/// </summary>
    	public static List<WXMaterial_Media> GetEntitysBymedia_id(int media_id)
    	{
    		string strSql = "SELECT ID,media_id,name,update_time,wx_url,url,type FROM [WXMaterial_Media] WHERE media_id=@media_id";
    		System.Data.SqlClient.SqlParameter[] paramters = { new System.Data.SqlClient.SqlParameter("@media_id",media_id) };
    
    		return DAL.EntityDataHelper.FillData2Entities<WXMaterial_Media>(strSql, paramters);
    	}

        #endregion
        
    }

}